{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the user documentation of the NYU Shanghai high-performance computing (HPC) cluster, also called HPC 4 Research. This documentation is maintained by NYUSH IT and the user community. It is a living document that you can update and add to. See How-To: Contribute to this Document for details.</p> <p> The global table of contents is on the left, the one of the current page is on the right. </p> <p>Additional resources</p> <ul> <li>How to create HPC account</li> <li>Performance and workload monitoring</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Read the following set of pages (in order) to learn how to get access and connect to the cluster.</p> <ol> <li>Getting Access</li> <li>Connecting</li> <li>Storage</li> <li>Slurm</li> <li>Getting Help (Writing Good Tickets; if no answer found, contact the HPC Helpdesk).</li> <li>HPC Tutorial</li> </ol> <p>Acknowledging NYUSH HPC Usage</p> <p>Acknowledge usage of the cluster in your manuscript as \"Computation has been performed on the HPC for Pudong/NYUSHC cluster of the NYU Shanghai\". Please add your publications using the cluster to this list.</p>"},{"location":"#news-maintenance-announcements","title":"News &amp; Maintenance Announcements","text":"<ul> <li> July 16<sup>th</sup>: New high-memory node <code>hpc-mem-5</code> with 4 TB of RAM.</li> <li> Until autumn 2024: Operation Exodus \u2013 Migration of all data from GPFS to CephFS storage.</li> <li> September 30<sup>th</sup> 2024: Unmounting of <code>/fast</code> on all non-transfer nodes.</li> <li> October 31<sup>st</sup> 2024: Retirement of GPFS/DDN storage.</li> </ul> <p>See Maintenance for a detailed list of current, planned, and previous maintenance and update work.</p>"},{"location":"#technical-details","title":"Technical Details","text":"<p>If you are interested in how this HPC cluster is set up on a technical level, we got you covered. There is an entire section on this.</p>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>The documentation is structured as follows:</p> <ul> <li>Administrative information about administrative processes such as how to get access, register users, work groups, and projects.</li> <li>Connecting technical help for connecting to the cluster.</li> <li>Storage describes how and where files are stored.</li> <li>HPC tutorial a first demo project for getting you started quickly.</li> <li>Cluster Scheduler technical help for using the Slurm scheduler.</li> <li>OnDemand Portal introduces web HPC access.</li> <li>Best Practice guidelines on recommended usage of certain aspects of the system.</li> <li>How-To short(ish) solutions for specific technical problems.</li> <li>Getting Help explains how you can obtain help in using the BIH HPC.</li> <li>Miscellaneous contains a growing list of pages that don't fit anywhere else.</li> </ul>"},{"location":"admin/getting-access/","title":"Getting Access","text":"<p>Access to the NYU Shanghai HPC cluster is conceptually based on user groups (also known as labs or units). Users have a relatively limited storage quota within their private home folder and scratch folder.</p> <p>Independent group leaders at NYU Shanghai can request a group on the cluster and name group members.  The work group leader (the group PI) bears the responsibility for the group's members and ensures that cluster policies and etiquette are followed. In brief: Fair usage rules apply and the cluster is not to be abused for unethical or illegal purposes. Major and/or continued violations may lead to exclusion of the entire group.  </p> <p>The group leader may also name one delegate (typically an IT-savvy Post-Doc) who is thereby allowed to take decision about cluster usage and work group management on behalf of the group leader.  The above mentioned responsibilities stay with the group leader.  </p>"},{"location":"admin/getting-access/#work-groups-and-users","title":"Work Groups and Users","text":"<p>All cluster users are member of exactly one primary work group. This affiliation is usually defined by real life organisational structures within NYU Shanghai. Leaders of independent research groups (PIs) can apply for a new cluster work group as follows:</p> <ol> <li>The group leader sends an email to shanghai.it.help@nyu.edu and includes the filled-out form below.    Please read the notes box before sending.</li> <li>The HPC helpdesk decides on the request and creates corresponding objects on the cluster (users, groups).</li> <li>New users are notified and sent further instructions via email.</li> </ol> <p>Important</p> <p>Changes to an existing group (adding new users, changes in resources, etc.) can only be requested by group leaders and delegates.</p> <p>Notes</p> <ul> <li>All cluster groups must have an owner and may have one delegate.</li> <li>Group ownership implies control but also accountability for their group files and members.</li> <li>Users can only be members of one primary work group.</li> <li>We strongly dis-encourage on-boarding non-lab members into your group.   This cause biases in usage accounting, may raise concerns in IT security and data privacy audits and also puts unfair responsibilities on the group leader.</li> </ul>"},{"location":"admin/maintenance/","title":"Next Maintenance Window","text":"<p>This page documents the current and known upcoming maintenance windows.</p>"},{"location":"admin/maintenance/#login-compute-and-storage-maintenance-december-13-14-2022","title":"Login, Compute and Storage Maintenance, December 13-14, 2022","text":"<p>All informationand updates regarding maintenance will be circulated on our forum https://hpc.</p>"},{"location":"admin/maintenance/#login-compute-and-storage-maintenance-march-22-23-2022","title":"Login, Compute and Storage Maintenance, March 22-23, 2022","text":"<p>All COMPUTE nodes and STORAGE resources won't be reachable!</p> <p>All nodes will be running in RESERVATION mode. This means you are still able to schedule new jobs on these nodes if their potential/allowed runtime does not extend into the maintenance window (Tuesday and Wednesday, March 22 and 23, all-day). For example, if you submit a job that can run up to 7 days after March 15 then the job will remain in \"pending/PD\" state giving the explanation of \"all nodes being reserved or unavailable\".</p> <p>Issues of today's maintenance:</p> <ul> <li>Mounting of storage to <code>/tmp</code> on login nodes</li> <li>Changing mount options of the root partition on the compute nodes</li> <li>Upgrading all nodes kernels and further packages<ul> <li>This implies an upgrade of CUDA, Singularity, and further packages</li> </ul> </li> <li>Cold reboot (\"power off, power on\") of storage system</li> <li>Exchanging <code>cephfs-2</code> switches (Tier 2 storage, not relevant for most users)</li> </ul> <p>IMPORTANT</p> <ul> <li>All nodes will reboot</li> <li>All running jobs will die</li> <li>All sessions on login nodes will die</li> </ul>"},{"location":"admin/policies/","title":"Policies","text":"<p>This page describes strictly enforced policies valid on the NYUSH HPC clusters.</p> <p>The aim of the HPC systems is to support the users in their scientific work and relies on their cooperation. First and foremost, the administration team enforces state of the art IT security and reliability practices through their organizational and operational processes and actions. We kindly ask user to follow the Cluster Etiquette describe below to allow for fair use and flexible access to the shared resources. Beyond this, policies are introduced or enforced only when required to ensure non-restrictive access to the resources themselves. Major or recurrent breaches of policies may lead to exclusion from service. </p> <p>We will update this list of policies over time. Larger changes will be announced through the mailing list.</p>"},{"location":"admin/policies/#cluster-etiquette","title":"Cluster Etiquette","text":"<ol> <li>The clusters are soft-partitioned shared resources that are made available under a \"fair use\" policy as far as possible.</li> <li>The cluster mailing list shanghai.it.help@nyu.edu is the primary contact channel for announcements by administration to users.    Users must be subscribed to the mailing list.    Users must follow the announcements, failure to do so can lead to missing important policy changes and thus losing access to the cluster or data.</li> <li>Do not perform any computation on the login nodes.    This includes: archive management tools such as <code>tar</code>, <code>(un)zip</code>, or <code>gzip</code>.    You should probably only run <code>screen</code>/<code>tmux</code> and maybe a text editor there.</li> <li>Do not perform heavy I/O operations on <code>/gpfsnyu/home/user</code> or <code>/gpfsnyu/scratch/user</code>.    Rather write data to the <code>/tmp</code>, and then transfer them to <code>/gpfsnyu</code>.</li> </ol>"},{"location":"admin/policies/#cluster-policies","title":"Cluster Policies","text":""},{"location":"admin/policies/#file-system-policies","title":"File System Policies","text":"<p>In the case of violations marked with a shield () administration reserves the right to remove write and possibly read permission to the given locations. Policies marked with a robot () are automatically enforced.</p> <ol> <li>Storage on the GPFS file system is a sparse resource try to use both data volume and file sparingly.    Note well that small files above ~4KB take up at least 8MB of space.</li> <li>Default quotas are as follows (each user has a <code>home</code> and <code>scratch</code> volume).<ul> <li><code>home</code> 50GB space</li> <li><code>scratch</code> 10TB space</li> </ul> </li> <li>The overall throughput limit is 10GB/sec.    Try not to overload the cluster I/O wise.</li> <li>  User home/scratch file sets have to be owned by the user, group is <code>hpc-users</code> and mode is <code>u=rwx,go=</code>; POSIX ACLs are prohibited.     This policy is automatically enforced every 5 minutes.</li> <li> All files in scratch will be moved into a read-only \"trash can\" inside <code>/scratch/NYUSH_TRASH</code> after 14 days (by <code>mtime</code>) over night.    Trash directories will be removed after 14 further days.<ul> <li>Users can arrange with shanghai.it.help to keep files longer by using <code>touch</code> on files in <code>scratch</code> and subsequently bumping the <code>mtime</code>.</li> <li> In the case of abuse of this mechanism / failure to communicate with hpc-helpdesk, administration reserves the right to drastically reduce scratch quota of affected users and employ other measures to ensure stability of operations.</li> <li>You can learn more in the Automated Scratch Cleanup section.</li> </ul> </li> <li> Administration will not delete any files (outside of <code>/tmp</code>).    In the case that users need to delete files that they can access but not update/delete, administration will either give write permissions to the Unix group of the work group or project or change the owner to the owner/delegate of this group.    This can occur in a group/project directory of a user who has left the organization.    In the case that a user leaves the organization, the owner/delegate of the hosting group can request getting access to the user's files with the express agreement of this user.</li> <li>Only use <code>/tmp</code> in Slurm-controlled jobs.    This will enforce that Slurm can clean up after you.</li> </ol>"},{"location":"admin/policies/#connections","title":"Connections","text":"<p>Network connections are a topic important in security. In the case of violations marked with a shield () administration reserves the right to terminate connections without notice and perform other actions.</p> <ol> <li>Data transfers should happen through the compute nodes themselves.</li> <li> The cluster is not meant as a \"hop node\".    Do not use it to connect to the login node first and then jump to another host outside of the cluster network. Doing so is a breach of cluster policies and quite possibly your organization's IT security policies</li> <li> As a corollary, SSH reverse tunnels are strictly prohibited.</li> <li>Outgoing connections are meant for data transfers only (in other words: using SSH/SCP to download file is fine).</li> <li> Do not leave outgoing connections open longer than necessary.</li> <li>Sessions of <code>screen</code> and <code>tmux</code> are only allowed to run on the head nodes.    They will be terminated automatically on the compute nodes.</li> </ol>"},{"location":"admin/policies/#interactive-use","title":"Interactive Use","text":"<ol> <li>Interactive sessions block resources to the scheduler.    Reduce interactive use to the minimal time and resources possible.</li> <li>The cluster is optimized for batch processing.    Interactive use is a secondary aim.    Administration attempts to strike a good balance here but batch usage is most important.    Consider using our Open on Demand service for interactive use. </li> <li>Interactive use should happen through the Slurm scheduler (<code>srun</code>).</li> <li>SSH connections to the nodes are allowed for monitoring purposes but not meant for computation.    Administration enforces this by restricting all jobs outside of Slurm to use at most 1 core and 128 MB of RAM.    This limit is enforced per node per user with Linux cgroups.</li> </ol>"},{"location":"admin/policies/#gpu-use","title":"GPU Use","text":"<ol> <li>Interactive sessions block resources to the scheduler.    Interactive GPU use is discouraged.</li> <li>Accessing GPUs outside of the Slurm scheduler has been disabled by administration.</li> <li>Most GPU resources are privately owned, and you can use them only if you get permission from the owner.</li> </ol>"},{"location":"admin/policies/#account-policies","title":"Account Policies","text":"<ol> <li> Sharing accounts and/or credentials is strictly prohibited.    Doing so is a breach of cluster policies and certainly also of IT security policies.</li> <li> Hosting shared services on the cluster is also strictly prohibited.         - This includes Jupyter servers that shall only be used by the user starting them, this also includes work schedulers such as Dask.         - You can assume that the cluster internal network is secure and you do not have to encrypt connections between nodes.         - Connections towards outside of the cluster must be encrypted (e.g., via SSH tunnels; incoming ones as reverse tunneling is prohibited, see above).         - Access to any service must be protected by appropriate means, e.g., passwords, tokens or client certificates.</li> </ol>"},{"location":"admin/policies/#maintenance","title":"Maintenance","text":"<ol> <li>Maintenance that are expected to cause major service interruptions (the whole system becomes unusable and/or jobs might be prevented to run etc.) are announced 14 days in advance.</li> <li>Maintenance of login nodes (e.g., reboot one node while the other is still available) are announced 7 days in advance.</li> </ol>"},{"location":"admin/policies/#credentials-policies","title":"Credentials Policies","text":"<ol> <li>Login is currently based on SSH keys only.</li> <li>For technical reasons, the compute nodes also use the <code>~/.ssh/authorized_keys</code> file but their usage is discouraged.</li> </ol>"},{"location":"best-practice/bashrc-guide/","title":"<code>~/.bashrc</code> Guide","text":"<p>You can find the current default content of newly created user homes in <code>/etc/skel.bih</code>:</p> <pre><code>$ head /etc/skel.bih/.bash*\n==&gt; /etc/skel.bih/.bash_logout &lt;==\n# ~/.bash_logout\n\n==&gt; /etc/skel.bih/.bash_profile &lt;==\n# .bash_profile\n\n# Get the aliases and functions\nif [ -f ~/.bashrc ]; then\n        . ~/.bashrc\nfi\n\n# User specific environment and startup programs\n\nPATH=$PATH:$HOME/.local/bin:$HOME/bin\n\n==&gt; /etc/skel.bih/.bashrc &lt;==\n# .bashrc\n\n# Source global definitions\nif [ -f /etc/bashrc ]; then\n        . /etc/bashrc\nfi\n\n# Uncomment the following line if you don't like systemctl's auto-paging feature:\n# export SYSTEMD_PAGER=\n</code></pre>"},{"location":"best-practice/env-modules/","title":"Custom Environment Modules","text":"<p>This document contains a few tips for helping you using environment modules more effectively. As the general online documentation is lacking a bit, we also give the most popular commands here.</p>"},{"location":"best-practice/env-modules/#how-does-it-work","title":"How does it Work?","text":"<p>Environment modules are descriptions of software packages. The <code>module</code> command is provided which allows the manipulation of environment variables such as <code>PATH</code>, <code>MANPATH</code>, etc., such that programs are available without passing the full path. Environment modules also allow specifying dependencies between packages and conflicting packages (e.g., when the same binary is available in two packages). Further, environment variables allow the parallel installation of different software versions in parallel and then using software \"a la carte\" in your projects.</p>"},{"location":"best-practice/env-modules/#popular-commands","title":"Popular Commands","text":""},{"location":"best-practice/env-modules/#querying","title":"Querying","text":"<p>List currently loaded modules:</p> <pre><code>$ module list\n</code></pre> <p>Show all available modules</p> <pre><code>$ module avail\n</code></pre>"},{"location":"best-practice/env-modules/#loadingunloading-modules","title":"Loading/Unloading Modules","text":"<p>Load one module, make sure to use a specific version to avoid ambiguities.</p> <pre><code>$ module load Jannovar/0.16-Java-1.7.0_80\n</code></pre> <p>Unload one module</p> <pre><code>$ module unload Jannovar\n</code></pre> <p>Unload all modules</p> <pre><code>$ module purge\n</code></pre>"},{"location":"best-practice/env-modules/#getting-help","title":"Getting Help","text":"<p>Get help for environment modules</p> <pre><code>$ module help\n</code></pre> <p>Get help for a particular environment module</p> <pre><code>$ module help Jannovar/0.16-Java-1.7.0_80\n</code></pre>"},{"location":"best-practice/env-modules/#using-your-own-module-files","title":"Using your own Module Files","text":"<p>You can also create your own environment modules. Simply create a directory with module files and then use <code>module use</code> for using the modules from the directory tree.</p> <pre><code>$ module use path/to/modules\n</code></pre>"},{"location":"best-practice/env-modules/#faq-why-bash-module-command-not-found","title":"FAQ: Why <code>-bash: module: command not found</code>?","text":"<p>On the login nodes, the <code>module</code> command is not installed. You should not run any computations there, so why would you need environment modules there? ;)</p> <pre><code>meg-login2$ module\n-bash: module: command not found\n</code></pre> <p>Use <code>srun --pty bash -i</code> to get to one of the compute nodes.</p>"},{"location":"best-practice/env-modules/#auto-loading-a-set-of-modules","title":"Auto-loading a set of Modules","text":"<p>You will certainly finding yourself using a set of programs regularly without it being part of the core cluster installation, e.g., SAMtools, or Python 3. Just putting the appropriate <code>module load</code> lines in your <code>~/.bashrc</code> will generate warnings when logging into the login node. It is thus recommended to use the following snippet for loading modules automatically on logging into a compute node:</p> <pre><code>case \"${HOSTNAME}\" in\n    login-*)\n        ;;\n    *)\n        # load Python3 environment module\n        module load Python/3.4.3-foss-2015a\n\n        # Define path for temporary directories, don't forget to cleanup!\n        # Also, this will only work after /fast is available.\n        export TMPDIR=/data/cephfs-1/home/users/$USER/scratch/tmp\n        ;;\nesac\n</code></pre>"},{"location":"best-practice/project-structure/","title":"Project File System Structure","text":"<p>Under Construction</p> <p>This guide was written for the old GPFS file system and is in the process of being updated.</p>"},{"location":"best-practice/project-structure/#general-aims","title":"General Aims","text":"<p>Mostly, you can separate the files in your projects/pipelines into one of the following categories:</p> <ol> <li>scripts (and their documentation)</li> <li>configuration</li> <li>data</li> </ol> <p>Ideally, scripts and documentation are independent of a given project and can be separated from the rest. Configuration is project-dependent and small and mostly does not contain any sensitive information (such as genotypes that allows for reidentification of donors). In most cases, data might be large and is either also stored elsewhere or together with scripts and configuration can be regenerated easily.</p> <p>There is no backup of <code>work</code> and <code>scratch</code></p> <p>The cluster GPFS file system <code>/fast</code> is not appropriate for keeping around single \"master\" copies of data. You should have a backup and archival strategy for your valuable \"master\" copy data.</p>"},{"location":"best-practice/project-structure/#best-practices","title":"Best Practices","text":""},{"location":"best-practice/project-structure/#scripts","title":"Scripts","text":"<ul> <li>Your scripts should go into version control, e.g., a Git repository.</li> <li>Your scripts should be driven by command line parameters and/or configuration such that no paths etc. are hard-coded.   If for a second data set, you need to make a copy of your scripts and adjust some variables, e.g., at the top, you're doing something in a suboptimal fashion.   Rather, get these values from the command line or a configuration file and only store (sensible) defaults in your script where appropriate.</li> <li>Thus, ideally your scripts are not project-specific.</li> </ul>"},{"location":"best-practice/project-structure/#configuration","title":"Configuration","text":"<ul> <li>Your configuration usually is project-specific.</li> <li>Your configuration should also go into version contro, e.g., a Git repository.</li> </ul> <p>In addition, you might need project-specific \"wrapper\" scripts that just call your project-independent script with the correct paths for your project. These scripts rather fall into the \"configuration\" category and should then live together with your configuration.</p>"},{"location":"best-practice/project-structure/#data","title":"Data","text":"<ul> <li>Your data should go into a location separate from your scripts and configuration.</li> <li>Ideally, the raw input data is separated from the work and output files such that you can make these files and directories read-only and don't accidentally damage these files.</li> </ul> <p>Temporary files</p> <p>You really should keep temporary files in a temporary directory, set the environment variable <code>TMPDIR</code> appropriately and automatically clean them up (see Useful Tips: Temporary Files)</p>"},{"location":"best-practice/project-structure/#best-practices-in-practice","title":"Best Practices in Practice","text":"<p>But how can we put this into practice? Below, we give some examples of how to do this. Note that for simplicity's sake we put all scripts and configuration into one directory/repository contrary to the best practices above. This is for educational purposes only and you should strive for reuseable scripts where it makes sense and separate scripts and configuration.</p> <p>We will limit this to simple Bash scripts for education's purposes. You should be able to easily adapt this to your use cases.</p> <p>Thus, the aim is to separate the data from the non-data part of the project such that we can put the non-data part of the project into a separate location and under version control. We call the location for non-data part of the project the home location of your project and the location for the data part of the project the work location of your project.</p> <p>Overall, we have three options:</p> <ol> <li>Your processes are run in the home location and the sub directories used for execution are links into the work location using symlinks.</li> <li>Your processes are run in the work location and<ol> <li>the scripts are linked into the work location using symlinks, OR</li> <li>the scripts are called from the home location, maybe through project-specific wrapper scripts.</li> </ol> </li> </ol>"},{"location":"best-practice/project-structure/#example-link-configscripts-into-work-location-option-1","title":"Example: Link config/scripts into work location (Option 1)","text":"<p>Creating the work directory and copy the input files into <code>work/input</code>.</p> <pre><code>$ mkdir -p project/work/input\n$ cp /gpfsunyu/spack/share/projects/cubit/tutorial/input/* project/work/input\n</code></pre> <p>Creating the home space. We initialize a Git repository, properly configure the <code>.gitignore</code> file and add a <code>README.md</code> file.</p> <pre><code>$ mkdir -p project/home\n$ cd project/home\n$ cat &lt;&lt;EOF &gt;.gitignore\n*~\n.*.sw?\nEOF\n$ cat &lt;&lt;EOF &gt;README.md\n# Example Project\n\nThis is an example project with config/scripts linked into work location.\nEOF\n$ git init\n$ git add .gitignore README.md\n$ git commit -m 'Initial project#\n</code></pre> <p>We then create the a simple script for executing the mapping step and a configuration file that gives the path to the index and list of samples to process.</p> <pre><code>$ mkdir scripts\n$ cat &lt;&lt;\"EOF\" &gt;scripts/run-mapping.sh\n#!/bin/bash\n\n# Unofficial Bash script mode, see:\n# http://redsymbol.net/articles/unofficial-bash-strict-mode/\nset -euo pipefail\n\n# Get directory to bash file, see\n# https://stackoverflow.com/a/4774063/84349\nSCRIPTPATH=\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\"\n\n# Helper function to print help to stderr.\nhelp()\n{\n  &gt;&amp;2 echo \"Run Mapping Step\"\n  &gt;&amp;2 echo \"\"\n  &gt;&amp;2 echo \"run-mapping.sh [-c config.sh] [-h]\"\n}\n\n# Parse command line arguments into bash variables.\nCONFIG=\nwhile getopts \"hs:\" arg; do\n  case $arg in\n    h)\n      help()\n      exit\n      ;;\n    s)\n      CONFIG=$OPTARG\n      ;;\n  esac\ndone\n\n# Print the executed commands.\nset -x\n\n# Load default configuration, then load configuration file if any was given.\nsource $SCRIPTPATH/../config/default-config.sh\nif [[ -z \"$CONFIG\" ]]; then\n    source $CONFIG\nfi\n\n# Create output directory.\nmkdir -p output\n\n# Actually perform the mapping.  This assumes that you have\n# made the bwa and samtools commands available, e.g., using conda.\nfor sample in $SAMPLES; do\n    bwa mem \\\n        $BWA_INDEX \\\n        input/${sample}_R1.fq.gz \\\n        input/${sample}_R2.fq.gz \\\n    | samtools sort \\\n        -o output/${sample}.bam \\\n        /dev/stdin\ndone\n\nEOF\n$ chmod +x scripts/run-mapping.sh\n$ mkdir -p config\n$ cat &lt;&lt;\"EOF\" &gt;config/default-config.sh\nBWA_INDEX=/gpfsnyu/spack/share/cubit/current/static_data/reference/GRCh37/hs37d5/hs37d5.fa\nSAMPLES=\nEOF\n$ cat &lt;&lt;\"EOF\" &gt;config/project-config.sh\n$ BWA_INDEX comes from default configuration already\nSAMPLES=test\nEOF\n</code></pre> <p>This concludes the basic project setup. Now, to the symlinks:</p> <pre><code>$ cd ../work\n$ ln -s ../home/scripts ../home/config .\n</code></pre> <p>And, to the execution...</p> <pre><code>$ ./scripts/run-mapping -c config/project-config.sh\n[...]\n</code></pre>"},{"location":"best-practice/project-structure/#example-link-data-into-home-option-21","title":"Example: Link Data Into Home (Option 2.1).","text":"<p>We can reuse the project up to the statement \"This concludes the basic project setup\" in the example for option 1.</p> <p>Then, we can do the following:</p> <pre><code>$ cd ../work\n$ mkdir -p output\n\n$ cd ../home\n$ cat &lt;&lt;\"EOF\" &gt;&gt;.gitignore\n\n# Ignore all data\ninput/\nwork/\noutput/\nEOF\n$ git add .gitignore\n$ git commit -m 'Ignoring data file in .gitignore'\n$ ln -s ../work ../output .\n</code></pre> <p>And we can execute everything in the home directory.</p> <pre><code>$ ./scripts/run-mapping -c config/project-config.sh\n[...]\n</code></pre>"},{"location":"best-practice/project-structure/#example-wrapper-scripts-in-home-option-22","title":"Example: Wrapper Scripts in Home (Option 2.2)","text":"<p>Again, we can reuse the project up to the statement \"This concludes the basic project setup\" in the example for option 1.</p> <p>Then, we do the following:</p> <pre><code>$ cd ../work\n$ cat &lt;&lt;\"EOF\" &gt;do-run-mapping.sh\n#!/bin/bash\n\n../home/scripts/run-mapping.sh \\\n    -c ../home/config/project-config.sh\nEOF\n$ chmod +x do-run-mapping.sh\n</code></pre> <p>Note that the the <code>do-run.sh</code> script could also go into the project-specific Git repository and be linked into the work directory.</p> <p>Finally, we can run our pipeline:</p> <pre><code>$ cd ../work\n$ ./do-run-mapping.sh\n[...]\n</code></pre>"},{"location":"best-practice/screen-tmux/","title":"Screen and Tmux Best Pratice","text":"<p>The program <code>screen</code> allows you to detach your session from your current login session. So in case you get disconnected your screen session will stay alive.</p> <p>Hint</p> <p>You have to reconnect to screen on the machine that you started it. We thus recommend starting it only on the login nodes and not on a compute node.</p>"},{"location":"best-practice/screen-tmux/#start-and-terminat-a-screen-session","title":"Start and terminat a screen session","text":"<p>You start a new <code>screen</code> session by</p> <p><pre><code>$ screen\n</code></pre> When you are in a screen session you can terminate it with</p> <p><pre><code>$ exit\n</code></pre> so its gone then.</p>"},{"location":"best-practice/screen-tmux/#detach-a-screen-session","title":"Detach a screen session","text":"<p>If you want to detach your screen session press <code>Ctrl+a d</code></p>"},{"location":"best-practice/screen-tmux/#list-screen-sessions","title":"List screen sessions","text":"<p>To list all your screen sessions run</p> <pre><code>$ screen -ls\n\nThere is a screen on:\n    2441.pts-1.med0236  (Detached)\n1 Socket in /var/run/screen/S-kbentel.\n</code></pre>"},{"location":"best-practice/screen-tmux/#reattach-screen-session","title":"Reattach screen session","text":"<p>To reattach a screen session run</p> <pre><code>$ screen -r screen_session_id\n</code></pre> <p>If you do not know the <code>screen_session_id</code> you can get it with <code>screen -ls</code>, e.g. <code>2441.pts-1.med0236</code> in the example above. You do not have to type the whole <code>screen_session_id</code> only as much as is necessary to identify it uniquely. In case there is only one screen session detached it is enough to run <code>screen -r</code></p>"},{"location":"best-practice/screen-tmux/#kill-a-detached-screen-session","title":"Kill a detached screen session","text":"<p>Sometimes it is necessary to kill a detached screen session. This is done with the command</p> <pre><code>$ screen -X -S screen_session_id quit\n</code></pre>"},{"location":"best-practice/screen-tmux/#multiple-windows-in-a-screen-session","title":"Multiple windows in a screen session","text":"<p>It is possible to have multiple windows in a screen session. So suppose you are logged into a screen session, these are the relevant shortcuts</p> <pre><code>new win:           Ctrl+a c\nnext/previous win: Ctrl+a n/p\n</code></pre> <p>To terminate a window just enter</p> <pre><code>$ exit\n</code></pre>"},{"location":"best-practice/screen-tmux/#configuration-file","title":"Configuration file","text":"<p>Here is a sensible screen configuration. Save it as <code>~/.screenrc</code>.</p> <p>screenrc</p>"},{"location":"best-practice/screen-tmux/#fix-a-broken-screen-session","title":"Fix a broken screen session","text":"<p>In case your screen session doesn't write to the terminal correctly, i.e. the formatting of the output is broken, you can fix it by typing to the terminal:</p> <pre><code>$ tput smam\n</code></pre>"},{"location":"best-practice/software-craftmanship/","title":"General Software Craftmanship","text":"<p>Computer software, or simply software, is a generic term that refers to a collection of data or computer instructions that tell the computer how to work, in contrast to the physical hardware from which the system is built, that actually performs the work. -- Wikipedia: Software </p> <p>As you will most probably never have contact with the HPC system hardware, everything you interact with on the HPC is software. All of your scripts, your configuration files, programs installed by you or administration, and all of your data.</p> <p>This should also answer the question why you should care about software and why you should try to create and use software of a minimal quality.</p> <p>Software craftsmanship is an approach to software development that emphasizes the coding skills of the software developers themselves. -- Wikipedia: Software Craftmanship </p> <p>This Wiki page is not mean to give you an introduction of creating good software but rather collect a (growing) list of easy-to-use and high-impact points to improve software quality. Also, it provides pointers to resources elsewhere on the internet.</p>"},{"location":"best-practice/software-craftmanship/#use-version-control","title":"Use Version Control","text":"<p>Use a version control system for your configuration and your code. Full stop. Modern version control systems are Git and Subversion.</p> <ul> <li>Official Git Documentation</li> <li>Github Help</li> <li>Fix Common Git Problems</li> </ul>"},{"location":"best-practice/software-craftmanship/#do-not-share-gitsvn-checkouts-for-multiple-users","title":"Do not Share Git/SVN Checkouts for Multiple Users","text":"<p>Every user should have their own Git/Subversion checkout. Otherwise you are inviting a large number of problems.</p>"},{"location":"best-practice/software-craftmanship/#document-your-code","title":"Document Your Code","text":"<p>This includes</p> <ul> <li>programmer-level documentation in your source code, both inline and per code unit (e.g., function/class)</li> <li>top-level documentation, e.g., in README files.</li> </ul>"},{"location":"best-practice/software-craftmanship/#document-your-data","title":"Document Your Data","text":"<p>Document where you got things from, how to re-download, etc. E.g., put a README file into each of your data top level directories.</p>"},{"location":"best-practice/software-craftmanship/#use-checksums","title":"Use Checksums","text":"<p>Use MD5 or other checksums for your data. For example, <code>md5sum</code> and <code>hashdeep</code> are useful utilities for computing and checking them:</p> <ul> <li><code>md5sum</code> How-To (tools such as <code>sha256sum</code> work the same...)</li> <li><code>hashdeep</code> How-To</li> </ul>"},{"location":"best-practice/software-craftmanship/#use-a-workflow-management-system","title":"Use a Workflow Management System","text":"<p>Use some system for managing your workflows. These systems support you by</p> <ul> <li>Detect failures and don't continue working with broken data,</li> <li>continue where you left off when someting breaks,</li> <li>make things more reproducible,</li> <li>allow distribution of jobs on the cluster.</li> </ul> <p>Snakemake is a popular workflow management system widely used in Bioinformatics. A minimal approach is using Makefiles.</p>"},{"location":"best-practice/software-craftmanship/#understand-bash-and-shell-exit-codes","title":"Understand Bash and Shell Exit Codes","text":"<p>If you don't want to use a workflow management system, e.g., for one-step jobs, you should at least understand Bash job management and exit codes. For example, you can use <code>if/then/fi</code> in Bash together with exit codes to:</p> <ul> <li>Only call a command if the previous command succeded.</li> <li>Remove incomplete output files in case of errors.</li> </ul> <pre><code>if [[ ! -e file.md5 ]]; then\n    md5sum file &gt;file.md5 \\\n    || rm -f file.md5\nfi\n</code></pre> <p>Also, learn about the inofficial Bash strict mode.</p>"},{"location":"best-practice/software-installation-with-conda/","title":"Software Installation with Conda","text":""},{"location":"best-practice/software-installation-with-conda/#conda","title":"Conda","text":"<p>Users do not have the rights to install system packages on the BIH HPC cluster. For the management of bioinformatics software we therefore recommend using the conda package manager. Conda provides software in different \u201cchannels\u201d and one of those channels contains a huge selection of bioinformatics software (bioconda). Generally packages are pre-compiled and conda just downloads the binaries from the conda servers.</p> <p>You are in charge of managing your own software stack, but conda makes it easy to do so. We will provide you with a description on how to install conda and how to use it. Of course there are many online resources that you can also use. Please find a list at the end of the document.</p> <p>Also note that some system-level software is managed through environment modules.</p>"},{"location":"best-practice/software-installation-with-conda/#premise","title":"Premise","text":"<p>When you logged into the cluster, please make sure that you also executed <code>srun</code> to log into a computation node and perform the software installation there.</p>"},{"location":"best-practice/software-installation-with-conda/#installing-conda","title":"Installing conda","text":"<pre><code>$ srun --mem=5G --pty bash -i\n $ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n $ bash Miniconda3-latest-Linux-x86_64.sh -b -f -p $HOME/work/miniconda\n $ eval \"$(/$HOME/work/miniconda/bin/conda shell.bash hook)\"\n $ conda init\n $ conda config --set auto_activate_base false\n</code></pre> <p>This will install conda to <code>$HOME/work/miniconda</code>. You can change the path to your liking, but please note that your <code>$HOME</code> folder has limited space. The <code>work</code> subfolder however has a bigger quota. More about this here.</p> <p>To make bioinformatics software available, we have to add the <code>bioconda</code> and some other channels to the conda configuration:</p> <pre><code> $ conda config --add channels bioconda\n $ conda config --add channels default\n $ conda config --add channels conda-forge\n</code></pre>"},{"location":"best-practice/software-installation-with-conda/#installing-software-with-conda","title":"Installing software with conda","text":"<p>Installing packages with conda is straight forward:</p> <pre><code> $ conda install &lt;package&gt;\n</code></pre> <p>This will install a package into the conda base environment.  We will explain environments in detail in the next section. To search for a package, e.g. to find the correct name in conda or if it exists at all, issue the command:</p> <pre><code> $ conda search &lt;string&gt;\n</code></pre> <p>To choose a specific version (conda will install the latest version that is compatible with the current installed Python version), you can provide the version as follows:</p> <pre><code> $ conda install &lt;package&gt;=&lt;version&gt;\n</code></pre> <p>Please note that new conda installs may ship with a recently update Python version and not all packages might have been adapted. E.g., if you find out that some packages don't work after starting out/upgrading to Python 3.8, simply try to downgrade Python to 3.7 with <code>conda install python=3.7</code>.</p> <p>Hint</p> <p>As resolving the dependency tree of an installation candidate can take a lot of time in Conda, especially when you are installing software from an <code>environment.yaml</code> file, an alternative resolver has been presented that you can use to install software into your Conda environment. The time savings are immense and an installation that took more than an hour can be resolved in seconds.</p> <p>Simply run</p> <pre><code> $ conda install mamba\n</code></pre> <p>With that, you can install software into your environment using the same syntax as for Conda:</p> <pre><code> $ mamba install &lt;package&gt;\n</code></pre>"},{"location":"best-practice/software-installation-with-conda/#creating-an-environment","title":"Creating an environment","text":"<p>Conda lets you create environments, such that you can test things in a different environment or group your software. Another common use case is to have different environments for the different Python versions. Since conda is Python-based, conflicting packages will mostly struggle with the Python version.</p> <p>By default, conda will install packages into its root environment. Please note that software that does not depend on Python and is installed in the root environment, is is available in all other environments.</p> <p>To create a Python 2.7 environment and activate it, issue the following commands:</p> <pre><code> $ conda create -n py27 python=2.7\n $ source activate py27\n(py27)  $\n</code></pre> <p>From now on, conda will install packages into the <code>py27</code> environment when you issue the <code>install</code> command. To switch back to the root environment, simply deactivate the <code>py27</code> environment:</p> <pre><code>(py27)  $ source deactivate py27\n $\n</code></pre> <p>But of course, as Python 2.7 is not supported any more by the Python Software Foundation, you should switch over to Python 3 already!</p>"},{"location":"best-practice/temp-files/","title":"Temporary Files","text":"<p>Temporary Files and Slurm</p> <p>See Slurm: Temporary Files for information how Slurm controls access to local temporary storage.</p> <p>Often, it is necessary to use temporary files, i.e., write something out in the  middle of your program, read it in again later, and then discard these files. For example, <code>samtools sort</code> has to write out chunks of sorted read alignments for allowing to sort files larger than main memory.</p>"},{"location":"best-practice/temp-files/#environment-variable-tmpdir","title":"Environment Variable <code>TMPDIR</code>","text":"<p>Traditionally, in Unix, the environment variables <code>TMPDIR</code> is used for storing the location of the temporary directory. When undefined, usually <code>/tmp</code> is used.</p>"},{"location":"best-practice/temp-files/#temporary-directories-on-the-bih-cluster","title":"Temporary Directories on the BIH Cluster","text":"<p>Generally, there are two locations where you could put temporary files:</p> <ul> <li><code>/data/cephfs-1/home/users/$USER/scratch/tmp</code> -- inside your scratch folder on the CephFS file system; this location is available from all cluster nodes</li> <li><code>/tmp</code> -- on the local node's temporary folder; this location is only available on the node itself.   The slurm scheduler uses Linux namespaces such that every job gets its private <code>/tmp</code> even when run on the same node.</li> </ul>"},{"location":"best-practice/temp-files/#best-practice-use-scratchtmp","title":"Best Practice:  Use <code>scratch/tmp</code>","text":"<p>Use CephFS-based TMPDIR</p> <p>Generally setup your environment to use <code>/data/cephfs-1/home/users/$USER/scratch/tmp</code> as filling the local disk of a node with forgotten files can cause a lot of problems.</p> <p>Ideally, you append the following to your <code>~/.bashrc</code> to use <code>/data/cephfs-1/home/users/$USER/scratch/tmp</code> as the temporary directory. This will also create the directory if it does not exist. Further, it will create one directory per host name which prevents too many entries in the temporary directory.</p> <pre><code>export TMPDIR=$HOME/scratch/tmp/$(hostname)\nmkdir -p $TMPDIR\n</code></pre> <p>Prepending this to your job scripts is also recommended as it will ensure that the temporary directory exists.</p>"},{"location":"best-practice/temp-files/#tmpdir-and-the-scheduler","title":"<code>TMPDIR</code> and the scheduler","text":"<p>In the older nodes, the local disk is a relatively slow spinning disk, in the newer nodes, the local disk is a relatively fast SSD. Further, the local disk is independent from the CephFS file system, so I/O volume to it does not affect the network or any other job on other nodes. Please note that by default, Slurm will not change your environment variables. This includes the environment variable <code>TMPDIR</code>.</p> <p>Slurm will automatically update temporary files in a job's <code>/tmp</code> on the local file system when the job terminates. To automatically clean up temporary directories on the shared file system, use the following tip.</p>"},{"location":"best-practice/temp-files/#use-bash-traps","title":"Use Bash Traps","text":"<p>You can use the following code at the top of your job script to set <code>TMPDIR</code> to the location in your home directory and get the directory automatically cleaned when the job is done (regardless of successful or erroneous completion):</p> <pre><code># First, point TMPDIR to the scratch in your home as mktemp will use thi\nexport TMPDIR=$HOME/scratch/tmp\n# Second, create another unique temporary directory within this directory\nexport TMPDIR=$(mktemp -d)\n# Finally, setup the cleanup trap\ntrap \"rm -rf $TMPDIR\" EXIT\n</code></pre>"},{"location":"connecting/connecting-windows/","title":"Connecting via SSH on Windows","text":""},{"location":"connecting/connecting-windows/#install-ssh-client-for-windows","title":"Install SSH Client for Windows","text":"<p>We recommend to use the program MobaXterm on Windows. MobaXterm is a software that allows you to connect to an SSH server, much like PuTTy, but also maintains your SSH key.</p> <p>Alternative SSH Clients for Windows</p> <ul> <li>Another popular option is PuTTy but many users have problems configuring it correctly with SSH keys.</li> <li>On Windows 10, you can also install Windows Subsystem for Linux, e.g., together with WSL Terminal.   This is not for the faint of heart (but great if you're a Unix head).</li> </ul> <ul> <li>Navigate to https://mobaxterm.mobatek.net/download-home-edition.html</li> <li>Download either the<ul> <li>Portable edition (blue button lefthand-side, if you have no admin rights, e.g. on a Charite or MDC workstation), or</li> <li>Installer edition (green button righthand-side, requires admin rights on your computer).</li> </ul> </li> <li>Install or unpack MobaXterm and start the software. As a Charite user, please cancel any firewall warnings that pop up.</li> </ul>"},{"location":"connecting/connecting-windows/#software-for-transfering-data-fromto-windows","title":"Software for transfering data from/to Windows","text":"<p>For transfering data from/to Windows, we recommand using WinSCP. Install the latest version from here: https://winscp.net/eng/download.php</p> <p>On the <code>Login</code> screen of WinSCP create a new login by selecting <code>New Site</code>.</p> <p>Fill in the following parameters:</p> <ul> <li><code>File protocol</code>: <code>SFTP</code></li> <li><code>Host name</code>: <code>hpc-transfer-1.cubi.bihealth.org</code> or <code>hpc-transfer-2.cubi.bihealth.org</code></li> <li><code>User name</code>: your user name</li> </ul> <p>Go to <code>Advanced</code> &gt; <code>SSH</code> &gt; <code>Authentication</code> &gt; <code>Authentication parameters</code> &gt; <code>Private key file</code> and select your private ssh key file (in <code>.ppk</code> format).</p> <p>Press <code>Ok</code> then <code>Save</code>.</p> <p>Press <code>Login</code> to connect. It will ask for your private key passphrase, if you set one up.</p> <p>If you need to convert your private ssh key file the <code>.ppk</code> format, on the WinSCP login screen go to <code>Tools</code> &gt; <code>PuTTYgen</code> and follow the steps here: https://docs.acquia.com/cloud-platform/manage/ssh/sftp-key/</p>"},{"location":"connecting/connecting-windows/#connecting-from-within-mdccharite-network","title":"Connecting from within MDC/Charite Network","text":"<p>Click on <code>Session</code>.</p> <p></p> <p>Click on <code>SSH</code>.</p> <p></p> <p>In Basic SSH settings, enter a hostname (<code>hpc-login-X.cubi.bihealth.org</code>, where <code>X</code> is 1 or 2), check Specify username and enter your username in the textfield. Select the tab Advanced SSH settings, check Use private key and select your private SSH key file (possible choices described with the next to figures).</p> <p></p> <p>Select the <code>id_rsa</code> file generated in Linux OR</p> <p></p> <p>select the <code>id_rsa.ppk</code> file generated in Windows with MobaXterm.</p> <p></p> <p>Afterwards hit the OK button and MobaXterm will connect.</p> <p></p> <p>The session will be stored automatically and you can establish new connections later on, or also multiple ones at the same time, if you like.</p>"},{"location":"connecting/connecting/","title":"Connecting to the HPC cluster","text":"<p>The HPC cluster is only available via the campus networks. VPN access requires additional measures which are described in Connecting from External Networks.</p> <p>There are two primary methods for interacting with NYU Shanghai HPC:</p> <ol> <li>Through the \u201cOndemand\u201d web portal.</li> <li>Via SSH and Slurm.</li> </ol> <p>This part of the documentation only described direct console access via SSH. For information regarding the web portal, please read OnDemand Portal. In case you're not familiar with SSH, you should probably start via the web portal or (if you are determined to learn) read through our SSH basics page.</p>"},{"location":"connecting/connecting/#in-brief","title":"In brief","text":"<p>Follow these steps to connect to NYU Shanghai HPC via the command line:</p> <ol> <li>Register an account via submiting forum.  </li> <li>Generate a SSH key pair  in Linux or Windows</li> <li> <p>Connect to one of the two login nodes.</p> <pre><code># Pudong Cluster\n$ ssh NetID@hpc.shanghai.nyu.edu\n\n# NYUSHC Cluster\n$ ssh NetID@hpclogin.shanghai.nyu.edu\n</code></pre> <p>Hint</p> <p>There are two login nodes, <code>hpc.shanghai.nyu.edu</code> and <code>hpclogin.shanghai.nyu.edu</code>. There are two for redundancy reasons. Please do not perform big file transfers or an <code>sshfs</code> mount via the login nodes. </p> <p>Please also read Advanced SSH for more custom scenarios how to connect to NYU Shanghai HPC. If you are using a Windows PC to access NYU Shanghai HPC, please read Connecting via SSH on Windows</p> </li> <li> <p>Allocate resources on a computation node using Slurm. Do not compute on the login node!</p> <pre><code># Start interactive shell on computation node\n$ srun --pty bash -i\n</code></pre> </li> <li> <p>Bonus: Configure your SSH client  on Linux and Mac or Windows.</p> </li> <li>Bonus: Connect from external networks .</li> </ol> <p>tl;dr</p> <ul> <li>Web Access: https://ood.shanghai.nyu.edu</li> <li> <p>SSH-Based Access:</p> <pre><code># Interactive login (choose one)\nssh NetID@hpc.shanghai.nyu.edu\nssh NetID@hpclogin.shanghai.nyu.edu\nsrun --pty bash -i\n</code></pre> </li> </ul>"},{"location":"connecting/connecting/#what-is-my-username","title":"What is my username?","text":"<p>Your username for accessing the cluster are your NetID:</p>"},{"location":"connecting/connecting/#how-can-i-connect-from-the-outside","title":"How can I connect from the outside?","text":"<p>Please read Connecting from External Networks</p>"},{"location":"connecting/connecting/#i-have-problems-connecting","title":"I have problems connecting","text":"<p>Please read Debugging Connection Problems</p>"},{"location":"connecting/connection-problems/","title":"Debugging Connection Problems","text":"<p>When you encounter problems with the login to the cluster although we indicated that you should have access, depending on the issue, here is a list of how to solve the problem:</p>"},{"location":"connecting/connection-problems/#im-getting-a-connection-refused","title":"I'm getting a \"connection refused\"","text":"<p>The full error message looks as follows:</p> <pre><code>ssh: connect to host hpclogin.shanghai.nyu.edu port 22: Connection refused\n</code></pre> <p>This means that your computer could not open a network connection to the server.</p> <ul> <li>NYUSH Cluster can be connected to from:<ul> <li>Campus network</li> <li>NYUSH VPN  but only with NYUSH VPN. </li> </ul> </li> <li>If you think that there is no problem with any of this then please include the output of the following command in your ticket (use the server that you want to read instead of <code>&lt;DEST&gt;</code>):<ul> <li>Linux/Mac     <pre><code>ifconfig\ntraceroute &lt;DEST&gt;\n</code></pre></li> <li>Windows     <pre><code>ipconfig\ntracepath &lt;DEST&gt;\n</code></pre></li> </ul> </li> </ul>"},{"location":"connecting/connection-problems/#i-can-connect-but-it-seems-that-my-account-has-no-access-yet","title":"I can connect, but it seems that my account has no access yet","text":"<pre><code>You're logging into NYUSH HPC cluster! (hpclogin.shanghai.nyu.edu)\n\n ***Your account has not been granted cluster access yet.***\n\n If you think that you should have access, please contact\n shanghai.it.help@nyu.edu for assistance.\n\n For applying for cluster access, contact shanghai.it.help@nyu.edu.\n\nuser@hpclogin.shanghai.nyu.edu's password:\n</code></pre> <p>Hint</p> <p>This is the most common error, and the main cause for this is a wrong username. Please take a couple of minutes to read the What is my username?!</p> <p>If you encounter this message although we told you that you have access and you checked the username as mentioned above, please write to shanghai.it.help@nyu.edu, always indicating the message you get and a detailed description of what you did.</p>"},{"location":"connecting/connection-problems/#im-getting-a-passphrase-prompt","title":"I'm getting a passPHRASE prompt","text":"<pre><code>You're logging into NYUSH HPC cluster! (hpclogin.shanghai.nyu.edu)\n\n *** It looks like your account has access. ***\n\n Login is based on **SSH keys only**, if you are getting a password prompt\n then please contact shanghai.it.help@nyu.edu for assistance.\n\nEnter passphrase for key '/gpfsnyu/home/USER/.ssh/id_rsa':\n</code></pre> <p>Here you have to enter the passphrase that was used for encrypting your private key. Read SSH Basics for further information of what is going on here.</p>"},{"location":"connecting/connection-problems/#i-can-connect-but-i-get-a-password-prompt","title":"I can connect, but I get a passWORD prompt","text":"<pre><code>You're logging into NYUSH HPC cluster! (hpclogin.shanghai.nyu.edu)\n\n *** It looks like your account has access. ***\n\n Login is based on **SSH keys only**, if you are getting a password prompt\n then please contact hpc-helpdesk@bih-charite.de for assistance.\n\nuser@hpclogin.shanghai.nyu.edu's password:\n</code></pre> <p>This is diffeerent from passPHRASE prompt</p> <p>Please see I'm getting a passPHRASE prompt for more information.</p> <p>When you encounter this message during a login attempt, there is an issue with your SSH key. In this case, please connect with increased verbosity to the cluster (<code>ssh -vvv ...</code>) and mail the output and a detailed description to shanghai.it.help@nyu.edu.</p>"},{"location":"connecting/from-external/","title":"Connecting from External Networks","text":"<p>This page describes how to connect to the NYUSH HPC from external networks (e.g., another university or from your home).</p> <ul> <li>NYU Shanghai  users can use<ul> <li>the VPN with \"vpn.shanghai.nyu.edu\".</li> </ul> </li> </ul> <p>Getting Help with VPN and Gateway Nodes</p> <p>Please note that the VPNs and gateway nodes are maintained by the central IT departments of NYU Shanghai. Authorative information and documentation is provided by the central IT departments as well.</p> <p>SSH Key Gotchas</p> <p>You should use separate SSH key pairs for your workstation, laptop, home computer etc. When using gateway nodes, please make sure to use SSH key agents and agent forwarding (<code>ssh</code> flag \"<code>-A</code>\").</p>"},{"location":"connecting/from-external/#nyu-shanghai-users","title":"NYU Shanghai Users","text":"<p>Access to NYUSH HPC from external networks requires a VPN connection with special access permissions.</p>"},{"location":"connecting/from-external/#general-vpn-access","title":"General VPN Access","text":"<p>You need to apply for general VPN access if you haven't done so already. The form can be found in the VPN in IT and contains further instructions. IT Helpdesk can help you with any questions.</p> <p>Once you have been granted VPN access, start the client and connect to VPN. You will then be able to connect from your client in the VPN just as you do from your workstation.</p> <pre><code>$ ssh NetID@hpclogin.shanghai.nyu.edu\n</code></pre>"},{"location":"connecting/ssh-basics/","title":"SSH Basics","text":""},{"location":"connecting/ssh-basics/#what-is-ssh","title":"What is SSH?","text":"<p>SSH stands for S ecure Sh ell. It is a software that allows to establish a user-connection to a remote UNIX/Linux machine over the network and remote-control it from your local work-station.</p> <p>Let's say you have an HPC cluster with hundreds of machines somewhere in a remote data-center and you want to connect to those machines to issue commands and run jobs. Then you would use SSH.</p>"},{"location":"connecting/ssh-basics/#getting-started","title":"Getting Started","text":""},{"location":"connecting/ssh-basics/#installation","title":"Installation","text":"<p>Simply install your distributions <code>openssh-client</code> package. You should be able to find plenty of good tutorials online. On Windows you can consider using MobaXterm (recommended) or Putty.</p>"},{"location":"connecting/ssh-basics/#connecting","title":"Connecting","text":"<p>Let's call your local machine the client and the remote machine you want to connect to the server.</p> <p>You will usually have some kind of connection information, like a hostname, IP address and perhaps a port number. Additionally, you should also have received your user-account information stating your user-name, your password, etc.</p> <p>Follow the instructions below to establish a remote terminal-session.</p> <p>If your are on Linux</p> <p>Open a terminal and issue the following command while replacing all the <code>&lt;...&gt;</code> fields with the actual data:</p> <pre><code># default port\nssh &lt;username&gt;@&lt;hostname-or-ip-address&gt;\n\n# non-default port\nssh &lt;username&gt;@&lt;hostname-or-ip-address&gt; -p &lt;port-number&gt;\n</code></pre> <p>If you are on windows</p> <p>Start <code>putty.exe</code>, go into the <code>Session</code> category and fill out the form, then click the <code>Connect</code> button. Putty also allows to save the connection information in different profiles so you don't have to memorize and retype all fields every time you want to connect.</p>"},{"location":"connecting/ssh-basics/#ssh-keys","title":"SSH-Keys","text":"<p>When you connect to a remote machine via SSH, you will be prompted for your password. This will happen every single time you connect and can feel a bit repetitive at times, especially if you feel that your password is hard to memorize. For those who don't want to type in their password every single time they connect, SSH keys are an alternative way of authentication.</p> <p>Instead if being prompted for a password, SSH will simply use the key to authenticate. As this key file should be device specific, this also increases security of the login process.</p> <p>You can generate a new key by issuing:</p> <pre><code>client:~$ ssh-keygen -t ed25519\n\n# 1. Choose file in which to save the key *(leave blank for default)*\n# 2. Choose a passphrase of at least five characters\n</code></pre>"},{"location":"connecting/ssh-basics/#how-do-ssh-keys-work","title":"How do SSH-Keys work?","text":"<p>An SSH key consists of two files, one private and one public key. The public key is installed on remote machines and can only be validated with the matching private key, which is stored on client computers. During the login process this is achieved via public-key cryptography.</p> <p>Traditionally the algorithm used for this was RSA. Recently elliptic curve cryptography has been developed as a more secure and more performant alternative. We recommend the <code>ed25519</code> type of SSH key.</p>"},{"location":"connecting/ssh-basics/#passphrase","title":"Passphrase","text":"<p>The security problem with SSH keys is that anyone with access to the private key has full access to all machines that have the public key installed. Loosing the key or getting it compromised in another way imposes a serious security threat. Therefore, it is best to secure the private key with a passphrase. This passphrase is needed to unlock and use the private key.</p> <p>Once you have your key-pair generated, you can easily change the passphrase of that key by issuing:</p> <pre><code>client:~$ ssh-keygen -p\n</code></pre>"},{"location":"connecting/ssh-basics/#ssh-agent","title":"SSH-Agent","text":"<p>In order to avoid having to type the passphrase of the key every time we want to use it, the key can be loaded into an SSH-Agent.</p> <p>For instance, if you have connected to a login-node via Putty and want to unlock your private key in order to be able to access cluster nodes, you cant configure the SSH-Agent.</p> <pre><code>client:~$ source &lt;(ssh-agent)\n</code></pre> <p>(The above command will load the required environment variables of the SSH-Agent into your shell environment, effectively making the agent available for your consumption.)</p> <p>Next, you can load your private key:</p> <pre><code>client:~$ ssh-add\n</code></pre> <p>(You will be prompted for the passphrase of the key)</p> <p>You can verify that the agent is running and your key is loaded by issuing:</p> <pre><code>client:~$ ssh-add -l\n# 'l' as in list-all-loaded-keys\n</code></pre> <p>(The command should print at least one key, showing the key-size, the hash of the key-fingerprint and the location of the file in the file-system.)</p> <p>Since all home-directories are shared across the entire cluster and you created your key-pair inside your home-directory, you public-key (which is also in your home-directory) is automatically installed on all other cluster nodes, immediately. Try connecting to any cluster node. It should not prompt your for a password.</p> <p>There is nothing you have to do to \"unload\" or \"lock\" the key-file. Simply disconnect.</p>"},{"location":"connecting/advanced-ssh/linux/","title":"Connecting via SSH on Unix","text":""},{"location":"connecting/advanced-ssh/linux/#activating-your-key-in-the-ssh-key-agent","title":"Activating your Key in the SSH Key Agent","text":"<p>Note</p> <p>The big Linux distributions automatically manage ssh-agent for you and unlock your keys at login time. If this doesn't work for you, read on.</p> <p><code>ssh-agent</code> caches your SSH keys so that you do not need to type your passphrase every time it is used. Activate it by making sure <code>ssh-agent</code> runs in the background and add your key:</p> <pre><code>$ eval \"$(ssh-agent -s)\"\n$ ssh-add\n</code></pre> <p>or if you chose a custom key name, specify the file like so:</p> <pre><code>$ ssh-add ~/.ssh/mdc_id_rsa\n</code></pre>"},{"location":"connecting/advanced-ssh/linux/#macos","title":"MacOS","text":"<p>If you run into problems that your key is not accepted when connecting from MacOS, please use:</p> <pre><code>$ ssh-add --apple-use-keychain\n</code></pre>"},{"location":"connecting/advanced-ssh/linux/#configure-ssh-client","title":"Configure SSH Client","text":"<p>You can define a personal SSH configuration file to make connecting to the cluster more comfortable by reducing the typing necessary by a lot. Add the following lines to the file <code>~/.ssh/config</code> file. Replace <code>USER_NAME</code> with your cluster user name. You can also adapt the Host naming as you like.</p> <pre><code>Host login2\n    HostName hpc.shanghai.nyu.edu\n    User USER_NAME\n\nHost hpclogin\n    HostName hpclogin.shanghai.nyu.edu\n    User USER_NAME\n</code></pre> <p>Now, you can do type the following (and you don't have to remember the host name of the login node any more).</p> <pre><code>$ ssh hpclogin\n</code></pre> <p>This configuration works if you are inside NYUSH VPN.</p>"},{"location":"connecting/advanced-ssh/linux/#connecting-with-another-computerlaptop","title":"Connecting with another computer/laptop","text":"<p>If you need to connect to the cluster from another computer than the one that contains the SSH keys that you submitted for the cluster login, you have two possibilities.</p> <ol> <li>Generate another SSH key pair and submit the public part as described    beforehand.</li> <li>Copy your private part of the SSH key (<code>~/.ssh/id_rsa</code>) to the second    computer into the same location.</li> </ol> <p>Danger</p> <p>Do not leave the key on any USB stick. Delete it after file transfer. This is a sensible part of data. Make sure that the files are only readable for you.</p> <pre><code>$ cd ~/.ssh\n$ chmod g-rwx id_rsa*\n$ ssh-add  id_rsa\n</code></pre>"},{"location":"connecting/advanced-ssh/linux/#file-system-mount-via-sshfs","title":"File System mount via sshfs","text":"<pre><code>$ sshfs &lt;USERNAME&gt;@hpclogin.shanghai.nyu.edu:/ &lt;MOUNTPOINT&gt;\n</code></pre> <ul> <li><code>hpclogin.shanghai.nyu.edu:</code> follows the structure <code>&lt;host&gt;:&lt;directory&gt;</code> starting in the user home.</li> <li><code>&lt;MOUNTPOINT&gt;</code> must be an empty but existing and readable directory on your local computer</li> </ul>"},{"location":"connecting/advanced-ssh/linux/#macos_1","title":"MacOS","text":"<p>Make sure you have both OSXFUSE and SSHFS installed. You can get both from here: https://osxfuse.github.io/ or the most recent version via Homebrew: <pre><code>$ brew cask install osxfuse; brew install sshfs; brew link --overwrite sshfs\n</code></pre> The last command is optional and unlinks any pre-existing links to older versions of sshfs. Now you can run <pre><code>$ sshfs -o follow_symlinks &lt;USERNAME&gt;@hpclogin.shanghai.nyu.edu:&lt;directory_relative_to_Cluster_root&gt; &lt;MOUNTPOINT&gt; -o volname=&lt;FOLDER&gt; -o allow_other,noapplexattr,noappledouble\n</code></pre></p>"},{"location":"connecting/advanced-ssh/linux/#x11","title":"X11","text":"<p>Do you really need to run a graphical application on the cluster?</p> <p>Please note that running more complex Java applications, such as IGV may be not very efficient because of the connection speed. In most cases you can run them on your local workstation by mounting them via SSHFS.</p> <p>Connect to one of the login nodes using X11 forwarding:</p> <pre><code>$ ssh -X -C -t &lt;USERNAME&gt;@hpc-login-1.bihealth.org\n</code></pre> <p>Once you get a login prompt, you can use the <code>srun</code> command with the <code>--x11</code> parameter to open a X11 session to a cluster node:</p> <pre><code>$ srun --pty --x11 bash\n</code></pre> <p>And finally you can start your X11 application, e.g.:</p> <pre><code>$ xterm\n</code></pre> <p>After a while Visual Terminal should start:</p> <p></p>"},{"location":"connecting/advanced-ssh/overview/","title":"Advanced SSH usage","text":"<p>Here we describe custom scenarios for using SSH to connect to NYUSH HPC. To keep it consise, this section is divided into separate documents for</p> <ul> <li>Linux and</li> <li>Windows users.</li> </ul>"},{"location":"connecting/generate-key/linux/","title":"Generating an SSH Key in Linux","text":"<ul> <li>You might already have one, check whether a file <code>~/.ssh/id_xxx.pub</code> is present.</li> <li>Otherwise, create key using the following command (marking your key with your email address will make it easier to reidentify your key later on):   <pre><code>$ ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre></li> <li>Use the default location for your key</li> <li>Enter a passphrase twice to encrypt your key</li> </ul> <p>What is a key passphrase?</p> <p>You should set a passphrase when generating your key pair. It is used for encrypting your private key in case it is stolen or lost. When using the key for login, you will have to enter the passphrase. Many desktop environments offer ways to automatically unlock your key on login.</p> <p>Read SSH Basics for more information.</p> <p>The whole session should look something like this:</p> <pre><code>$ ssh-keygen -t ed25519 -C \"your_email@example.com\"\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/gpfsnyu/home/USER/.ssh/id_ed25519): \nCreated directory '/gpfsnyu/home/USER/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again: \nYour identification has been saved in /gpfsnyu/home/USER/.ssh/id_ed25519.\nYour public key has been saved in /gpfsnyu/home/USER/.ssh/id_ed25519.pub.\nThe key fingerprint is:\nSHA256:Z6InW1OYt3loU7z14Kmgy87iIuYNr1gJAN1tG71D7Jc your_email@example.com\nThe key's randomart image is:\n+--[ED25519 256]--+\n|.. . . o         |\n|. . . + +        |\n|.    . = . .     |\n|.     . +oE.     |\n|.       So= o o  |\n| . .   . * = + + |\n|  +   o + B o o .|\n| oo+. .B + + .   |\n|.ooooooo*.  .    |\n+----[SHA256]-----+\n</code></pre> <p>The file content of <code>~/.ssh/id_ed25519.pub</code> should look something like this):</p> <pre><code>ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFzuiaSVD2j5y6RlFxOfREB/Vbd+47ABlxF7du5160ZH your_email@example.com\n</code></pre>"},{"location":"connecting/generate-key/linux/#submit-your-key","title":"Submit Your Key","text":"<p>As a next step you need to submit the SSH key use these links as:</p> <ul> <li> Charite user</li> <li> MDC user</li> </ul>"},{"location":"connecting/generate-key/windows/","title":"Generating an SSH Key in Windows","text":"<p>Prerequisite: Installing an SSH Client</p> <p>Please install an SSH client for Windows first.</p>"},{"location":"connecting/generate-key/windows/#generate-the-key","title":"Generate the Key","text":"<p>Click on <code>Tools</code> and <code>MobaKeyGen (SSH key generator)</code></p> <p></p> <p>In the section Parameters make sure to set the following properties:</p> <ul> <li>Type of key to generate: <code>RSA</code> (this is the <code>SSH-2</code> protocol)</li> <li>Number of bits in a generated key: <code>4096</code></li> </ul> <p>If all is set, hit the Generate button.</p> <p></p> <p>During generation, move the mouse cursor around in the blank area.</p> <p></p> <p>When finished, make sure to protect your generated key with a passphrase. Save the private and public key. The default name under Linux for the public key is <code>id_rsa.pub</code> and <code>id_rsa</code> for the private key, but you can name them however you want (the <code>.pub</code> is NOT automatically added). Note that in the whole cluster wiki we will use this file naming convention. Also note that the private key will be stored in Putty format (<code>.ppk</code>, this extension is added automatically).</p> <p>What is your key's passphrase?</p> <p>You should set a passphrase when generating your private key. This passphrase is used for encrypting you private key to protect it against the private key file theft/being lost. When using the key for login, you will have to enter it (or the first time you load it into the SSH key agent). Note that when being asked for the passphrase this does not occur on the cluster (and is thus unrelated to it) but on your local computer.</p> <p>Also see SSH Basics for more information.</p> <p>The gibberish in the textbox is your public key in the format how it has to be submitted to the MDC and Charite (links for this step below). Thus, copy this text and paste it to the SSH-key-submission-web-service of your institution.</p> <p></p> <p>Store the private key additionally in the OpenSSH format. To do so, click <code>Conversions</code> and select <code>Export OpenSSH key</code>. To be consistent, give the file the same name as your <code>.ppk</code> private key file above (just without the <code>.ppk</code>).</p> <p></p>"},{"location":"connecting/generate-key/windows/#summary","title":"Summary","text":"<p>To summarize, you should end up with three files:</p> <ol> <li><code>id_rsa.pub</code> The public key file, it is not required if you copy and submit the SSH public key as described above and in the links below.</li> <li><code>id_rsa.ppk</code> This file is only needed if you plan to use Putty.</li> <li><code>id_rsa</code> This is your private key and the one and only most important file to access the cluster. It will be added to the sessions in MobaXterm and WinSSHFS (if required).</li> </ol>"},{"location":"connecting/generate-key/windows/#submit-your-key","title":"Submit Your Key","text":"<p>As a next step you need to submit the SSH key use these links as:</p> <ul> <li> Charite user</li> <li> MDC user</li> </ul>"},{"location":"help/faq/","title":"Frequently Asked Questions","text":""},{"location":"help/faq/#where-can-i-get-help","title":"Where can I get help?","text":"<ul> <li>Talk to your colleagues!</li> <li>Have a look at our forums at HPC-talk to see if someone already solved the same problem.   If not, create a new topic. Administrators, CUBI, and other users can see and answer your question.</li> <li>For problems while connecting and logging in, please contact helpdesk@mdc-berlin.de or helpdesk@charite.de.</li> <li>For problems with BIH HPC please contact [hpc-helpdesk@bih-charite.de].</li> </ul>"},{"location":"help/faq/#i-cannot-connect-to-the-cluster-whats-wrong","title":"I cannot connect to the cluster. What's wrong?","text":"<p>Please see the section Connection Problems.</p>"},{"location":"help/faq/#connecting-to-the-cluster-takes-a-long-time","title":"Connecting to the cluster takes a long time.","text":"<p>The most probable cause for this is a conda installation which defaults to loading the (Base) environment on login. To disable this behaviour you can run:</p> <pre><code>$ conda config --set auto_activate_base false\n</code></pre> <p>You can also run the bash shell in verbose mode to find out exactly which command is slowing down login: <pre><code>$ ssh user@hpc-login-1.cubi.bihealth.org bash -iv\n</code></pre></p>"},{"location":"help/faq/#what-is-the-difference-between-max-and-bih-cluster-what-is-their-relation","title":"What is the difference between MAX and BIH cluster? What is their relation?","text":"<p>Administrativa</p> <ul> <li>The BIH HPC 4 Research cluster of the Berlin Institute of Health (BIH) is located in Buch and operated by BIH HPC IT.   The cluster is open for users of both BIH/Charite and MDC.</li> <li>The MAX cluster is the cluster of the Max Delbrueck Center (MDC) in Buch.   This cluster is used by the researchers at MDC and integrates with a lot of infrastructure of the MDC.</li> </ul> <p>Request for both systems are handled separately, depending on the user's affiliation with research/service groups.</p> <p>Hardware and Systems</p> <ul> <li>Both clusters consist of similar hardware for the compute nodes and both feature a DDN system at different number of nodes and different storage volume.</li> <li>Both clusters run CentOS/rocky but at potentially different version.</li> <li>BIH HPC uses the Slurm workload manager whereas MAX uses Univa Grid Engine.</li> <li>The BIH cluster has a significantly faster internal network (40GB/s optical).</li> </ul> <p>Bioinformatics Software</p> <ul> <li>On the BIH cluster, users can install their own (bioinformatics) software in their user directory.</li> <li>On the MAX cluster, users can also install their own software or use software provided by Altuna Akalin's group at MDC.</li> </ul>"},{"location":"help/faq/#my-ssh-sessions-break-with-packet_write_wait-connection-to-xxx-broken-pipe-how-can-i-fix-this","title":"My SSH sessions break with \"<code>packet_write_wait: Connection to XXX : Broken pipe</code>\". How can I fix this?","text":"<p>Try to put the following line at the top of your <code>~/.ssh/config</code>.</p> <pre><code>ServerAliveInterval 30\n</code></pre> <p>This will make <code>ssh</code> send an empty network package to the server. This will prevent network hardware from thinking your connection is unused/broken and terminating it.</p> <p>If the problem persists, please report it to hpc-helpdesk@bih-charite.de.</p>"},{"location":"help/faq/#my-job-terminated-before-being-done-what-happened","title":"My job terminated before being done. What happened?","text":"<p>First of all, look into your job logs. In the case that the job was terminated by Slurm (e.g., because it ran too long), you will find a message like this at the bottom. Please look at the end of the last line in your log file.</p> <pre><code>slurmstepd: error: *** JOB &lt;your job id&gt; ON med0xxx CANCELLED AT 2020-09-02T21:01:12 DUE TO TIME LIMIT ***\n</code></pre> <p>This indicates that you need to need to adjust the <code>--time</code> limit to your <code>sbatch</code> command.</p> <pre><code>slurmstepd: error: Detected 2 oom-kill event(s) in step &lt;your job id&gt;.batch cgroup.\nSome of your processes may have been killed by the cgroup out-of-memory handler\n</code></pre> <p>This indicates that your job tries to use more memory than has been allocated to it. Also see Slurm Scheduler: Memory Allocation</p> <p>Otherwise, you can use <code>sacct -j JOBID</code> to read the information that the job accounting system has recorded for your job. A job that was canceled (indicated by <code>CANCELED</code>) by the Slurm job scheduler looks like this (ignore the <code>COMPLETED</code> step that is just some post-job step added by Slurm automatically).</p> <pre><code># sacct -j _JOBID_\n       JobID    JobName  Partition    Account  AllocCPUS      State ExitCode\n------------ ---------- ---------- ---------- ---------- ---------- --------\n_JOBID_      snakejob.+     medium hpc-ag-xx+          4    TIMEOUT      0:0\n_JOBID_.bat+      batch            hpc-ag-xx+          4  CANCELLED     0:15\n_JOBID_.ext+     extern            hpc-ag-xx+          4  COMPLETED      0:0\n</code></pre> <p>Use the <code>--long</code> flag to see all fields (and probably pipe it into <code>less</code> as: <code>sacct -j JOBID --long | less -S</code>). Things to look out for:</p> <ul> <li>What is the exit code?</li> <li>Is the highest recorded memory usage too high/higher than expected (field <code>MaxRSS</code>)?</li> <li>Is the running time too long/longer than expected (field <code>Elapsed</code>)?</li> </ul> <p>Note that <code>--long</code> does not show all fields. For example, the following tells us that the given job was above its elapsed time which caused it to be killed.</p> <pre><code># sacct -j _JOBID_ --format Timelimit,Elapsed\n Timelimit    Elapsed\n---------- ----------\n  01:00:00   01:00:12\n             01:00:13\n             01:00:12\n</code></pre> <p>Use <code>man sacct</code>, <code>sacct --helpformat</code>, or see the Slurm Documentation for options for the <code>--format</code> field of <code>sacct</code>.</p>"},{"location":"help/faq/#im-getting-a-bus-error-core-dumped","title":"I'm getting a \"Bus error (core dumped)\"","text":"<p>This is most probably caused by your job being allocated insufficient memory. Please see the memory part of the answer to My job terminated before being done. What happened?</p>"},{"location":"help/faq/#how-can-i-create-a-new-project","title":"How can I create a new project?","text":"<p>You can create a project if you are either a group leader of an AG or a delegate of an AG. If this is the case, please follow these instructions.</p>"},{"location":"help/faq/#i-cannot-create-pngs-in-r","title":"I cannot create PNGs in R","text":"<p>For using the <code>png</code> method, you need to have an X11 session running. This might be the case if you logged into a cluster node using <code>srun --x11</code> if configured correctly but is not the case if you submitted a bash job. The solution is to use <code>xvfb-run</code> (xvfb = X11 virtual frame-buffer).</p> <p>Here is the content of an example script:</p> <pre><code>$ cat img.R\n#!/usr/bin/env Rscript\n\npng('cars.png')\ncars &lt;- c(1, 3, 6, 4, 9)\nplot(cars)\ndev.off()\n</code></pre> <p>Here, it fails without X11:</p> <pre><code>$ ./img.R\nError in .External2(C_X11, paste(\"png::\", filename, sep = \"\"), g$width,  :\n  unable to start device PNG\nCalls: png\nIn addition: Warning message:\nIn png(\"cars.png\") : unable to open connection to X11 display ''\nExecution halted\n</code></pre> <p>Here, it works with  <code>xvfb-run</code>:</p> <pre><code>$ xvfb-run ./img.R\nnull device\n          1\n$ ls\ncars.png  foo.png  img.R  Rplots.pdf\n</code></pre>"},{"location":"help/faq/#my-jobs-dont-get-scheduled","title":"My jobs don't get scheduled","text":"<p>You can use <code>scontrol show job JOBID</code> to get the details displayed about your jobs. In the example below, we can see that the job is in the <code>PENDING</code> state. The <code>Reason</code> field tells us that the job did not scheduled because the specified dependency was neverfulfilled. You can find a list of all job reason codes in the Slurm <code>squeue</code> documentation.</p> <pre><code>JobId=863089 JobName=pipeline_job.sh\n   UserId=holtgrem_c(100131) GroupId=hpc-ag-cubi(5272) MCS_label=N/A\n   Priority=1 Nice=0 Account=(null) QOS=normal\n   JobState=PENDING Reason=DependencyNeverSatisfied Dependency=afterok:863087(failed)\n   Requeue=1 Restarts=0 BatchFlag=1 Reboot=0 ExitCode=0:0\n   RunTime=00:00:00 TimeLimit=08:00:00 TimeMin=N/A\n   SubmitTime=2020-05-03T18:57:34 EligibleTime=Unknown\n   AccrueTime=Unknown\n   StartTime=Unknown EndTime=Unknown Deadline=N/A\n   SuspendTime=None SecsPreSuspend=0 LastSchedEval=2020-05-03T18:57:34\n   Partition=debug AllocNode:Sid=hpc-login-1:28797\n   ReqNodeList=(null) ExcNodeList=(null)\n   NodeList=(null)\n   NumNodes=1 NumCPUs=1 NumTasks=1 CPUs/Task=1 ReqB:S:C:T=0:0:*:*\n   TRES=cpu=1,node=1,billing=1\n   Socks/Node=* NtasksPerN:B:S:C=0:0:*:* CoreSpec=*\n   MinCPUsNode=1 MinMemoryNode=0 MinTmpDiskNode=0\n   Features=(null) DelayBoot=00:00:00\n   OverSubscribe=OK Contiguous=0 Licenses=(null) Network=(null)\n   Command=/data/cephfs-1/work/projects/medgen_genomes/2019-06-05_genomes_reboot/GRCh37/wgs_cnv_export/pipeline_job.sh\n   WorkDir=/data/cephfs-1/work/projects/medgen_genomes/2019-06-05_genomes_reboot/GRCh37/wgs_cnv_export\n   StdErr=/data/cephfs-1/work/projects/medgen_genomes/2019-06-05_genomes_reboot/GRCh37/wgs_cnv_export/slurm-863089.out\n   StdIn=/dev/null\n   StdOut=/data/cephfs-1/work/projects/medgen_genomes/2019-06-05_genomes_reboot/GRCh37/wgs_cnv_export/slurm-863089.out\n   Power=\n   MailUser=(null) MailType=NONE\n</code></pre> <p>If you see a <code>Reason=ReqNodeNotAvail,_Reserved_for_maintenance</code> then also see Reservations / Maintenances.</p> <p>For GPU jobs also see \"My GPU jobs don't get scheduled\".</p>"},{"location":"help/faq/#my-gpu-jobs-dont-get-scheduled","title":"My GPU jobs don't get scheduled","text":"<p>There are only four GPU machines in the cluster (with four GPUs each, hpc-gpu-1 to hpc-gpu-4). Please inspect first the number of running jobs with GPU resource requests:</p> <pre><code>hpc-login-1:~$ squeue -o \"%.10i %20j %.2t %.5D %.4C %.10m %.16R %.13b\" \"$@\" | grep hpc-gpu- | sort -k7,7\n   1902163 ONT-basecalling       R     1    2         8G          hpc-gpu-1   gpu:tesla:2\n   1902167 ONT-basecalling       R     1    2         8G          hpc-gpu-1   gpu:tesla:2\n   1902164 ONT-basecalling       R     1    2         8G          hpc-gpu-2   gpu:tesla:2\n   1902166 ONT-basecalling       R     1    2         8G          hpc-gpu-2   gpu:tesla:2\n   1902162 ONT-basecalling       R     1    2         8G          hpc-gpu-3   gpu:tesla:2\n   1902165 ONT-basecalling       R     1    2         8G          hpc-gpu-3   gpu:tesla:2\n   1785264 bash                  R     1    1         1G          hpc-gpu-4   gpu:tesla:2\n</code></pre> <p>This indicates that there are two free GPUs on hpc-gpu-4.</p> <p>Second, inspect the node states:</p> <pre><code>hpc-login-1:~$ sinfo -n hpc-gpu-[1-4]\nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST\ndebug*       up    8:00:00      0    n/a\nmedium       up 7-00:00:00      0    n/a\nlong         up 28-00:00:0      0    n/a\ncritical     up 7-00:00:00      0    n/a\nhighmem      up 14-00:00:0      0    n/a\ngpu          up 14-00:00:0      1   drng hpc-gpu-4\ngpu          up 14-00:00:0      3    mix med[0301-0303]\nmpi          up 14-00:00:0      0    n/a\n</code></pre> <p>This tells you that hpc-gpu-1 to hpc-gpu-3 have jobs running (\"mix\" indicates that there are free resources, but these are only CPU cores not GPUs). hpc-gpu-4 is shown to be in \"draining state\". Let's look what's going on there.</p> <pre><code>hpc-login-1:~$ scontrol show node hpc-gpu-4\nNodeName=hpc-gpu-4 Arch=x86_64 CoresPerSocket=16\n   CPUAlloc=2 CPUTot=64 CPULoad=1.44\n   AvailableFeatures=skylake\n   ActiveFeatures=skylake\n   Gres=gpu:tesla:4(S:0-1)\n   NodeAddr=hpc-gpu-4 NodeHostName=hpc-gpu-4 Version=20.02.0\n   OS=Linux 3.10.0-1127.13.1.el7.x86_64 #1 SMP Tue Jun 23 15:46:38 UTC 2020\n   RealMemory=385215 AllocMem=1024 FreeMem=347881 Sockets=2 Boards=1\n   State=MIXED+DRAIN ThreadsPerCore=2 TmpDisk=0 Weight=1 Owner=N/A MCS_label=N/A\n   Partitions=gpu\n   BootTime=2020-06-30T20:33:36 SlurmdStartTime=2020-07-01T09:31:51\n   CfgTRES=cpu=64,mem=385215M,billing=64\n   AllocTRES=cpu=2,mem=1G\n   CapWatts=n/a\n   CurrentWatts=0 AveWatts=0\n   ExtSensorsJoules=n/s ExtSensorsWatts=0 ExtSensorsTemp=n/s\n   Reason=deep power-off required for PSU [root@2020-07-17T13:21:02]\n</code></pre> <p>The \"State\" attribute indicates the node has jobs running but is currenlty being \"drained\" (accepts no new jobs). The \"Reason\" gives that it has been scheduled for power-off for maintenance of the power supply unit.</p>"},{"location":"help/faq/#when-will-my-job-be-scheduled","title":"When will my job be scheduled?","text":"<p>You can use the <code>scontrol show job JOBID</code> command to inspect the scheduling information for your job. For example, the following job is scheduled to start at <code>2022-09-19T07:53:29</code> (<code>StartTime</code>) and will be terminated if it does not stop before <code>2022-09-19T15:53:29</code> (<code>EndTime</code>) For further information, it has been submitted at <code>2022-09-15T12:24:57</code> (<code>SubmitTime</code>) and has been last considered by the scheduler at <code>2022-09-19T07:53:15</code> (<code>LastSchedEval</code>).</p> <pre><code># scontrol show job 4225062\nJobId=4225062 JobName=C2371_2\n   UserId=user_c(133196) GroupId=hpc-ag-group(1030014) MCS_label=N/A\n   Priority=805 Nice=0 Account=hpc-ag-group QOS=normal\n   JobState=PENDING Reason=QOSMaxCpuPerUserLimit Dependency=(null)\n   Requeue=1 Restarts=0 BatchFlag=1 Reboot=0 ExitCode=0:0\n   RunTime=00:00:00 TimeLimit=08:00:00 TimeMin=N/A\n   SubmitTime=2022-09-15T12:24:57 EligibleTime=2022-09-15T12:24:57\n   AccrueTime=2022-09-15T12:24:57\n   StartTime=2022-09-19T07:53:29 EndTime=2022-09-19T15:53:29 Deadline=N/A\n   SuspendTime=None SecsPreSuspend=0 LastSchedEval=2022-09-19T07:53:15 Scheduler=Main\n   Partition=medium AllocNode:Sid=hpc-login-1:557796\n   ReqNodeList=(null) ExcNodeList=(null)\n   NodeList=(null)\n   NumNodes=1-1 NumCPUs=25 NumTasks=25 CPUs/Task=1 ReqB:S:C:T=0:0:*:*\n   TRES=cpu=25,mem=150G,node=1,billing=25\n   Socks/Node=* NtasksPerN:B:S:C=0:0:*:* CoreSpec=*\n   MinCPUsNode=1 MinMemoryNode=150G MinTmpDiskNode=0\n   Features=(null) DelayBoot=00:00:00\n   OverSubscribe=YES Contiguous=0 Licenses=(null) Network=(null)\n   Command=/data/cephfs-1/home/users/user_c/work/SCZ_replic/JR_sims/GS_wrapy/wrap_y0_VP_2371_GS_chunk2_C02.sh\n   WorkDir=/data/cephfs-1/home/users/user_c/work/SCZ_replic/JR_sims\n   StdErr=/data/cephfs-1/home/users/user_c/work/SCZ_replic/JR_sims/E2371_2.txt\n   StdIn=/dev/null\n   StdOut=/data/cephfs-1/home/users/user_c/work/SCZ_replic/JR_sims/slurm-4225062.out\n   Power=\n</code></pre>"},{"location":"help/faq/#my-jobs-dont-run-in-the-partition-i-expect","title":"My jobs don't run in the partition I expect","text":"<p>You can see the partition that your job runs in with <code>squeue -j JOBID</code>:</p> <pre><code>hpc-login-1:~$ squeue -j 877092\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n            877092    medium snakejob holtgrem  R       0:05      1 med0626\n</code></pre> <p>See Job Scheduler for information about the partition's properties and how jbos are routed to partitions. You can force jobs to run in a particular partition by specifying the <code>--partition</code> parameter, e.g., by adding <code>--partition=medium</code> or <code>-p medium</code> to your <code>srun</code> and <code>sbatch</code> calls.</p>"},{"location":"help/faq/#my-jobs-get-killed-after-four-hours","title":"My jobs get killed after four hours","text":"<p>This is probably answered by the answer to My jobs don't run in the partition I expect.</p>"},{"location":"help/faq/#how-can-i-mount-a-network-volume-from-elsewhere-on-the-cluster","title":"How can I mount a network volume from elsewhere on the cluster?","text":"<p>You cannot.</p>"},{"location":"help/faq/#how-can-i-make-workstationserver-files-available-to-the-hpc","title":"How can I make workstation/server files available to the HPC?","text":"<p>You can transfer files to the cluster through Rsync over SSH or through SFTP to the <code>hpc-transfer-1</code> or <code>hpc-transfer-2</code> node.</p> <p>Do not transfer files through the login nodes. Large file transfers through the login nodes can cause performance degradation for the users with interactive SSH connections.</p>"},{"location":"help/faq/#how-can-i-circumvent-invalid-instruction-signal-4-errors","title":"How can I circumvent \"invalid instruction\" (signal 4) errors?","text":"<p>Make sure that software is compiled with \"sandy bridge\" optimizations and no later one. E.g., use the <code>-march=sandybridge</code> argument to the GCC/LLVM compiler executables.</p> <p>If you absolutely need it, there are some boxes with more recent processors in the cluster (e.g., Haswell architecture). Look at the <code>/proc/cpuinfo</code> files for details.</p>"},{"location":"help/faq/#i-have-problems-connecting-to-the-gpu-node-whats-wrong","title":"I have problems connecting to the GPU node! What's wrong?","text":"<p>Please check whether there might be other jobs waiting in front of you! The following <code>squeue</code> call will show the allocated GPUs of jobs in the <code>gpu</code> queue. This is done by specifying a format string and using the <code>%b</code> field.</p> <pre><code>squeue -o \"%.10i %9P %20j %10u %.2t %.10M %.6D %10R %b\" -p gpu\n     JOBID PARTITION NAME                 USER       ST       TIME  NODES NODELIST(R TRES_PER_NODE\n    872571 gpu       bash                 user1       R   15:53:25      1 hpc-gpu-3    gpu:tesla:1\n    862261 gpu       bash                 user2       R 2-16:26:59      1 hpc-gpu-4    gpu:tesla:4\n    860771 gpu       kidney.job           user3       R 2-16:27:12      1 hpc-gpu-2    gpu:tesla:1\n    860772 gpu       kidney.job           user3       R 2-16:27:12      1 hpc-gpu-2    gpu:tesla:1\n    860773 gpu       kidney.job           user3       R 2-16:27:12      1 hpc-gpu-2    gpu:tesla:1\n    860770 gpu       kidney.job           user3       R 4-03:23:08      1 hpc-gpu-1    gpu:tesla:1\n    860766 gpu       kidney.job           user3       R 4-03:23:11      1 hpc-gpu-3    gpu:tesla:1\n    860767 gpu       kidney.job           user3       R 4-03:23:11      1 hpc-gpu-1    gpu:tesla:1\n    860768 gpu       kidney.job           user3       R 4-03:23:11      1 hpc-gpu-1    gpu:tesla:1\n</code></pre> <p>In the example above, user1 has one job with one GPU running on hpc-gpu-3, user2 has one job running with 4 GPUs on hpc-gpu-4 and user3 has 7 jobs in total running of different machines with one GPU each.</p>"},{"location":"help/faq/#how-can-i-access-graphical-user-interfaces-such-as-for-matlab-on-the-cluster","title":"How can I access graphical user interfaces (such as for Matlab) on the cluster?","text":"<ol> <li>First of all, you will need an X(11) server on your local machine (see Wikipedia: X Window System.   This server offers a \"graphical surface\" that the programs on the cluster can then paint on.</li> <li>You need to make sure that the programs running on the cluster can access this graphical surface.<ul> <li>Generally, you need to connect to the login nodes with X forwarding.   Refer to the manual of your SSH client on how to do this (<code>-X</code> for Linux/Mac <code>ssh</code></li> <li>As you should not run compute-intensive programs on the login node, connect to a cluster node with X forwarding.   With Slurm, this is done using <code>srun --pty --x11 bash -i</code> (instead of <code>srun --pty --x11 bash -i</code>).</li> </ul> </li> </ol> <p>Also see:</p> <ul> <li>Running graphical(X11) applications on Windows</li> <li>Running graphical(X11) applications on Linux</li> </ul>"},{"location":"help/faq/#how-can-i-log-into-a-node-outside-of-the-scheduler","title":"How can I log into a node outside of the scheduler?","text":"<p>This is sometimes useful, e.g., for monitoring the CPU/GPU usage of your job interactively.</p> <p>No Computation Outside of Slurm</p> <p>Do not perform any computation outside of the scheduler as (1) this breaks the purpose of the scheduling system and (2) administration is not aware and might kill you jobs.</p> <p>The answer is simple, just SSH into this node.</p> <pre><code>hpc-login-1:~$ ssh hpc-cpu-xxx\n</code></pre>"},{"location":"help/faq/#why-am-i-getting-multiple-nodes-to-my-job","title":"Why am I getting multiple nodes to my job?","text":"<p>Classically, jobs on HPC systems are written in a way that they can run on multiple nodes at once, using the network to communicate. Slurm comes from this world and when allocating more than one CPU/core, it might allocate them on different nodes. Please use <code>--nodes=1</code> to force Slurm to allocate them on a single node.</p>"},{"location":"help/faq/#how-can-i-select-a-certain-cpu-architecture","title":"How can I select a certain CPU architecture?","text":"<p>You can select the CPU architecture by using the <code>-C</code>/<code>--constraint</code> flag to <code>sbatch</code> and <code>srun</code>. The following are available (as detected by the Linux kernel):</p> <ul> <li><code>ivybridge</code> (96 nodes, plus 4 high-memory nodes)</li> <li><code>haswell</code> (16 nodes)</li> <li><code>broadwell</code> (112 nodes)</li> <li><code>skylake</code> (16 nodes, plus 4 GPU nodes)</li> </ul> <p>You can specify contraints with OR such as <code>--constraint=haswell|broadwell|skylake</code>. You can see the assignment of architectures to nodes using the <code>sinfo -o \"%8P %.5a %.10l %.6D %.6t %10f %N\"</code> command. This will also display node partition, availability etc.</p>"},{"location":"help/faq/#help-im-getting-a-quota-warning-email","title":"Help, I'm getting a Quota Warning Email!","text":"<p>No worries!</p> <p>As documented in the Storage Locations section, each user/project/group has three storage volumes: A small <code>home</code>, a larger <code>work</code> and a large (but temporary) <code>scratch</code>. There are limits on the size of these volumes. You get a nightly warning email in case you are over the soft limit and you will not be able to write any more data if you get above the hard limit. When you login to the login nodes, the quotas and current usage is displayed to you.</p> <p>Please note that not all files will be displayed when using <code>ls</code>. You have to add the <code>-a</code> parameter to also show files and directory starting with a dot. Often, users are confused if these dot directories take up all of their <code>home</code> quota.</p> <p>Use the following command to list all files and directories in your home:</p> <pre><code>hpc-login-1:~$ ls -la ~/\n</code></pre> <p>For more information on how to keep your home directory clean and avoid quota warnings, please read Home Folder Quota.</p>"},{"location":"help/faq/#im-getting-a-disk-quota-exceeded-error","title":"I'm getting a \"Disk quota exceeded\" error.","text":"<p>Most probably you are running into the same problem as described above: Help, I'm getting a Quota Warning Email!</p>"},{"location":"help/faq/#environment-modules-dont-work-and-i-get-module-command-not-found","title":"Environment modules don't work and I get \"module: command not found\"","text":"<p>First of all, ensure that you are on a compute node and not on one of the login nodes. One common reason is that the system-wide Bash configuration has not been loaded, try to execute <code>source /etc/bashrc</code> and then re-try using <code>module</code>. In the case that the problem persists, please contact hpc-helpdesk@bih-charite.de.</p>"},{"location":"help/faq/#what-should-my-bashrc-look-like","title":"What should my ~/.bashrc look like?","text":"<p>All users get their home directory setup using a skelleton files. These file names start with a dot <code>.</code> and are hidden when you type <code>ls</code>, you have to type <code>ls -a</code> to see them. You can find the current skelleton in <code>/etc/skel.bih</code> and inspect the content of the Bash related files as follows:</p> <pre><code>hpc-login-1:~$ head /etc/skel.bih/.bash*\n==&gt; /etc/skel.bih/.bash_logout &lt;==\n# ~/.bash_logout\n\n==&gt; /etc/skel.bih/.bash_profile &lt;==\n# .bash_profile\n\n# Get the aliases and functions\nif [ -f ~/.bashrc ]; then\n        . ~/.bashrc\nfi\n\n# User specific environment and startup programs\n\nPATH=$PATH:$HOME/.local/bin:$HOME/bin\n\n==&gt; /etc/skel.bih/.bashrc &lt;==\n# .bashrc\n\n# Source global definitions\nif [ -f /etc/bashrc ]; then\n        . /etc/bashrc\nfi\n\n# Uncomment the following line if you don't like systemctl's auto-paging feature:\n# export SYSTEMD_PAGER=\n</code></pre> <p>There actually are a couple of more files by default. The original copy in <code>/etc/skel.bih</code> might slightly change over time during improvements but we will not touch your home directory in an unsolicited way at any time!</p> <pre><code>hpc-login-1:~$ tree -a /etc/skel.bih/\n/etc/skel.bih/\n\u251c\u2500\u2500 .bash_logout\n\u251c\u2500\u2500 .bash_profile\n\u251c\u2500\u2500 .bashrc\n\u251c\u2500\u2500 .screenrc\n\u2514\u2500\u2500 .vimrc\n</code></pre>"},{"location":"help/faq/#my-program-crashes-what-should-i-do","title":"My program crashes! What should I do?","text":"<p>Have a look at our How-To: Debug Software and How-To: Debug Software on HPC Systems guides!</p> <p>But it works on my workstation!</p> <p>Yes, please also refer to these guides on possible approaches to find the problem.</p>"},{"location":"help/faq/#my-r-sessions-is-always-crashing","title":"My R sessions is always crashing!","text":"<p>We are aware of issues for macOS users that are related to locales. You might see something like the following in your R session or logs.</p> <p>Note that this is not macOS specific by itself but by macOS using a locale that R does not understand.</p> <p>Try using <code>export LC_ALL=C</code> before calling R. If the problem goes away, you can add the following lines to your <code>~/.bashrc</code> file to make this permanent. Note that this is actually a good idea so your locale settings are fixed.</p> <pre><code># Fix all locale settings to \"C\" for robustness.\nexport LC_ALL=C\n</code></pre> <p>ChatGPT on Unix Locales</p> <p>Let's se what ChatGPT 3.5 tells us about Unix locale.</p> <p>Me: Please explain the concept of Unix locales to me.</p> <p>Certainly! Unix locales are a set of environment variables and settings that define how various aspects of software and user interactions should be handled to accommodate different languages, regions, and cultural conventions. They play a crucial role in enabling software to adapt to local preferences for displaying text, formatting numbers, handling dates, and more.</p> <p>In a Unix-like operating system (such as Linux or macOS), locales provide a way to customize how programs behave based on the user's language, country, and cultural norms. Here are some of the key components of Unix locales:</p> <ol> <li> <p>Language: The primary language used for messages, menus, prompts, and system output. For instance, if you set your locale to \"en_US\", messages and interfaces will be in English (United States).</p> </li> <li> <p>Region: The country or region that defines conventions for aspects like date and time formatting, number formatting (decimal point or comma, thousands separator, etc.), and currency symbols. For example, \"en_GB\" represents English (Great Britain).</p> </li> <li> <p>Character Encoding: Specifies how characters are encoded, which is vital for correctly displaying and handling text in various scripts and languages. Common encodings include UTF-8 for Unicode text.</p> </li> <li> <p>Collation: Defines how strings should be sorted. Different languages have different sorting orders for characters, and the locale determines the appropriate collation rules.</p> </li> <li> <p>Numeric and Date Formats: Specifies how numbers, dates, and times should be formatted. Different regions have different conventions for date formats (dd/mm/yyyy vs. mm/dd/yyyy) and numerical representations (commas vs. periods as decimal points).</p> </li> <li> <p>Currency Symbols: Defines the symbol or abbreviation used for representing currency. This is important for currency formatting in software.</p> </li> </ol> <p>Unix locales are typically identified by a combination of language and region codes, like \"en_US\" for American English or \"fr_FR\" for French (France). These locales are stored in files on the system, and they contain the necessary rules and data for proper localization.</p> <p>Users and administrators can set the system's default locale, and individual users can override this setting in their environment. Here are some common commands used to manage locales:</p> <ul> <li><code>locale</code>: Displays the current locale settings.</li> <li><code>locale -a</code>: Lists all available locales on the system.</li> <li><code>export LC_ALL=locale_code</code>: Temporarily sets the locale for the current session.</li> <li><code>update-locale locale_code</code>: Changes the system-wide default locale.</li> </ul> <p>Programs that are designed to be locale-aware use these settings to display messages, format numbers and dates, and handle other language-dependent features. This allows software to be more user-friendly and relevant to different linguistic and cultural contexts.</p> <p>In summary, Unix locales provide a framework for adapting software behavior to match the language, region, and cultural preferences of users, ensuring a more inclusive and globally accessible computing experience.</p>"},{"location":"help/faq/#which-cuda-version-is-installed","title":"Which CUDA version is installed?","text":"<p>For this, connect to the node you want to query (via SSH but do not perform any computation via SSH!)</p> <pre><code>hpc-login-1:~$ ssh hpc-gpu-1\nhpc-gpu-1:~$ yum list installed 2&gt;/dev/null | grep cuda.x86_64\ncuda.x86_64                               10.2.89-1                  @local-cuda\nnvidia-driver-latest-dkms-cuda.x86_64     3:440.64.00-1.el7          @local-cuda\n</code></pre>"},{"location":"help/faq/#can-i-use-docker-on-the-cluster","title":"Can I use Docker on the Cluster?","text":"<p>No, as Docker essentially gives you access as the root user.</p> <p>However, you can use Apptainer (former Singularity) to run containers (and even many Docker contains if they are \"properly built\"). Also see Using Apptainer (with Docker Images).</p>"},{"location":"help/faq/#how-can-i-copy-data-between-the-max-cluster-mdc-network-and-bih-hpc","title":"How can I copy data between the MAX Cluster (MDC Network) and BIH HPC?","text":"<p>The MAX cluster is the HPC system of the MDC. It is located in the MDC network. The BIH HPC is located in the BIH network.</p> <p>In general, connections can only be initiated from the MDC network to the BIH network. The reverse does not work. In other words, you have to log into the MAX cluster and then initiate your file copies to or from the BIH HPC from there. E.g., use <code>rsync -avP some/path user_m@hpc-transfer-1.cubi.bihealth.org:/another/path</code> to copy files from the MAX cluster to BIH HPC and <code>rsync -avP user_m@hpc-transfer-1.cubi.bihealth.org:/another/path some/path</code> to copy data from the BIH HPC to the MAX cluster.</p>"},{"location":"help/faq/#how-can-i-copy-data-between-the-charite-network-and-bih-hpc","title":"How can I copy data between the Charite Network and BIH HPC?","text":"<p>In general, connections can only be initiated from the Charite network to the BIH network. The reverse does not work. In other words, you have to be on a machine inside the Charite network and then initiate your file copies to or from the BIH HPC from there. E.g., use <code>rsync -avP some/path user_c@hpc-transfer-1.cubi.bihealth.org:/another/path</code> to copy files from the MAX cluster to BIH HPC and <code>rsync -avP user_c@hpc-transfer-1.cubi.bihealth.org:/another/path some/path</code> to copy data from the BIH HPC to the MAX cluster.</p>"},{"location":"help/faq/#my-jobs-are-slowdie-on-the-logintransfer-node","title":"My jobs are slow/die on the login/transfer node!","text":"<p>As of December 3, 2020 we have established a policy to limit you to 512 files and 128MB of RAM. Further, you are limited to using the equivalent of one core. This limit is enforced for all processes originating from an SSH session and the limit is enforced on all jobs. This was done to prevent users from thrashing the head nodes or using SSH based sessions for computation.</p>"},{"location":"help/faq/#slurm-complains-about-execve-no-such-file-or-directory","title":"Slurm complains about <code>execve</code> / \"No such file or directory\"","text":"<p>This means that the program that you want to execute does not exist. Consider the following example:</p> <pre><code>[user@hpc-login-1 ~]$ srun --time 2-0 --nodes=1 --ntasks-per-node=1 \\\n  --cpus-per-task=12 --mem 96G --partition staging --immediate 5 \\\n  --pty bash -i\nslurmstepd: error: execve(): 5: No such file or directory\nsrun: error: hpc-cpu-2: task 0: Exited with exit code 2\n</code></pre> <p>Can you spot the problem? In this case, the problem is that for long arguments such as <code>--mem</code> you must use the equal sign for <code>--arg=value</code> with Slurm. This means that instead of writing <code>--mem 96G --partition staging --immediate 5</code>, you must use <code>`--mem=96G --partition=staging --immediate=5</code>.</p> <p>In this respect, Slurm deviates from the GNU argument syntax where the equal sign is optional for long arguments.</p>"},{"location":"help/faq/#slurmstepd-says-that-hwloc_get_obj_below_by_type-fails","title":"<code>slurmstepd</code> says that <code>hwloc_get_obj_below_by_type</code> fails","text":"<p>You can ignore the following problem:</p> <pre><code>slurmstepd: error: hwloc_get_obj_below_by_type() failing, task/affinity plugin may be required to address bug fixed in HWLOC version 1.11.5\nslurmstepd: error: task[0] unable to set taskset '0x0'\n</code></pre> <p>This is a minor failure related to Slurm and cgroups. Your job should run through successfully despite this error (that is more of a warning for end-users).</p>"},{"location":"help/faq/#how-can-i-share-filescollaborate-with-users-from-another-work-group","title":"How can I share files/collaborate with users from another work group?","text":"<p>Please use projects as documented here. Projects were created for this particular purpose.</p>"},{"location":"help/faq/#whats-the-relation-of-charite-mdc-and-cluster-accounts","title":"What's the relation of Charite, MDC, and cluster accounts?","text":"<p>For HPC 4 Research either an active and working Charite or MDC account is required (that is, you can login e.g., into email.charite.de or mail.mdc-berlin.de). The system has a separate meta directory that is used for the authorization of users (in other words, whether the user is active, has access to the system, and which groups the user belongs to). Charite and MDC accounts map to accounts <code>&lt;Charite user name&gt;_c</code> and <code>&lt;MDC user name&gt;_m</code> accounts in this meta directory. In the case that a user has both Charite and MDC accounts these are completely separate entities in the meta directory. For authentication (veryfing that a user has acccess to an account), the Charite and MDC account systems (MS Active Directory) are used. Authentication currently only uses the SSH keys deposited into Charite (via zugang.charite.de) and MDC (via MDC persdb). Users have to obtain a suitable Charite/MDC account via Charite and MDC central IT departments and upload their SSH keys through the host organization systems on their own. The hpc-helpdesk process is then used for getting their accounts setup on the HPC 4 Research system (the home/work/scratch shares being setup), becoming part of the special <code>hpc-users</code> group that controls access to the system and organizing users into work groups and projects.</p> <p>The process of submitting keys to Charite and MDC is documented in the \"Connecting\" section.</p>"},{"location":"help/faq/#how-do-charitemdccluster-accounts-interplay-with-vpn-and-the-mdc-jail-node","title":"How do Charite/MDC/Cluster accounts interplay with VPN and the MDC jail node?","text":"<p>Charite users have to obtain a VPN account with the appropriate VPN access permissions, i.e., Zusatzantrag B as documented here. For Charite VPN, as for all Charite IT systems, users must use their Charite user name (e.g., <code>jdoe</code> and not <code>jdoe_c</code>).</p> <p>MDC users either have to use MDC VPN or the MDC jail node, as documented here. For MDC VPN and jail node, as for all MDC IT systems, users must use their MDC user name (e.g., <code>jdoe</code> and not <code>jdoe_m</code>).</p> <p>For help with VPN or jail node, please contact the central Charite or MDC helpdesks as appropriate.</p> <p>Only when connecting from the host organizations' VPN or from the host organizations' jail node, the users use the HPC 4 Research user name that is <code>jdoe_c</code> or <code>jdoe_m</code> and not <code>jdoe</code>!</p>"},{"location":"help/faq/#how-can-i-exchange-data-with-external-collaborators","title":"How can I exchange data with external collaborators?","text":"<p>BIH HPC IT does not have the resources to offer such a service to normal users.</p> <p>In particular, for privacy sensitive data this comes with a large number of strings attached to fulfill all regulatory requirements. If you need to exchange such data then you need to contact the central IT departments of your home organisation:</p> <ul> <li>Charite GB IT: heldpesk@charite.de</li> <li>MDC: helpdesk@mdc-berlin.de</li> </ul> <p>If your data is not privacy sensitive or you can guarantee strong encryption of the data then the Gigamove service of RWTH Aachen might come in handy:</p> <ul> <li>https://gigamove.rwth-aachen.de/en</li> <li>https://help.itc.rwth-aachen.de/en/service/1jeqhtat4k0o3/faq/</li> </ul> <p>You can login via Charite/MDC credentials (or most German academic institutions) and store up to 1TB of data at a time in the account with each file having up to 100GB.</p> <p>As a note, Charite GB IT has a (German) manual on how to use 7-Zip with AES256 and strong passwords for encrypting data such that it is fit for transfer over unencrypted channels. You can find it here (Charite Intranet only) at point 2.12.</p> <ul> <li>https://intranet.charite.de/it/helpdesk/anleitungen/</li> </ul> <p>The key point is using a strong password (e.g. with the <code>pwgen</code> utility), creating an encrypted file with AES256 encryption, using distinct password for each recipient, and exchanging the password over a second channel (SMS or voice phone). Note that the central manual remains the ground truth of information and this FAQ entry may not reflect the current process recommended by GB IT if it changes without us noticing.</p>"},{"location":"help/good-tickets/","title":"How-To: Write a Good Ticket","text":"<p>Can you solve the question yourself?</p> <p>Please try to solve the question yourself with this manual and Google.</p> <p></p> <p>If the problem turns out to be hard, we're happy to help.</p> <p>This page describes how to write a good help request ticket.</p> <ol> <li>Write a descriptive summary.<ul> <li>Which cluster are you on? We only support HPC 4 Research.</li> <li>Put in a short summary into the Subject.</li> <li>Expand on this in a first paragraph.   Try to answer the following questions:<ul> <li>What are you trying to achieve?</li> <li>When did the problem start?</li> <li>Did it work before?</li> <li>Which steps did you attempt to achieve this?</li> </ul> </li> </ul> </li> <li>Give us your basic information.<ul> <li>Please give us your user name on the cluster.</li> </ul> </li> <li>Put enough details in the details section.<ul> <li>Please give us the exact commands you type into your console.</li> <li>What are the symptoms/is the error message</li> </ul> </li> <li>Never put your password into the ticket.    In the case that you handle person-related data of patients/study participants, never write any of this information into the ticket or sequent email.</li> <li>Please do not send us screenshot images of what you did but copy and paste the text instead.</li> </ol> <p>There is more specific questions for common issues given below.</p>"},{"location":"help/good-tickets/#problems-connecting-to-the-cluster","title":"Problems Connecting to the Cluster","text":"<ul> <li>From which machine/IP do you try to connect (<code>ifconfig</code> on Linux/Mac, <code>ipconfig</code> on Windows)?</li> <li>Did it work before?</li> <li>What is your user name?</li> <li>Please send us the output of <code>ssh-add -l</code> and add <code>-vvv</code> to the SSH command that fails for you.</li> <li>What is the response of the server?</li> </ul>"},{"location":"help/good-tickets/#problems-submitting-jobs","title":"Problems Submitting Jobs","text":"<ul> <li>Please give us the directory that you run things in.</li> <li>Please send us the submission script that you have problems with.</li> <li>If the job was submitted, Slurm  will give you a job ID.   We will need this ID.</li> <li>Please send us the output of <code>scontrol show job &lt;jobid&gt;</code> or <code>sacct --long -j &lt;jobid&gt;</code> of your job.</li> </ul>"},{"location":"help/helpdesk/","title":"HPC IT Helpdesk","text":"<p>Getting Help</p> <p>Our helpdesk can be reached via email to shanghai.it.help@nyu.edu. Please read our guide on how to write good tickets first.</p> <p>Please also use the handy figure below on general problem resolution.</p> <p></p> <p>But before contacting the helpdesk, try to get help in the HPC Talk BIH HPC user self-help forum!</p>"},{"location":"help/helpdesk/#helpdesk-scope","title":"Helpdesk Scope","text":"<p>Our helpdesk can support you in the following areas:</p> <ul> <li>Problems/questions with connecting to the clusters.</li> <li>Problems/questions  with using the cluster scheduler or operating system.</li> <li>Requests for the installation of common software.</li> <li>Problems with running your software that works in other environments.</li> </ul> <p>We will try our best to resolve these issues. Please note that all other questions can only be answered in a \"best effort way\".</p>"},{"location":"help/helpdesk/#helpdesk-non-scope","title":"Helpdesk Non-Scope","text":"<p>The following topics are out of scope for the BIH HPC Helpdesk:</p> <ul> <li>Generic Linux or programming questions (try stackoverflow.com).</li> <li>Managing users, groups, and projects on the clusters (use shanghai.it.help@nyu.edu).</li> <li>Generic help with Snakemake or other workflow engines (See Stackoverflow for getting help with Snakemake).</li> <li>Help with bioinformatics or other scientific software.   Please contact the authors/communities of these software for help (also known as \"upstream\").</li> </ul> <p>We're happy to see if we can help when there is a concrete problem with the software, e.g.,</p> <ul> <li>something that breaks from one week to another without you changing anything and you assume a change on the cluster, or</li> <li>you need a generic dependency that you cannot install via conda or on your own.   Please read the section Administration-Provided Software to learn about the kinds of software that we will install and the kinds that we will not.</li> </ul>"},{"location":"help/hpc-talk/","title":"HPC Talk","text":"<p>Another community-driven possibility to get help is our \u201cHPC Talk\u201d forum. After this manual, it should be the first place to consult.</p> <p>https://hpcg/</p> <p>Its main purpose is to serve as a FAQ, so with time and more people participating, you will more likely find an answer to your question. We also use it to make announcements and give an up-to-date status of current problems with the cluster, so it is worth logging in every once in a while. It is also a great first place to look at if you're experiencing problems with the cluster. Maybe it's a known issue.</p> <p>Despite users also being able to answer questions, our admins do participate on a regular basis.</p>"},{"location":"how-to/connect/gpu-nodes/","title":"How-To: Connect to GPU Nodes","text":"<p>The cluster has seven nodes with four Tesla V100 GPUs each: <code>hpc-gpu-{1..7}</code> and one node with 10 A40 GPUs: <code>hpc-gpu-8</code>.</p> <p>Connecting to a node with GPUs is easy. You request one or more GPU cores by adding a generic resources flag to your Slurm job submission via <code>srun</code> or <code>sbatch</code>.</p> <ul> <li><code>--gres=gpu:tesla:COUNT</code> will request NVIDIA V100 cores.</li> <li><code>--gres=gpu:a40:COUNT</code> will request NVIDIA A40 cores.</li> <li><code>--gres=gpu:COUNT</code> will request any available GPU cores.</li> </ul> <p>Your job will be automatically placed in the Slurm <code>gpu</code> partition and allocated a number of <code>COUNT</code> GPUs.</p> <p>Info</p> <p>Fair use rules apply. As GPU nodes are a limited resource, excessive use by single users is prohibited and can lead to mitigating actions. Be nice and cooperative with other users. Tip: <code>getent passwd USER_NAME</code> will give you a user's contact details.</p> <p>Interactive Use of GPU Nodes is Discouraged</p> <p>While interactive computation on the GPU nodes is convenient, it makes it very easy to forget a job after your computation is complete and let it run idle. While your job is allocated, it blocks the allocated GPUs and other users cannot use them although you might not be actually using them. Please prefer batch jobs for your GPU jobs over interactive jobs.</p> <p>Furthermore, interactive GPU jobs are currently limited to 24 hours. We will monitor the situation and adjust that limit to optimize GPU usage and usability.</p> <p>Please also note that allocation of GPUs through Slurm is mandatory, in other words: Using GPUs via SSH sessions is prohibited. The scheduler is not aware of manually allocated GPUs and this interferes with other users' jobs.</p>"},{"location":"how-to/connect/gpu-nodes/#usage-example","title":"Usage example","text":""},{"location":"how-to/connect/gpu-nodes/#preparation","title":"Preparation","text":"<p>We will setup a miniconda installation with <code>pytorch</code> testing the GPU. If you already have this setup then you can skip this step</p> <pre><code>hpc-login-1:~$ srun --pty bash\nhpc-cpu-1:~$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nhpc-cpu-1:~$ bash Miniconda3-latest-Linux-x86_64.sh -b -p ~/work/miniconda3\nhpc-cpu-1:~$ source ~/work/miniconda3/bin/activate\nhpc-cpu-1:~$ conda create -y -n gpu-test pytorch cudatoolkit=10.2 -c pytorch\nhpc-cpu-1:~$ conda activate gpu-test\nhpc-cpu-1:~$ python -c 'import torch; print(torch.cuda.is_available())'\nFalse\nhpc-cpu-1:~$ exit\nhpc-login-1:~$\n</code></pre> <p>The <code>False</code> shows that CUDA is not available on the node but that is to be expected. We're only warming up!</p>"},{"location":"how-to/connect/gpu-nodes/#allocating-gpus","title":"Allocating GPUs","text":"<p>Let us now allocate a GPU. The Slurm schedule will properly allocate GPUs for you and setup the environment variable that tell CUDA which devices are available. The following dry run shows these environment variables (and that they are not available on the login node).</p> <pre><code>hpc-login-1:~$ export | grep CUDA_VISIBLE_DEVICES\nhpc-login-1:~$ srun --gres=gpu:tesla:1 --pty bash\nhpc-gpu-1:~$ export | grep CUDA_VISIBLE_DEVICES\ndeclare -x CUDA_VISIBLE_DEVICES=\"0\"\nhpc-gpu-1:~$ exit\nhpc-login-1:~$ srun --gres=gpu:tesla:2 --pty bash\nhpc-gpu-1:~$ export | grep CUDA_VISIBLE_DEVICES\ndeclare -x CUDA_VISIBLE_DEVICES=\"0,1\"\n</code></pre> <p>As you see, you can also reserve multiple GPUs. If we were to open two concurrent connections (e. g. in a <code>screen</code>) to the same node when allocating one GPU each, the allocated GPUs would be non-overlapping. Note that any two jobs are isolated using Linux cgroups (\"container\" technology) so you cannot accidentally use a GPU of another job.</p> <p>Now to the somewhat boring part where we show that CUDA actually works.</p> <pre><code>hpc-login-1:~$ srun --gres=gpu:tesla:1 --pty bash\nhpc-gpu-1:~$ nvcc --version\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2019 NVIDIA Corporation\nBuilt on Wed_Oct_23_19:24:38_PDT_2019\nCuda compilation tools, release 10.2, V10.2.89\nhpc-gpu-1:~$ source ~/work/miniconda3/bin/activate\nhpc-gpu-1:~$ conda activate gpu-test\nhpc-gpu-1:~$ python -c 'import torch; print(torch.cuda.is_available())'\nTrue\n</code></pre> <p>Note</p> <p>If scheduling a GPU fails, consider explicitely requesting the GPU partion via <code>--partition gpu</code> (or <code>#SBATCH --partition gpu</code>).</p> <p>Also make sure to read the FAQ entry \"I have problems connecting to the GPU node! What's wrong?\" if you encounter problems.</p>"},{"location":"how-to/connect/gpu-nodes/#bonus-1-who-is-using-the-gpus","title":"Bonus #1: Who is using the GPUs?","text":"<p>Use <code>squeue</code> to find out about currently queued jobs (the <code>egrep</code> only keeps the header and entries in the <code>gpu</code> partition).</p> <pre><code>hpc-login-1:~$ squeue | egrep -iw 'JOBID|gpu'\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n                33       gpu     bash holtgrem  R       2:26      1 hpc-gpu-1\n</code></pre>"},{"location":"how-to/connect/gpu-nodes/#bonus-2-is-the-gpu-running","title":"Bonus #2: Is the GPU running?","text":"<p>To find out how active the GPU nodes actually are, you can connect to the nodes (without allocating a GPU; you can do this even if the node is full) and then use <code>nvidia-smi</code>.</p> <pre><code>hpc-login-1:~$ ssh hpc-gpu-1 bash\nhpc-gpu-1:~$ nvidia-smi\nFri Mar  6 11:10:08 2020\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 440.33.01    Driver Version: 440.33.01    CUDA Version: 10.2     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  Tesla V100-SXM2...  Off  | 00000000:18:00.0 Off |                    0 |\n| N/A   62C    P0   246W / 300W |  16604MiB / 32510MiB |     99%      Default |\n+-------------------------------+----------------------+----------------------+\n|   1  Tesla V100-SXM2...  Off  | 00000000:3B:00.0 Off |                    0 |\n| N/A   61C    P0   270W / 300W |  16604MiB / 32510MiB |    100%      Default |\n+-------------------------------+----------------------+----------------------+\n|   2  Tesla V100-SXM2...  Off  | 00000000:86:00.0 Off |                    0 |\n| N/A   39C    P0    55W / 300W |      0MiB / 32510MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n|   3  Tesla V100-SXM2...  Off  | 00000000:AF:00.0 Off |                    0 |\n| N/A   44C    P0    60W / 300W |      0MiB / 32510MiB |      4%      Default |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID   Type   Process name                             Usage      |\n|=============================================================================|\n|    0     43461      C   python                                     16593MiB |\n|    1     43373      C   python                                     16593MiB |\n+-----------------------------------------------------------------------------+\n</code></pre>"},{"location":"how-to/connect/gpu-nodes/#fair-share-fair-use","title":"Fair Share / Fair Use","text":"<p>Note that allocating a GPU makes it unavailable for everyone else, so please behave nicely and be cooperative. If you see someone blocking the GPU nodes for a long time, first find out who it is. You can type <code>getent passwd USER_NAME</code> on any cluster node to see their email address (and work phone number if added). Send a friendly email, most likely they blocked the node accidentally. If you cannot resolve the issue (e. g. the user is not reachable) then please contact hpc-helpdesk@bih-charite.de.</p>"},{"location":"how-to/connect/high-memory/","title":"How-To: Connect to High-Memory Nodes","text":"<p>The cluster has 4 high-memory nodes with 1.5 TB of RAM. You can connect to these nodes using the <code>highmem</code> SLURM partition (see below). Jobs allocating more than 200 GB of RAM are automatically routed to the <code>highmem</code> nodes.</p> <p>Info</p> <p>Fair use rules apply. As high-memory nodes are a limited resource, excessive use by single users is prohibited and can lead to mitigating actions. Be nice and cooperative with other users. Tip: <code>getent passwd USER_NAME</code> will give you a user's contact details.</p>"},{"location":"how-to/connect/high-memory/#how-to","title":"How-To","text":"<p>In the cluster there are four High-memory used which can be used:</p> <pre><code>hpc-login-1:~$ sinfo -p highmem\nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST \nhighmem      up 14-00:00:0      3   idle med040[1-4] \n</code></pre> <p>To connect to one of them, simply allocate more than 200GB of RAM in your job.</p> <pre><code>hpc-login-1:~$ srun --pty --mem=300GB bash -i\nmed0401:~$\n</code></pre> <p>You can also pick one of the hostnames:</p> <pre><code>hpc-login-1:~$ srun --pty --mem=300GB --nodelist=med0403 bash -i\nmed0403:~$\n</code></pre> <p>After successfull login, you can see that you are in \"highmem\" queue:</p> <pre><code>med0403:~$ squeue\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON) \n[...]\n               270   highmem     bash holtgrem  R       1:25      1 med0403 \n</code></pre>"},{"location":"how-to/misc/contribute/","title":"How-To: Contribute to this Document","text":"<p>Click on the edit link at the top of each page as shown below.</p> <p></p> <ul> <li>Sign in to github (or create a new account).</li> <li>Fork the repository and add your changes (more details: https://docs.github.com/en/github/getting-started-with-github/fork-a-repo )</li> <li>Add a pull request</li> </ul>"},{"location":"how-to/misc/debug-at-hpc/","title":"How-To: Debug Software on HPC Systems","text":"<p>Please Contribute!</p> <p>This guide is far from complete. Please feel free to contribute, e.g., refer to How-To: Contribute to this Document.</p> <p>Please make sure that you have read How-To: Debug Software as a general primer.</p> <p>As debugging is hard enough already, it makes one wonder how to do this on the HPC system in batch mode. Here is a list of pointers.</p>"},{"location":"how-to/misc/debug-at-hpc/#attempt-1-run-it-interactively","title":"Attempt 1: Run it interactively!","text":"<p>First of all, you can of course get an interactive session using <code>srun --pty bash -i</code> and then run your program interactively. Make sure to allocate appropriate memory and cores for your purpose. You might also want to first start a <code>screen</code> or <code>tmux</code> session on the login node such that network interruptions to the login node don't harm your hard debugging work!</p> <p>Does the program work correctly if you do this? If yes, and it only fails when run in batch mode, consider the following behaviour of the scheduler.</p> <p>The scheduler takes your resource requirements and tries to find a free slot. Once it has found a free slot, it will attempt to run the program. This mainly differs in running it interactively in standard input, output, and error streams.</p> <ul> <li>By default, stdin is connected to <code>/dev/null</code> such that no input is read.   You can change this with the <code>--input=</code> flag to specify a file.</li> <li>By default stdout and stderr are joint and written to the file specified as <code>--output=</code>.   You can use certain wildcards to make the output (but also the input files) depend on things like the job ID or job name.</li> <li>Please note that the directory name to the output file but exist before the job is launched.   It is not sufficient to <code>mkdir</code> it in the job script itself.</li> </ul> <p>Please refer to the sbatch documentation for details.</p> <p>If your program fails without leaving any log file or any other trace, make sure that the path to the output file exists. To the best of the author's knowledge, there is no way to tell apart a crash because this does not exist and a program failure (except maybe for the running time of 0 seconds and memory usage of 0 bytes).</p>"},{"location":"how-to/misc/debug-at-hpc/#attempt-2-inspect-the-logs","title":"Attempt 2: Inspect the logs","text":"<p>Do you see any exception in your log files? If not, continue.</p> <p>If your job is canceled by <code>scancel</code> or stopped because it exhausted it maximal running time or allocated resources then you will find a note in the last line of your error output log (usually folded into the standard output). Please note that if the previous output line did not include a line ending, the message might be at the very end of the last line.</p> <p>The message will look similar to:</p> <pre><code>slurmstepd: error: *** JOB &lt;your job id&gt; ON med0xxx CANCELLED AT 2020-09-02T21:01:12 DUE TO TIME LIMIT ***\n</code></pre>"},{"location":"how-to/misc/debug-at-hpc/#attempt-3-increase-loggingprinting","title":"Attempt 3: Increase logging/printing","text":"<p>Ideally, you can add one or more <code>--verbose</code>/<code>-v</code> flags to your program to increase verbosity. See how far your program gets, see where it fails. This attempt will be greatly helped by reproducible running on a minimal working example.</p>"},{"location":"how-to/misc/debug-at-hpc/#attempt-4-use-sattach","title":"Attempt 4: Use <code>sattach</code>","text":"<p>You can use <code>sattach</code> for attaching your terminal to your running job. This way, you can perform an interactive inspection of the commands.</p> <p>You can combine this with one of the next attempst of using debuggers to e.g., get an <code>pdb</code> debugger at an important position of your program. However, please note that <code>pdb</code> and <code>ipdb</code> will stop the program's execution if the standard input stream is at end of file (which <code>/dev/null</code> is and this is used by default in <code>sbatch</code> jobs).</p>"},{"location":"how-to/misc/debug-at-hpc/#attempt-5-inspect-program-activity","title":"Attempt 5: Inspect Program Activity","text":"<p>Log into the node that your program runs on either using <code>srun --pty --nodelist=NODE</code> or using <code>ssh</code>. Please note that you should never perform computational intensive things when logging into the node directly. You can then use all activity inspection tips from How-To: Debug Software.</p>"},{"location":"how-to/misc/debug-at-hpc/#attempt-6-use-debuggers","title":"Attempt 6: Use Debuggers","text":"<p>After having logged into the node running your program, you can of course also attach to the program with <code>gdb -p PID</code> or <code>cgdb -p PID</code>.</p>"},{"location":"how-to/misc/debug-at-hpc/#dont-despair","title":"Don't Despair","text":"<p>Here are some final remarks:</p> <ul> <li>Don't despair!</li> <li>The longer you search for the problem, the more fundamental it is.   Chances are that you are just overlooking something obvious which is actually easy to fix.</li> <li>Keep old log files!</li> <li>Really, really, make sure that your program runs deterministically.   You will save yourself a world of pain.</li> </ul>"},{"location":"how-to/misc/debug-software/","title":"How-To: Debug Software","text":"<p>Please Contribute!</p> <p>This guide is far from complete. Please feel free to contribute, e.g., refer to How-To: Contribute to this Document.</p> <p>Software development in general or even debugging of software are very broad topics. As such, we will not be able to handle them here comprehensively. Rather, we will give a tour de force on practical and minimal approaches of debugging of software. Here, debugging refers to the process of locating errors in your program and removing them.</p> <p>Origin of the term debugging</p> <p>The terms \"bug\" and \"debugging\" are popularly attributed to Admiral Grace Hopper in the 1940s. While she was working on a Mark II computer at Harvard University, her associates discovered a moth stuck in a relay and thereby impeding operation, whereupon she remarked that they were \"debugging\" the system. However, the term \"bug\", in the sense of \"technical error\", dates back at least to 1878 and Thomas Edison (see software bug for a full discussion).</p> <p>-- Wikipedia: Debugging</p> <p>When forgetting a moment about everything known about software engineering, programming roughly work sin the following cycle:</p> <p></p> <p>You run your program. In the case of failure, you need to remove the problem until the program runs through. You then start implementing the next change or feature. But how do you actually locate the problem? Let us walk through a couple of steps.</p>"},{"location":"how-to/misc/debug-software/#step-1-find-out-that-there-is-an-error","title":"Step 1: Find out that there is an error","text":"<p>This might seem trivial but let us think about this for a moment. For this</p> <ul> <li>you will have to run your program on some input and observe its behaviour and output,</li> <li>you will need to have an expectation of its behaviour and output, and</li> <li>observe unexpected behaviour, including but not limited to:<ul> <li>the program crashes,</li> <li>the program produce wrong or corrupted output, or</li> <li>the program produces incomplete output.</li> </ul> </li> </ul> <p>You could make this step a bit more comfortable by writing a little checker script that compares expected and actual output.</p>"},{"location":"how-to/misc/debug-software/#step-2-reproduce-your-error","title":"Step 2: Reproduce your error","text":"<p>You will have to find out how often or regularly the problem occurs. Does the problem occur on all inputs or only specific ones? Does it occur with all parameters? Make sure that you can reproduce the problem, otherwise the problem will be hard to track down.</p> <p>Discard randomness</p> <p>In most applications, true randomness is neither required nor used in programs. Rather, pseudo random number generators are used that are usually seeded with a special value. In many cases, the current time is used which makes it hard to reproduce problems. Rather, use a fixed seed, e.g., by calling <code>srand(42)</code> in C. You could also make this a parameter of your program, but make sure that you can fix all pseudo randomness in your program so you can deterministically reproduce its behaviour.</p>"},{"location":"how-to/misc/debug-software/#step-3-create-a-minimal-working-example-mwe","title":"Step 3: Create a minimal working example (MWE)","text":"<p>Try to find a minimal input set on which you can produce your problem. For example, you could use <code>samtools view FILE.bam chr1:90,000-100,000</code> to cut out regions from a BAM file. The next step is to nail down the problem. Ideally, you can deactivate or comment out parts of your program that are irrelevant to the problem.</p> <p>This will allow you to get to the problematic point in your program quicker and make the whole debugging exercise easier on yourself.</p>"},{"location":"how-to/misc/debug-software/#interlude-what-we-have-up-to-here","title":"Interlude: What we have up to here","text":"<p>We can now</p> <ol> <li>tell expected and \"other\" behaviour and output apart (ideally semi-automatically),</li> <li>reproduce the problem,</li> <li>and reproduce the problem quickly.</li> </ol> <p>If you reached the points above, you have probably cut the time to resolve the problem by 90% already.</p> <p>Let us now consider a few things that you can do from here to find the source of your problems.</p>"},{"location":"how-to/misc/debug-software/#method-1-stare-at-your-source-code","title":"Method 1: Stare at your source code","text":"<p>Again, this is trivial, but: look at your code and try to follow through what it does with your given input. This is nicely complemented with the following methods. ;-)</p> <p>There is a class of tools to help you in doing this, so-called static code analysis tools. They analyze the source code for problematic patterns. The success and power of such analysis tools tends to corellate strongly with how strictly typed the targeted programming language is. E.g., there are very powerful tools for Java, C/C++. However, there is some useful tool support out there for dynamic languages such as Python.</p> <p>Here is a short list of pointers to static code analysis tools (feel free to extend the list):</p> <ul> <li>Python Static Analysis Tools</li> </ul>"},{"location":"how-to/misc/debug-software/#method-2-inspect-your-codes-activity","title":"Method 2: Inspect your code's activity","text":""},{"location":"how-to/misc/debug-software/#print-it","title":"Print it!","text":"<p>The most simple approach is to use <code>print</code> statements (or similar) to print the current line or value of parameters. While sometimes frowned upon, this certainly is one of the most robust ways to see what is happening in your program. However, beware that too much output might slow down your program or  actually make your problem disappear in the case of subtle threading/timing issues (sometimes referred to as \"Heisenbugs\").</p> <p>Standard output vs. error</p> <p>Classically, Linux/Unix programs can print back to the user's terminal in two ways: standard output and standard errors. By convention, logging should go to stderr. The standard error stream also has the advantage that writing to it has a more direct effect. In contrast to stdout which is usually setup to be (line) buffered (you will only see output after the next newline character), stderr is unbuffered.</p>"},{"location":"how-to/misc/debug-software/#look-at-tophtop","title":"Look at <code>top</code>/<code>htop</code>","text":"<p>The tools <code>top</code> and <code>htop</code> are useful tools for inspecting the activity on the current computer. The following parameters are useful (and are actually also available as key strokes when they are running).</p> <ul> <li><code>-c</code> -- show the programs' command lines</li> <li><code>-u USER</code> -- show the processes of the user</li> </ul> <p>You can exit either tool by pressing <code>q</code> or <code>Ctrl-C</code>.</p> <p>Use the <code>man</code>, Luke!</p> <p>Besides searching the internet for a unix command, you can also read its manual page by running <code>man TOOL</code>. If this does not work, try <code>TOOL --help</code> to see its builtin help function. Also, doing an internet search for \"man tool\" might help.</p>"},{"location":"how-to/misc/debug-software/#look-at-strace","title":"Look at <code>strace</code>","text":"<p>The program <code>strace</code> allows you to intercept the calls of your program to the kernel. As the kernel is needed for actions such as accessing the network or file system. Thus this is not so useful if your program gets stuck in \"user land\", but this might be useful to see which files it is accessing.</p> <p>Pro-Tip: if you move the selection line of <code>htop</code> to a process then you can strace the program by pressing <code>s</code>.</p>"},{"location":"how-to/misc/debug-software/#look-at-lsof","title":"Look at <code>lsof</code>","text":"<p>The <code>lsof</code> program lists all open files with the processes that are accessing them. This is useful for seeing which files you program has opened.</p> <p>You can even build a progress bar with lsof, although that requires <code>sudo</code> privileges which you might not have on the system that you are using.</p> <p>Pro-Tip: if you move the selection line of <code>htop</code> to a process then you can list the open files by pressing <code>l</code>.</p>"},{"location":"how-to/misc/debug-software/#more-looking","title":"More looking","text":"<p>There are more ways of inspecting your program, here are some:</p> <ul> <li>Google Perftools</li> <li>Linux <code>perf</code></li> </ul>"},{"location":"how-to/misc/debug-software/#interactive-debuggers","title":"Interactive Debuggers","text":"<p>Let us now enter the world of interactive debuggers. Integrated development environment (IDEs) generally consist of an editor, a compiler/interpreter, and an ineractive/visual debugger. Usually, they have a debugger program at their core that can also be used on their command line.</p>"},{"location":"how-to/misc/debug-software/#old-but-gold-gdb","title":"Old but gold: <code>gdb</code>","text":"<p>On Unix systems, a widely used debugger is <code>gdb</code> the GNU debugger. <code>gdb</code> is a command line program and if you are not used to it, it might be hard to use. However, here are some pointers on how to use it:</p> <p>The commands in interactive mode include:</p> <ul> <li><code>quit</code> or <code>Ctrl-D</code> to exit the debugger</li> <li><code>b file.ext:123</code> set breakpoint in <code>file.ext</code> on line <code>123</code></li> <li><code>r</code> run the program</li> <li><code>p var_name</code> print the value of the variable <code>var_name</code></li> <li><code>display var_name</code> print the value of the variable <code>var_name</code> every time execution stops</li> <li><code>l</code> print the source code around the current line (multiple calls will show the next 10 lines or so, and so on)</li> <li><code>l 123</code> print lines around line <code>123</code></li> <li><code>f</code> show information about the current frame (that is the current source location)</li> <li><code>bt</code> show the backtrace (that is all functions above the current one)</li> <li><code>n</code> step to the next line</li> <li><code>s</code> step into function calls</li> <li><code>finish</code> run the current function until it returns</li> <li><code>help</code> to get more help</li> </ul> <p>You can call your program directly with command line arguments using <code>cgdb [cgdb-args] --args path/to/program -- [program-args</code>.<code>You can also attach to running programs using</code>cgdb -p PID<code>once you have found out the process ID to attach to using</code>htop<code>or</code>ps`.</p> <p>Pro-tip: use <code>cgdb</code> for an easier to use version that displays the source code in split screen and stores command line histories over sessions.</p>"},{"location":"how-to/misc/debug-software/#interactive-python-debuggers","title":"Interactive Python Debuggers","text":"<p>You can get a simple REPL (read-execute-print loop) at virtually any position in your program by adding:</p> <pre><code>import pdb; pdb.set_trace()\n</code></pre> <p>You will get a prompt at the current position and can issue several commands including:</p> <ul> <li><code>quit</code> or <code>Ctrl-D</code> to exit the debugger</li> <li><code>p var_name</code> to print the variable with <code>var_name</code></li> <li><code>f</code> show information about the current frame (that is the current source location)</li> <li><code>bt</code> show the backtrace (that is all functions called above the current one)</li> <li><code>continue</code> to continue running</li> <li><code>help</code> to get more help</li> </ul> <p>Pro-tip: use <code>import ipdb; ipdb.set_trace()</code> (after installing the <code>ipdb</code> package, of course) to get an IPython-based prompt that is much more comfortable to use.</p>"},{"location":"how-to/misc/debug-software/#pro-tip-version-control-your-code","title":"Pro-Tip: Version control your code!","text":"<p>Here is a free bonus pro-tip: learn how to use version control, e.g., Git. This will allow you to go back to previous versions without problems and see current changes to your source code.</p> <ul> <li>10 Free Online Git Courses</li> <li>Github: Resources to learn Git</li> </ul>"},{"location":"how-to/misc/debug-software/#pro-tip-write-automated-tests","title":"Pro-Tip: Write automated tests!","text":"<p>Combine the pro tip on using version control (learn Git already!) with this one: learn how to write automated tests. This will allow you to quickly narrow down problematic changes in your version control history.</p> <p>Again, testing is another topic alltogether, so here are just some links to testing frameworks to get you started:</p> <ul> <li>pytest: testing framework for Python</li> <li>testthat: testing framework for R</li> </ul>"},{"location":"how-to/misc/debug-software/#reading-material-on-debuggers","title":"Reading Material on Debuggers","text":"<p>The following web resources can serve as a starting point on how to use debuggers.</p> <ul> <li>Chapter Debugger from Wikibook: Introduction to Software Engineering</li> <li>The Python Debugger</li> <li>Debugging with GDB</li> </ul>"},{"location":"how-to/misc/hpc-talk/","title":"Accessing HPC Talk","text":"<p>We provide a user forum using the Discourse software at</p> <ul> <li>https://hpc-talk.cubi.bihealth.org</li> </ul>"},{"location":"how-to/misc/hpc-talk/#log-in","title":"Log In!","text":"<p>First of all, visit the website for the first time: https://hpc-talk.cubi.bihealth.org</p> <p>You will then be directed to our Single-Sign-On Page.</p> <p></p> <p>Use the appropriate button for your host organisation (MDC / Charite) where also your cluster account belongs to.</p> <p>Then use the usual of your host organisation.</p> <p>Clicked wrong organisation?</p> <p>If you accidentally clicked the wrong institution then you need to clear your browser history up to the point where you clicked (e.g., for the last hour).</p> <ul> <li>Delete your Chrome browsing history</li> <li>How do I delete browsing history in firefox</li> </ul>"},{"location":"how-to/misc/hpc-talk/#first-steps","title":"First Steps","text":"<p>You will be shown the following screen after the first login.</p> <p></p> <p>You can proceed with reading the notification or split it. The site is mostly self-explanatory. let us point you at a couple of interesting things for first steps.</p> <p>Here you can setup your preferences</p> <p></p> <p>Use the \"New Topic\" button to create a new topic. Set a meaningful title, select a suitable category (we will update the list of categories over time), and write down your question or discussion item. Finally, click \"Create Topic\" to create the new topic.</p> <p></p> <p>You will be directed to the page with your new topic.</p> <p></p> <p>You can enable email notifications to receive emails if someone answers.</p>"},{"location":"how-to/misc/hpc-talk/#disabling-browser-notifications","title":"Disabling Browser Notifications","text":"<p>In your settings, you will find an option to disable browser notifications in this browser.</p> <p></p> <p>Or you can use the do not disturb button.</p> <p></p>"},{"location":"how-to/misc/hpc-talk/#closing-remarks","title":"Closing Remarks","text":"<p>We established the HPC Talk forum as a self-help forum for users. Alas, there is a number of such sites out there already that are populated by more users.</p> <p>How does HPC Talk fit in?</p> <p>We think it is most useful for asking questions and discussing points that are directly related to the BIH HPC system.</p> <p>What alternatives do I have?</p> <p>For example:</p> <ul> <li>Stack Overflow for general programming questions, including Python/R programming</li> <li>Cross Validated for questions regading statistics</li> <li>Unix &amp; Linux Stack Exchange for discussing all sorts of Linux/Unix questions</li> <li>Super User for certain more advanced Unix topics</li> </ul>"},{"location":"how-to/service/file-exchange/","title":"How-To: Use File Exchange","text":"<p>Obtaining File Boxes</p> <p>At the moment, file boxes are only available to members of core facilities (e.g., genomics, bioinformatics, or metabolomics) for exchanging files for their collaboration partners. Currently, HPC users cannot use the file box mechanism on their own.</p> <p>BIH HPC IT provides a file exchange server to be used by the BIH core facilities and their users. The server is located in the BIH DMZ in Buch. Users authenticate using their Charite/BIH (<code>user@CHARITE</code>) or MDC accounts (<code>user@MDC-BERLIN</code>). File exchange is organized using \"file boxes\", directories created on the server to which selected users are granted access. Access control list maintenance is done with audit-trails (\"Revisionssicherheit\") and the file access itself is also logged to comply with data protection standards.</p> <ul> <li>Jump to \"From Windows\"</li> <li>Jump to \"From Linux\"</li> <li>Jump to \"From Mac\"</li> </ul> <p>Access from Charite Network</p> <p>Access from the Charite network (IP ranges <code>141.x.x.x</code> and <code>10.x.x.x</code>) must connect through the Charite proxy (<code>http://proxy.charite.de:8080</code>). Depending on the client software that you are using, you might have to configure the proxy.</p>"},{"location":"how-to/service/file-exchange/#file-box-management","title":"File Box Management","text":"<p>File boxes are created by the core facilities (e.g., the genomics facilities at Charite and MDC). The facility members also organize the access control. Please talk to your core facility contact on file exchange.</p> <p>External users must obtain a Charite or MDC account first. Account creation is handled by the core facilities that the external user is a customer of.</p>"},{"location":"how-to/service/file-exchange/#file-access","title":"File Access","text":"<p>Generally, you will be given a URL to your file box similar to <code>https://file-exchange.bihealth.org/&lt;file-box-id&gt;/</code>. The files are served over an encrypted connection using WebDAV (which uses HTTPS).</p> <p>The following describes how to access the files in the box from different platforms.</p>"},{"location":"how-to/service/file-exchange/#from-linux","title":"From Linux","text":"<p>We describe how to access the files on the command line using the <code>lftp</code> program. The program is preinstalled on the BIH (and the MDC cluster) and you should be able to just install it with <code>yum install lftp</code> on CentOS/Red Hat or <code>apt-get install lftp</code> on Ubuntu/Debian.</p> <p>When using <code>lftp</code>, you have to add some configuration first:</p> <pre><code># cat &gt;&gt;~/.lftprc &lt;&lt;\"EOF\"\nset ssl:verify-certificate no\nset ftp:ssl-force yes\nEOF\n</code></pre> <p>In case that you want to access the files using a graphical user interface, search Google for \"WebDAV\" and your operating system or desktop environment. File browsers such as Nautilus and Thunar have built-in WebDAV support.</p>"},{"location":"how-to/service/file-exchange/#connecting","title":"Connecting","text":"<p>First, log into the machine that has <code>lftp</code> installed. The login nodes of the BIH cluster do not have it installed but all compute and file transfer nodes have it. Go to the data download location.</p> <pre><code>host:~$ mkdir -p ~/scratch/download_dir\nhost:~$ cd ~/scratch/download_dir\n</code></pre> <p>Next, start <code>lftp</code>. You can open the connection using <code>open -u &lt;user&gt;@&lt;DOMAIN&gt; https://file-exchange.bihealth.org/&lt;file-box-id&gt;/</code> (NB: there is a trailing slash) where</p> <ul> <li><code>&lt;user&gt;</code> is your user name, e.g., <code>holtgrem</code>,</li> <li><code>&lt;domain&gt;</code> is either <code>MDC-BERLIN</code> or <code>CHARITE</code>, and</li> <li><code>&lt;file-box-id&gt;</code> the file box ID from the URL provided to you.</li> </ul> <p>When prompted, use your normal Charite/MDC password to login.</p> <pre><code>host:download_dir$ lftp\nlftp :~&gt; open -u holtgrem@CHARITE https://file-exchange.bihealth.org/c62910b3-c1ba-49a5-81a6-a68f1f15aef6\nPassword:\ncd ok, cwd=/c62910b3-c1ba-49a5-81a6-a68f1f15aef6\nlftp holtgrem@CHARITE@file-exchange.bihealth.org:/c62910b3-c1ba-49a5-81a6-a68f1f15aef6&gt;\n</code></pre>"},{"location":"how-to/service/file-exchange/#browsing-data","title":"Browsing Data","text":"<p>You can find a full reference of <code>lftp</code> on the lftp man page. You could also use <code>help COMMAND</code> on the lftp prompt. For example, to look at the files of the server for a bit...</p> <pre><code>lftp holtgrem@CHARITE@file-exchange.bihealth.org:/c62910b3-c1ba-49a5-81a6-a68f1f15aef6&gt; ls\ndrwxr-xr-x  --  /\ndrwxr-xr-x  --  dir\n-rw-r--r--  --  file1\nlftp holtgrem@CHARITE@file-exchange.bihealth.org:/c62910b3-c1ba-49a5-81a6-a68f1f15aef6&gt; find\n./\n./dir/\n./dir/file2\n./file1\n</code></pre>"},{"location":"how-to/service/file-exchange/#downloading-data","title":"Downloading Data","text":"<p>To download all data use <code>mirror</code>, e.g. with <code>-P 4</code> to use four download threads.</p> <pre><code>lftp holtgrem@CHARITE@file-exchange.bihealth.org:/c62910b3-c1ba-49a5-81a6-a68f1f15aef6&gt; mirror .\nTotal: 2 directories, 3 files, 0 symlinks\nNew: 3 files, 0 symlinks\nlftp holtgrem@CHARITE@file-exchange.bihealth.org:/c62910b3-c1ba-49a5-81a6-a68f1f15aef6&gt; exit\nhost:download_dir$ tree\n.\n\u251c\u2500\u2500 dir\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 file2\n\u251c\u2500\u2500 file1\n\u2514\u2500\u2500 file.txt\n\n1 directory, 3 files\n</code></pre> <p>Ignoring <code>gnutls_record_recv</code> errors.</p> <p>A common error to see is <code>mirror: Fatal error: gnutls_record_recv: The TLS connection was non-properly terminated.</code>. You can just ignore this.</p>"},{"location":"how-to/service/file-exchange/#uploading-data","title":"Uploading Data","text":"<p>To upload data, you can use <code>mirror -R .</code> which is essentially the \"reverse\" of the mirror command.</p> <pre><code>lftp holtgrem@CHARITE@file-exchange.bihealth.org:/c62910b3-c1ba-49a5-81a6-a68f1f15aef6&gt; mirror -R\nmirror: Fatal error: gnutls_record_recv: The TLS connection was non-properly terminated.\nmirror: Fatal error: gnutls_record_recv: The TLS connection was non-properly terminated.\nmirror: Fatal error: gnutls_record_recv: The TLS connection was non-properly terminated.\nTotal: 2 directories, 3 files, 0 symlinks\nModified: 3 files, 0 symlinks\n4 errors detected\n</code></pre>"},{"location":"how-to/service/file-exchange/#from-windows","title":"From Windows","text":"<p>We recommend to use WinSCP for file transfer.</p> <ul> <li>Pre-packaged WinSCP on Charite Workstations.   Charite IT has packaged WinSCP and you can install it using Matrix24 Empirum on Windows 10 using these instructions in the Charite intranet.</li> <li>Installing WinSCP yourself.   You can obtain it from the WinSCP Download Page.   A \"portable\" version is available that comes as a ZIP archive that you just have to extract without an installer.</li> </ul>"},{"location":"how-to/service/file-exchange/#connecting_1","title":"Connecting","text":"<p>After starting WinSCP, you will see a window titled <code>Login</code>. Just paste the URL (e.g., <code>https://file-exchange.bihealth.org/c62910b3-c1ba-49a5-81a6-a68f1f15aef6/</code>) of the file box into the <code>Host name</code> entry field. In this case, the fields <code>File protocol</code> etc. will be filled automatically. Next, enter your user name as <code>user@CHARITE</code> or <code>user@MDC-BERLIN</code> (the capitalization of the part behind the <code>@</code> is important). The window should now look similar to the one below.</p> <p></p> <p>Proxy Configuration on Charite Network</p> <p>If you are on the Charite network then you have to configure the proxy. Otherwise, you have to skip this step.</p> <p>Click <code>Advanced</code> and a window titled <code>Advanced Site Settings</code> will pop up. Here, select <code>Connection / Proxy</code> in the left side. Select <code>HTTP</code> for the <code>Proxy type</code>. Then, enter <code>proxy.charite.de</code> as the <code>Proxy host name</code> and set the <code>Port number</code> to <code>8080</code>. The window should nwo look as below. Then, click <code>OK</code> to apply the proxy settings.</p> <p></p> <p>Finally, click <code>Login</code>. You can now transfer files between the file exchange server and your local computer using drag and drop between WinSCP and your local Windows File Explorer. Alternatively, you can use the two-panel view of WinSCP to transfer files as described here.</p>"},{"location":"how-to/service/file-exchange/#from-mac","title":"From Mac","text":"<p>For Mac, we you can also use <code>lftp</code> as described above in From Linux. You can find install instructions here online.</p> <p>Proxy Configuration on Charite Network</p> <p>If you are on the Charite network then you must have configured the proxy appropriately. Otherwise, you have to skip this step.</p> <p>You can find them in your <code>System Preference</code> in the <code>Network</code> section, in the <code>Advanced</code> tab of your network (e.g., <code>WiFi</code>). </p> <p>If you want to use a graphical interface then we recommend the usage of Cyberduck. After starting the program, click <code>Open Connection</code> on the top left, then select <code>WebDAV (HTTPS)</code> and fill out the form as in the following way. Paste the file box URL into the server field and use your login name (<code>user@CHARITE</code> or <code>user@MDC-BERLIN</code>) with your usual password.</p> <p></p> <p>If you need to perform access through a graphical user interface on your Mac, please contact hpc-helpdesk@bihealth.org for support.</p>"},{"location":"how-to/service/file-exchange/#security","title":"Security","text":"<p>The file exchange server has the <code>fail2ban</code> software installed and configured (Charite, MDC, and BIH IPs are excluded from this).</p> <p>If you are entering your user/password incorrectly for more than 5 times in 10 minutes then your machine will be banned for one hour. This means someone else that has the same IP address from the side of the file exchange server can get you blocked. This can happen if you are in the same home or university network with NAT or if you are behind a proxy. In this case you get a \"connection refused\" error. In this case, try again in one hour.</p>"},{"location":"how-to/software/apptainer/","title":"Using Apptainer (with Docker Images)","text":"<p>Note</p> <p>Singularity is now Apptainer! While Apptainer provides an <code>singularity</code> alias for backwards compatibility, it is recommanded to adapt all workflows to use the new binary <code>apptainer</code>.</p> <p>Apptainer (https://apptainer.org/) is a popular alternative to docker, because it does not require to run as a privileged user. Apptainer can run Docker images out-of-the-box by converting them to the apptainer image format. The following guide gives a quick dive into using docker images with apptainer.</p> <p>Build on your workstation, run on the HPC</p> <p>Building images using Apptainer requires root privileges. We cannot give you these permissions on the BIH HPC. Thus, you will have to build the images on your local workstation (or anywhere where you have root access). You can then run the built images on the BIH HPC.</p> <p>This is also true for the <code>--writeable</code> flag. Apparently it needs root permissions which you don't have on the cluster.</p>"},{"location":"how-to/software/apptainer/#quickstart","title":"Quickstart","text":"<p>Link ~/.apptainer to ~/work/.apptainer</p> <p>Because you only have a quota of 1 GB in your home directory, you should symlink <code>~/.apptainer</code> to <code>~/work/.apptainer</code>.</p> <pre><code>host:~$ mkdir -p ~/work/.apptainer &amp;&amp; ln -sr ~/work/.apptainer ~/.apptainer\n</code></pre> <p>In case you already have a apptainer directory:</p> <pre><code>host:~$ mv ~/.apptainer ~/work/.apptainer &amp;&amp; ln -sr ~/work/.apptainer ~/.apptainer\n</code></pre> <p>Run a bash in a docker image:</p> <pre><code>host:~$ apptainer shell docker://godlovedc/lolcow\n</code></pre> <p>Run a command in a docker image:</p> <pre><code>host:~$ apptainer exec docker://godlovedc/lolcow echo \"hello, hello!\"\n</code></pre> <p>Run a bash in a docker image, enable access to the cuda driver (--nv) and mount a path (--bind or -B):</p> <pre><code>host:~$ apptainer shell --nv --bind /path_on_host/:/path_inside_container/ docker://godlovedc/lolcow\n</code></pre>"},{"location":"how-to/software/apptainer/#some-caveats-and-notes","title":"Some Caveats and Notes","text":"<p>Caveats</p> <ul> <li>The default apptainer images format (.sif) is read-only.</li> <li>By default apptainer mounts /home/$USER, /tmp, and $PWD in the container.</li> </ul> <p>Notes</p> <ul> <li>Environment variables can be provided by setting them in the bash and adding the prefix <code>APPTAINERENV_</code>:     <pre><code>host:~$ APPTAINERENV_HELLO=123 apptainer shell docker://godlovedc/lolcow echo $HELLO\n</code></pre></li> <li>Calling <code>apptainer shell</code> or <code>apptainer exec</code> uses as cwd the host callers cwd not the one set in the Dockerfile.   One can change this by setting <code>--pwd</code>.</li> </ul>"},{"location":"how-to/software/apptainer/#referencingproviding-docker-images","title":"Referencing/Providing Docker Images","text":""},{"location":"how-to/software/apptainer/#option-1-use-docker-images-via-docker-hub","title":"Option 1: Use Docker Images via Docker Hub","text":"<p>The easiest variant to run a docker image available via a docker hub is by specifying its url. This causes apptainer to download the image and convert it to a apptainer image:</p> <pre><code>host:~$ apptainer run docker://godlovedc/lolcow\n</code></pre> <p>or to open a shell inside the image</p> <pre><code>host:~$ apptainer shell docker://godlovedc/lolcow\n</code></pre> <p>Furthermore, similar to docker, one can pull (and convert) remote image with the following call:</p> <pre><code>host:~$ apptainer pull docker://godlovedc/lolcow\n</code></pre> <p>In case your registry requires authentication you can provide it via a prompt by adding the option <code>--docker-login</code>:</p> <pre><code>host:~$ apptainer pull --docker-login docker://ilumb/mylolcow\n</code></pre> <p>or by setting the following environment variables:</p> <pre><code>host:~$ export APPTAINER_DOCKER_USERNAME=ilumb\nhost:~$ export APPTAINER_DOCKER_PASSWORD=&lt;redacted&gt;\nhost:~$ apptainer pull docker://ilumb/mylolcow\n</code></pre> <p>More details can be found in the Apptainer documentation.</p>"},{"location":"how-to/software/apptainer/#option-2-converting-docker-images","title":"Option 2: Converting Docker Images","text":"<p>Another option is to convert your docker image into the Apptainer/Singularity image format. This can be easily done using the docker images provided by docker2singularity.</p> <p>To convert the docker image <code>docker_image_name</code> to the apptainer image <code>apptainer_image_name</code> one can use the following command line. The output image will be located in <code>output_directory_for_images</code>.</p> <pre><code>host:~$ docker run -v /var/run/docker.sock:/var/run/docker.sock -v /output_directory_for_images/:/output --privileged -t --rm quay.io/singularity/docker2singularity --name apptainer_image_name docker_image_name\n</code></pre> <p>The resulting image can then directly be used as image:</p> <pre><code>host:~$ apptainer exec apptainer_image_name.sif bash\n</code></pre>"},{"location":"how-to/software/apptainer/#conversion-compatibility","title":"Conversion Compatibility","text":"<p>Here are some tips for making Docker images compatible with Apptainer taken from docker2singulrity:</p> <ul> <li>Define all environmental variables using the ENV instruction set. Do not rely on <code>~/.bashrc</code>, <code>~/.profile</code>, etc.</li> <li>Define an <code>ENTRYPOINT</code> instruction set pointing to the command line interface to your pipeline.</li> <li>Do not define <code>CMD</code> - rely only on <code>ENTRYPOINT</code>.</li> <li>You can interactively test the software inside the container by overriding the <code>ENTRYPOINT docker run -i -t --entrypoint /bin/bash bids/example</code>.</li> <li>Do not rely on being able to write anywhere other than the home folder and /scratch.   Make sure your container runs with the <code>--read-only --tmpfs /run --tmpfs /tmp parameters</code> (this emulates the read-only behavior of Apptainer).</li> <li>Don't rely on having elevated user permissions.</li> <li>Don't use the <code>USER</code> instruction set.</li> </ul>"},{"location":"how-to/software/cell-ranger/","title":"How-To: Run CellRanger","text":""},{"location":"how-to/software/cell-ranger/#what-is-cell-ranger","title":"what is Cell Ranger?","text":"<p>from the official website: \"Cell Ranger is a set of analysis pipelines that process Chromium single-cell RNA-seq output to align reads, generate feature-barcode matrices and perform clustering and gene expression analysis\"</p>"},{"location":"how-to/software/cell-ranger/#installation","title":"installation","text":"<p>requires registration before download from here</p> <p>to unpack Cell Ranger, its dependencies and the <code>cellranger</code> script:</p> <pre><code>cd /data/cephfs-1/home/users/$USER/work\nmv /path/to/cellranger-3.0.2.tar.gz .\ntar -xzvf cellranger-3.0.2.tar.gz\n</code></pre>"},{"location":"how-to/software/cell-ranger/#reference-data","title":"reference data","text":"<p>will be provided in <code>/data/cephfs-1/work/projects/cubit/current/static_data/app_support/cellranger</code></p>"},{"location":"how-to/software/cell-ranger/#cluster-support-slurm","title":"cluster support SLURM","text":"<p>add a file <code>slurm.template</code> to <code>/data/cephfs-1/home/users/$USER/work/cellranger-3.0.2/martian-cs/v3.2.0/jobmanagers/sge.template</code> with the following contents:</p> <pre><code>#!/usr/bin/env bash\n#\n# Copyright (c) 2016 10x Genomics, Inc. All rights reserved.\n#\n# =============================================================================\n# Setup Instructions\n# =============================================================================\n#\n# 1. Add any other necessary Slurm arguments such as partition (-p) or account\n#    (-A). If your system requires a walltime (-t), 24 hours (24:00:00) is\n#    sufficient.  We recommend you do not remove any arguments below or Martian\n#    may not run properly.\n#\n# 2. Change filename of slurm.template.example to slurm.template.\n#\n# =============================================================================\n# Template\n# =============================================================================\n#\n#SBATCH -J __MRO_JOB_NAME__\n#SBATCH --export=ALL\n#SBATCH --nodes=1 --ntasks-per-node=__MRO_THREADS__\n#SBATCH --signal=2\n#SBATCH --no-requeue\n#SBATCH --partition=medium\n#SBATCH --time=24:00:00\n### Alternatively: --ntasks=1 --cpus-per-task=__MRO_THREADS__\n###   Consult with your cluster administrators to find the combination that\n###   works best for single-node, multi-threaded applications on your system.\n#SBATCH --mem=__MRO_MEM_GB__G\n#SBATCH -o __MRO_STDOUT__\n#SBATCH -e __MRO_STDERR__\n\n__MRO_CMD__\n</code></pre> <p>note: on newer cellranger version, <code>slurm.template</code> needs to go to <code>/data/cephfs-1/home/users/$USER/work/cellranger-XX/external/martian/jobmanagers/</code></p>"},{"location":"how-to/software/cell-ranger/#demultiplexing","title":"demultiplexing","text":"<p>if that hasn't been done yet, you can use <code>cellranger mkfastq</code> (details to be added)</p>"},{"location":"how-to/software/cell-ranger/#run-the-pipeline-count","title":"run the pipeline (<code>count</code>)","text":"<p>create a script <code>run_cellranger.sh</code> with these contents (consult the documentation for help:</p> <pre><code>#!/bin/bash\n\n/data/cephfs-1/home/users/$USER/work/cellranger-3.0.2/cellranger count \\\n  --id=sample_id \\\n  --transcriptome=/data/cephfs-1/work/projects/cubit/current/static_data/app_support/cellranger/refdata-cellranger-${species}-3.0.0\\\n  --fastqs=/path/to/fastqs \\\n  --sample=sample_name \\\n  --expect-cells=n_cells \\\n  --jobmode=slurm \\\n  --maxjobs=100 \\\n  --jobinterval=1000\n</code></pre> <p>and then submit the job via</p> <pre><code>sbatch --ntasks=1 --mem-per-cpu=4G --time=8:00:00 -p medium -o cellranger.log run_cellranger.sh\n</code></pre>"},{"location":"how-to/software/cell-ranger/#cluster-support-sge-outdated","title":"cluster support SGE (outdated)","text":"<p>add a file <code>sge.template</code> to <code>/data/cephfs-1/home/users/$USER/work/cellranger-3.0.2/martian-cs/v3.2.0/jobmanagers/sge.template</code> with the following contents:</p> <pre><code># =============================================================================\n# Template\n# =============================================================================\n#\n#$ -N __MRO_JOB_NAME__\n#$ -V\n#$ -pe smp __MRO_THREADS__\n#$ -cwd\n#$ -P medium\n#$ -o __MRO_STDOUT__\n#$ -e __MRO_STDERR__\n#$ -l h_vmem=__MRO_MEM_GB_PER_THREAD__G\n#$ -l h_rt=08:00:00\n\n#$ -m a\n#$ -M user@email.com\n\n__MRO_CMD__\n</code></pre> <p>and submit the job via</p> <pre><code> qsub -cwd -V -pe smp 1 -l h_vmem=8G -l h_rt=24:00:00 -P medium -m a -j y run_cellranger.sh\n</code></pre>"},{"location":"how-to/software/jupyter/","title":"How-To: Run Jupyter","text":"<p>SSH Tunnels Considered Harmful</p> <p>Please use our Open OnDemand Portal for running Jupyter notebooks!</p> <p>The information below is still accurate. However, many users find it tricky to get SSH tunnels working correctly. A considerable number of parts is involved and you have to get each step 100% correct. Helpdesk cannot support you in problems with SSH tunnels that are caused by incorrect usage.</p>"},{"location":"how-to/software/jupyter/#what-is-jupyter","title":"What is Jupyter","text":"<p>Project Jupyter is a networking protocol for interactive computing that allows the user to write and execute code for a high number of different programming languages. The most used client is Jupyter Notebook that can be encountered in various form all over the web. Its basic principle is a document consisting of different cells, each of which contains either code (executed in place) or documentation (written in markdown). This allows one to handily describe the processed workflow.</p>"},{"location":"how-to/software/jupyter/#setup-and-running-jupyter-on-the-cluster","title":"Setup and running Jupyter on the cluster","text":"<p>Install Jupyter on the cluster (via conda, by creating a custom environment)</p> <pre><code>hpc-cpu-x:~$ conda create -n jupyter jupyter\nhpc-cpu-x:~$ conda activate jupyter\n</code></pre> <p>(If you want to work in a language other than python, you can install more Jupyter language kernel, see the kernel list)</p> <p>Now you can start the Jupyter server session (you may want to do this in a <code>screen</code> &amp; <code>srun --pty bash -i</code> session as jupyter keeps running while you are doing computations) <pre><code>hpc-cpu-x:~$ jupyter notebook --no-browser\n</code></pre></p> <p>Check the port number (usually <code>8888</code>) in the on output and remember it for later: <pre><code>[I 23:39:40.860 NotebookApp] The Jupyter Notebook is running at:\n[I 23:39:40.860 NotebookApp] http://localhost:8888/\n</code></pre></p> <p>By default, Jupyter will create an access token (a link stated in the output) to protect your notebook against unauthorized access which you have to save and enter in the accessing browser. You can change this to password base authorization via <code>jupyter notebook password</code>. If you are running multiple server on one or more nodes, one can separate them by changing the port number by adding <code>--port=$PORT</code>.</p>"},{"location":"how-to/software/jupyter/#connecting-to-the-running-session","title":"Connecting to the Running Session","text":"<p>This is slightly trickier as we have to create a SSH connection/tunnel with potentially multiple hops in between. The easiest way is probably to configure your <code>.ssh/config</code> to automatically route your connection via the login node (and possibly MDC jail). This is described in our Advanced SSH config documentation</p> <p>In short,add these lines to <code>~/.ssh/config</code> (replace curly parts):</p> <pre><code>Host bihcluster\n  user {USER_NAME}\n  HostName hpc-login-2.cubi.bihealth.org\n\nHost hpc-cpu*\n  user {USER_NAME}\n  ProxyJump bihcluster\n</code></pre> <p>For MDC users outside the MDC network: <pre><code>Host mdcjail\n    HostName ssh1.mdc-berlin.de\n    User {MDC_USER_NAME}\n\nHost bihcluster\n  user {USER_NAME}\n  HostName hpc-login-2.cubi.bihealth.org\n\nHost hpc-cpu*\n  user {USER_NAME}\n  ProxyJump bihcluster\n</code></pre></p> <p>Check that this config is working by connecting like this: <code>ssh hpc-cpu-1</code>. Please note that you cannot use any resources on this node without a valid Slurm session.</p> <p>Now you setup a tunnel for your running Jupyter session:</p> <p><pre><code>workstation:~$ ssh -N -f -L 127.0.0.1:8888:localhost:{PORT} hpc-cpu-x\n</code></pre> The port of your Jupyter server is usually <code>8888</code>. The cluster node <code>srun</code> has sent you to determines the last argument.</p> <p>You should now be able to connect to your Jupyter server by typing <code>localhost:8888</code> in your webbrowser (see the note about token and password above).</p>"},{"location":"how-to/software/jupyter/#losing-connection","title":"Losing connection","text":"<p>It can and will happen that will lose connection, either due to network problems or due to shut-down of your computer. This is not a problem at all and you will not lose data, just reconnect to your session. If your notebooks are also losing connection (you will see a colorful remark in the top right corner), reconnect and click the colorful button. If this does not work, your work is still not lost as all cells that have been executed are automatically saved anyways. Copy all unexecuted cells (those are only saved periodically) and reload the browser page (after reconnecting) with <code>F5</code>. (you can also open a copy of the notebook in another tab, just be aware that there may be synchronisation problems)</p>"},{"location":"how-to/software/jupyter/#ending-a-session","title":"Ending a Session","text":"<p>There are two independent steps in ending a session:</p> <p>Canceling the SSH tunnel</p> <ul> <li>Identify the running SSH process</li> </ul> <pre><code>hpc-cpu-x:~$ ps aux | grep \"$PORT\"\n</code></pre> <p>This will give you something like this:</p> <pre><code>user        54  0.0  0.0  43104   784 ?        Ss   15:06   0:00 ssh -N -f -L 127.0.0.1:8888:localhost:8888 hpc-cpu-x\nuser        58  0.0  0.0  41116  1024 tty1     S    15:42   0:00 grep --color=auto 8888\n</code></pre> <p>from which you need the process ID (here <code>54</code>)</p> <ul> <li>Terminate it the process</li> </ul> <pre><code>hpc-cpu-x:~$ kill -9 $PID\n</code></pre> <p>Shutdown the Jupyter server</p> <p>Open the Jupyter session, cancel the process with {Ctrl} + {C} and confirm {y}. Make sure you saved your notebooks beforehand (though auto-save catches most things).</p>"},{"location":"how-to/software/jupyter/#advanced","title":"Advanced","text":"<ul> <li>List of available Jupyter Kernels for different programming languages</li> <li>Jupyterlab is a further development in the Jupyter ecosystem that creates a display similar to RStudio with panels for the current file system and different notebooks in different tabs.</li> <li>One can install Jupyter kernels or python packages while running a server or notebook without restrictions</li> </ul> <p>If anyone has figured out, the following might also be interesting (please add):</p> <ul> <li>create a Jupyter-Hub</li> <li>multi-user support</li> </ul>"},{"location":"how-to/software/keras/","title":"How-To: Run Keras (Multi-GPU)","text":"<p>Because the GPU nodes <code>med030[1-4]</code> has four GPU units we can train a model by using multiple GPUs in parallel. This How-To gives an example with Keras 2.2.4 together and tensorflow. Finally soem hints how you can submit a job on the cluster.</p> <p>Hint</p> <p>With tensorflow &gt; 2.0 and newer keras version the <code>multi_gpu_model</code> is deprecated and you have to use the <code>MirroredStrategy</code>.</p>"},{"location":"how-to/software/keras/#keras-code","title":"Keras code","text":"<p>we need to import the <code>multi_gpu_model</code> model from <code>keras.utils</code> and have to pass our actual model (maybe sequential Keras model) into it. In general Keras automatically configures the number of available nodes (<code>gpus=None</code>). This seems not to work on our system. So we have to specify the numer of GPUs, e.g. two with <code>gpus=2</code>. We put this in a try catch environment that it will also work on CPUs. </p> <pre><code>from keras.utils import multi_gpu_model\n\ntry: \n    model = multi_gpu_model(model, gpus=2) \nexcept:\n    pass\n</code></pre> <p>That's it!</p> <p>Please read here on how to submit jobs to the GPU nodes.</p>"},{"location":"how-to/software/keras/#conda-environment","title":"Conda environment","text":"<p>All this was tested with the following conda environment:</p> <pre><code>name: cuda channels: \n- conda-forge\n- bioconda\n- defaults\ndependencies:\n- keras=2.2.4\n- python=3.6.7\n- tensorboard=1.12.0\n- tensorflow=1.12.0\n- tensorflow-base=1.12.0\n- tensorflow-gpu=1.12.0\n</code></pre>"},{"location":"how-to/software/matlab/","title":"How-To: Use Matlab","text":"<p>Note</p> <p>This information is outdated and will soon be removed. </p> <p>GNU Octave as Matlab alternative</p> <p>Note that GNU Octave is an Open Source alternative to Matlab. While both packages are not 100% compatible, Octave is an alternative that does not require any license management. Further, you can easily install it yourself using Conda.</p> <p>Want to use the Matlab GUI?</p> <p>Make sure you understand X forwarding as outline in this FAQ entry.</p> <p>You can also use Open OnDemand Portal to run Matlab.</p>"},{"location":"how-to/software/matlab/#pre-requisites","title":"Pre-requisites","text":"<p>You have to register with hpc-helpdesk@bih-charite.de for requesting access to the Matlab licenses. Afterwards, you can connect to the High-Memory using the <code>license_matlab_r2016b</code> resource (see below).</p>"},{"location":"how-to/software/matlab/#how-to-use","title":"How-To Use","text":"<p>BIH has a license of Matlab R2016b for 16 seats and various licensed packages (see below). To display the available licenses:</p> <pre><code>hpc-login-1:~$ scontrol show lic\nLicenseName=matlab_r2016b\n    Total=16 Used=0 Free=16 Remote=no\n</code></pre> <p>Matlab is installed on all of the compute nodes:</p> <pre><code># The following is VITAL so the scheduler allocates a license to your session.\nhpc-login-1:~$ srun -L matlab_r2016b:1 --pty bash -i\nmed0127:~$ scontrol show lic\nLicenseName=matlab_r2016b\n    Total=16 Used=1 Free=15 Remote=no\nmed0127:~$ module avail\n----------------- /usr/share/Modules/modulefiles -----------------\ndot         module-info null\nmodule-git  modules     use.own\n\n----------------------- /opt/local/modules -----------------------\ncmake/3.11.0-0  llvm/6.0.0-0    openmpi/3.1.0-0\ngcc/7.2.0-0     matlab/r2016b-0\nmed0127:~$ module load matlab/r2016b-0\nStart matlab without GUI: matlab -nosplash -nodisplay -nojvm\n    Start matlab with GUI (requires X forwarding (ssh -X)): matlab\nmed0127:~$ matlab -nosplash -nodisplay -nojvm\n                                               &lt; M A T L A B (R) &gt;\n                                     Copyright 1984-2016 The MathWorks, Inc.\n                                     R2016b (9.1.0.441655) 64-bit (glnxa64)\n                                                September 7, 2016\n\n\nFor online documentation, see http://www.mathworks.com/support\nFor product information, visit www.mathworks.com.\n\n\n    Non-Degree Granting Education License -- for use at non-degree granting, nonprofit,\n    educational organizations only.  Not for government, commercial, or other organizational use.\n\n&gt;&gt; ver\n--------------------------------------------------------------------------------------------\nMATLAB Version: 9.1.0.441655 (R2016b)\nMATLAB License Number: 1108905\nOperating System: Linux 3.10.0-862.3.2.el7.x86_64 #1 SMP Mon May 21 23:36:36 UTC 2018 x86_64\nJava Version: Java is not enabled\n--------------------------------------------------------------------------------------------\nMATLAB                                                Version 9.1         (R2016b)\nBioinformatics Toolbox                                Version 4.7         (R2016b)\nGlobal Optimization Toolbox                           Version 3.4.1       (R2016b)\nImage Processing Toolbox                              Version 9.5         (R2016b)\nOptimization Toolbox                                  Version 7.5         (R2016b)\nParallel Computing Toolbox                            Version 6.9         (R2016b)\nPartial Differential Equation Toolbox                 Version 2.3         (R2016b)\nSignal Processing Toolbox                             Version 7.3         (R2016b)\nSimBiology                                            Version 5.5         (R2016b)\nStatistics and Machine Learning Toolbox               Version 11.0        (R2016b)\nWavelet Toolbox                                       Version 4.17        (R2016b)\n&gt;&gt; exit\n</code></pre>"},{"location":"how-to/software/matlab/#running-matlab-ui","title":"Running MATLAB UI","text":"<p>For starting the Matlab with GUI, make sure that your client is running a X11 server and you connect with X11 forwarding enabled (e.g., <code>ssh -X hpc-login-1.cubi.bihealth.org</code> from the Linux command line). Then, make sure to use <code>srun -L matlab_r2016b:1 --pty --x11 bash -i</code> for connecting to a node with X11 forwarding enabled.</p> <pre><code>client:~$ ssh -X hpc-login-1.cubi.bihealth.org\n[...]\nhpc-login-1:~ $ srun -L matlab_r2016b:1 --pty --x11 bash -i\n[...]\nmed0203:~$ module load matlab/r2016b-0\nStart matlab without GUI: matlab -nosplash -nodisplay -nojvm\n    Start matlab with GUI (requires X forwarding (ssh -X)): matlab\nmed0203:~$ matlab\n[UI will start]\n</code></pre> <p>For forcing starting in text mode can be done (as said after <code>module load</code>): <code>matlab -nosplash -nodisplay -nojvm</code>.</p> <p>Also see this FAQ entry.</p>"},{"location":"how-to/software/matlab/#see-available-matlab-licenses","title":"See Available Matlab Licenses","text":"<p>You can use <code>scontrol show lic</code> to see the currently available MATLAB license. E.g., here I am running an interactive shell in which I have requested 1 of the 16 MATLAB licenses, so 15 more remain.</p> <pre><code>$ scontrol show lic\nLicenseName=matlab_r2016b\n    Total=16 Used=1 Free=15 Remote=no\n</code></pre>"},{"location":"how-to/software/matlab/#a-working-example","title":"A Working Example","text":"<p>Get a checkout of our MATLAB example. Then, look around at the contents of this repository.</p> <pre><code>hpc-login-1:~$ git clone https://github.com/bihealth/bih-cluster-matlab-example.git\nhpc-login-1:~$ cd bih-cluster-matlab-example\nhpc-login-1:~$ cat job_script.sh\n#!/bin/bash\n\n# Logging goes to directory sge_log\n#SBATCH -o slurm_log/%x-%J.log\n# Keep current environment variables\n#SBATCH --export=ALL\n# Name of the script\n#SBATCH --job-name MATLAB-example\n# Allocate 4GB of RAM per core\n#SBATCH --mem 4G\n# Maximal running time of 2 hours\n#SBATCH --time 02:00:00\n# Allocate one Matlab license\n#SBATCH -L matlab_r2016b:1\n\nmodule load matlab/r2016b-0\n\nmatlab -r example\n$ cat example.m\n% Example Hello World script for Matlab.\n\ndisp('Hello world!')\ndisp('Thinking...')\n\npause(10)\n\ndisp(sprintf('The square root of 2 is = %f', sqrt(2)))\nexit\n</code></pre> <p>For submitting the script, you can do the following</p> <pre><code>hpc-login-1:~$ sbatch job_script.sh\n</code></pre> <p>This will submit a job with one Matlab license requested. If you were to submit 17 of these jobs, then at least one of them would have to wait until all licenses are free.</p> <p>Matlab License Server</p> <p>Note that there is a Matlab license server running on the server that will check whether 16 or less Matlab sessions are currently running. If a Matlab session is running but this is not made known to the scheduler via <code>-L matlab_r2016b</code> then this can lead to scripts crashing as not enough licenses are available. If this happens to you, double-check that you have specified the license requirements correctly and notify hpc-helpdesk@bih-charite.de in case of any problems. We will try to sort out the situation then.</p>"},{"location":"how-to/software/openmpi/","title":"How-To: Build and Run OpenMPI Program","text":"<p>This article describes how to build an run an OpenMPI program. We will build a simple C program that uses the OpenMPI message passing interface and run it in parallel. You should be able to go from here with other languages and more complex programs. We will use a simple Makefile for building the software.</p>"},{"location":"how-to/software/openmpi/#loading-openmpi-environment","title":"Loading OpenMPI Environment","text":"<p>First, load the OpenMPI package.</p> <pre><code>$ srun --pty bash -i\nsompute122:~$ module load openmpi/4.3.0-0\n</code></pre> <p>Then, check that the installation works</p> <pre><code>compute122:~$ ompi_info | head\n                 Package: Open MPI root@med0127 Distribution\n                Open MPI: 4.0.3\n  Open MPI repo revision: v4.0.3\n   Open MPI release date: Mar 03, 2020\n                Open RTE: 4.0.3\n  Open RTE repo revision: v4.0.3\n   Open RTE release date: Mar 03, 2020\n                    OPAL: 4.0.3\n      OPAL repo revision: v4.0.3\n       OPAL release date: Mar 03, 2020\n</code></pre>"},{"location":"how-to/software/openmpi/#building-the-example","title":"Building the example","text":"<p>Next, clone the OpenMPI example project from Gitlab.</p> <pre><code>compute122:~$ git clone git@github.com:bihealth/bih-cluster-openmpi-example.git\ncompute122:~$ cd bih-cluster-openmpi-example/src\n</code></pre> <p><code>Makefile</code></p> <pre><code>.PHONY: default clean\n\n# configure compilers\nCC=mpicc\nCXX=mpicxx\n# configure flags\nCCFLAGS += $(shell mpicc --showme:compile)\nLDFLAGS += $(shell mpicc --showme:link)\n\ndefault: openmpi_example\n\nopenmpi_example: openmpi_example.o\n\nclean:\n    rm -f openmpi_example.o openmpi_example\n</code></pre> <p><code>openmpi_example.c</code></p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;mpi.h&gt;\n\nint main(int argc, char** argv) {\n    // Initialize the MPI environment\n    MPI_Init(NULL, NULL);\n\n    // Get the number of processes\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &amp;world_size);\n\n    // Get the rank of the process\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &amp;world_rank);\n\n    // Get the name of the processor\n    char processor_name[MPI_MAX_PROCESSOR_NAME];\n    int name_len;\n    MPI_Get_processor_name(processor_name, &amp;name_len);\n\n    // Print off a hello world message\n    printf(\"Hello world from processor %s, rank %d\"\n           \" out of %d processors\\n\",\n           processor_name, world_rank, world_size);\n\n    // Finalize the MPI environment.\n    MPI_Finalize();\n\n    return 0;\n}\n</code></pre> <p><code>run_mpi.sh</code></p> <pre><code>#!/bin/bash\n\n# Example job script for (single-threaded) MPI programs.\n\n# Generic arguments\n\n# Job name\n#SBATCH --job-name openmpi_example\n# Maximal running time of 10 min\n#SBATCH --time 00:10:00\n# Allocate 1GB of memory per node\n#SBATCH --mem 1G\n# Write logs to directory \"slurm_log\"\n#SBATCH -o slurm_log/slurm-%x-%J.log\n\n# MPI-specific parameters\n\n# Run 64 tasks (threads/on virtual cores)\n#SBATCH --nodes 64\n\n# Make sure to source the profile.d file (not available on head nodes).\n/etc/profile.d/modules.sh\n\n# Load the OpenMPI environment module to get the runtime environment.\nmodule load openmpi/3.1.0-0\n\n# Launch the program.\nmpirun -np 64 ./openmpi_example\n</code></pre> <p>The next step is building the software</p> <pre><code>med0127:~$ make\nmpicc    -c -o openmpi_example.o openmpi_example.c\nmpicc -pthread -Wl,-rpath -Wl,/opt/local/openmpi-4.0.3-0/lib -Wl,--enable-new-dtags -L/opt/local/openmpi-4.0.3-0/lib -lmpi  openmpi_example.o   -o openmpi_example\nmed0127:~$ ls -lh\ntotal 259K\n-rw-rw---- 1 holtgrem_c hpc-ag-cubi  287 Apr  7 23:29 Makefile\n-rwxrwx--- 1 holtgrem_c hpc-ag-cubi 8.5K Apr  8 00:15 openmpi_example\n-rw-rw---- 1 holtgrem_c hpc-ag-cubi  760 Apr  7 23:29 openmpi_example.c\n-rw-rw---- 1 holtgrem_c hpc-ag-cubi 2.1K Apr  8 00:15 openmpi_example.o\n-rwxrwx--- 1 holtgrem_c hpc-ag-cubi 1.3K Apr  7 23:29 run_hybrid.sh\n-rwxrwx--- 1 holtgrem_c hpc-ag-cubi  663 Apr  7 23:35 run_mpi.sh\ndrwxrwx--- 2 holtgrem_c hpc-ag-cubi 4.0K Apr  7 23:29 sge_log\n</code></pre> <p>The software will run outside of the MPI environment -- but in a single process only, of course.</p> <pre><code>med0127:~$ ./openmpi_example\nHello world from processor med0127, rank 0 out of 1 processors\n</code></pre>"},{"location":"how-to/software/openmpi/#running-openmpi-software","title":"Running OpenMPI Software","text":"<p>All of the arguments are already in the <code>run_mpi.sh</code> script.</p> <pre><code>med01247:~# sbatch run_mpi.sh\n</code></pre> <p>Explanation of the OpenMPI-specific arguments</p> <ul> <li><code>--ntasks 64</code>: run 64 processes in the MPI environment.</li> </ul> <p>Let's look at the slurm log file, e.g., in <code>slurm_log/slurm-openmpi_example-3181.log</code>.</p> <pre><code>med0124:~$  cat slurm_log/slurm-openmpi_example-*.log\nHello world from processor med0133, rank 6 out of 64 processors\nHello world from processor med0133, rank 25 out of 64 processors\nHello world from processor med0133, rank 1 out of 64 processors\nHello world from processor med0133, rank 2 out of 64 processors\nHello world from processor med0133, rank 3 out of 64 processors\nHello world from processor med0133, rank 7 out of 64 processors\nHello world from processor med0133, rank 9 out of 64 processors\nHello world from processor med0133, rank 12 out of 64 processors\nHello world from processor med0133, rank 13 out of 64 processors\nHello world from processor med0133, rank 15 out of 64 processors\nHello world from processor med0133, rank 16 out of 64 processors\nHello world from processor med0133, rank 17 out of 64 processors\nHello world from processor med0133, rank 18 out of 64 processors\nHello world from processor med0133, rank 23 out of 64 processors\nHello world from processor med0133, rank 24 out of 64 processors\nHello world from processor med0133, rank 26 out of 64 processors\nHello world from processor med0133, rank 27 out of 64 processors\nHello world from processor med0133, rank 31 out of 64 processors\nHello world from processor med0133, rank 0 out of 64 processors\nHello world from processor med0133, rank 4 out of 64 processors\nHello world from processor med0133, rank 5 out of 64 processors\nHello world from processor med0133, rank 8 out of 64 processors\nHello world from processor med0133, rank 10 out of 64 processors\nHello world from processor med0133, rank 11 out of 64 processors\nHello world from processor med0133, rank 14 out of 64 processors\nHello world from processor med0133, rank 19 out of 64 processors\nHello world from processor med0133, rank 20 out of 64 processors\nHello world from processor med0133, rank 21 out of 64 processors\nHello world from processor med0133, rank 22 out of 64 processors\nHello world from processor med0133, rank 28 out of 64 processors\nHello world from processor med0133, rank 29 out of 64 processors\nHello world from processor med0133, rank 30 out of 64 processors\nHello world from processor med0134, rank 32 out of 64 processors\nHello world from processor med0134, rank 33 out of 64 processors\nHello world from processor med0134, rank 34 out of 64 processors\nHello world from processor med0134, rank 38 out of 64 processors\nHello world from processor med0134, rank 39 out of 64 processors\nHello world from processor med0134, rank 42 out of 64 processors\nHello world from processor med0134, rank 44 out of 64 processors\nHello world from processor med0134, rank 45 out of 64 processors\nHello world from processor med0134, rank 46 out of 64 processors\nHello world from processor med0134, rank 53 out of 64 processors\nHello world from processor med0134, rank 54 out of 64 processors\nHello world from processor med0134, rank 55 out of 64 processors\nHello world from processor med0134, rank 60 out of 64 processors\nHello world from processor med0134, rank 62 out of 64 processors\nHello world from processor med0134, rank 35 out of 64 processors\nHello world from processor med0134, rank 36 out of 64 processors\nHello world from processor med0134, rank 37 out of 64 processors\nHello world from processor med0134, rank 40 out of 64 processors\nHello world from processor med0134, rank 41 out of 64 processors\nHello world from processor med0134, rank 43 out of 64 processors\nHello world from processor med0134, rank 47 out of 64 processors\nHello world from processor med0134, rank 48 out of 64 processors\nHello world from processor med0134, rank 49 out of 64 processors\nHello world from processor med0134, rank 50 out of 64 processors\nHello world from processor med0134, rank 51 out of 64 processors\nHello world from processor med0134, rank 52 out of 64 processors\nHello world from processor med0134, rank 56 out of 64 processors\nHello world from processor med0134, rank 57 out of 64 processors\nHello world from processor med0134, rank 59 out of 64 processors\nHello world from processor med0134, rank 61 out of 64 processors\nHello world from processor med0134, rank 63 out of 64 processors\nHello world from processor med0134, rank 58 out of 64 processors\n</code></pre>"},{"location":"how-to/software/openmpi/#running-hybrid-software-mpimultithreading","title":"Running Hybrid Software (MPI+Multithreading)","text":"<p>In some cases, you want to mix multithreading (e.g., via OpenMP) with MPI to run one process with multiple threads that then can communicate via shared memory. Note that OpenMPI will let processes on the same node communicate via shared memory anyway, so this might not be necessary in all cases.</p> <p>The file <code>run_hybrid.sh</code> shows how to run an MPI job with 8 threads each.</p> <p>Note well that memory is allocated on a per-slot (thus per-thread) base!</p> <p><code>run_hybrid.sh</code></p> <pre><code>#!/bin/bash\n\n# Example job script for multi-threaded MPI programs, sometimes\n# called \"hybrid\" MPI computing.\n\n# Generic arguments\n\n# Job name\n#SBATCH --job-name openmpi_example\n# Maximal running time of 10 min\n#SBATCH --time 00:10:00\n# Allocate 1GB of memory per node\n#SBATCH --mem 1G\n# Write logs to directory \"slurm_log\"\n#SBATCH -o slurm_log/slurm-%x-%J.log\n\n# MPI-specific parameters\n\n# Run 8 tasks (threads/on virtual cores)\n#SBATCH --ntasks 8\n# Allocate 4 CPUs per task (cores/threads)\n#SBATCH --cpus-per-task 4\n\n# Make sure to source the profile.d file (not available on head nodes).\nsource /etc/profile.d/modules.sh\n\n# Load the OpenMPI environment module to get the runtime environment.\nmodule load openmpi/4.0.3-0\n\n# Launch the program.\nmpirun -n 8 ./openmpi_example\n</code></pre> <p>We changed the following</p> <ul> <li>run 8 tasks (\"processes\")</li> <li>allocate 4 threads each</li> </ul> <p>Let's look at the log output:</p> <pre><code># cat slurm_log/slurm-openmpi_example-3193.log\nHello world from processor med0133, rank 1 out of 8 processors\nHello world from processor med0133, rank 3 out of 8 processors\nHello world from processor med0133, rank 2 out of 8 processors\nHello world from processor med0133, rank 6 out of 8 processors\nHello world from processor med0133, rank 0 out of 8 processors\nHello world from processor med0133, rank 4 out of 8 processors\nHello world from processor med0133, rank 5 out of 8 processors\nHello world from processor med0133, rank 7 out of 8 processors\n</code></pre> <p>Each process can now launch 4 threads (e.g., by defining <code>export OMP_NUM_THREADS=4</code> before the program call).</p>"},{"location":"how-to/software/scientific-software/","title":"How-To: Install Custom Scientific Software","text":"<p>This page gives an end-to-end example how to build and install Gromacs as an example for managing complex scientific software installs in user land. You don't have to learn or understand the specifics of Gromacs. We use it as an example as there are some actual users on the BIH cluster. However, installing it is out of scope of BIH HPC administration.</p> <p>Gromacs is a good example as it is a sufficiently complex piece of software. Quite some configuration is done on the command line and there is no current software package of it in the common RPM repositories. However, it is quite well-documented and easy to install for scientific software so there is a lot to be learned.</p>"},{"location":"how-to/software/scientific-software/#related-documents","title":"Related Documents","text":"<ul> <li>How-To: Build and Run OpenMPI Programs</li> </ul>"},{"location":"how-to/software/scientific-software/#steps-for-installing-scientific-software","title":"Steps for Installing Scientific Software","text":"<p>We will perform the following step:</p> <ol> <li>Download and extract the source of the software</li> <li>Configure the software (i.e., create the actual build system <code>Makefile</code>s)</li> <li>Compile the software</li> <li>Install the software</li> <li>Create environment module files so the software is easy to use</li> </ol> <p>Many scientific software packages will have more dependencies. If the dependencies are available as CentOS Core or EPEL packages (such as zlib), HPC IT administration can install them. However, otherwise you will have to install them on their own.</p> <p>Warning</p> <p>Do not perform the compilation on the login nodes but go to a compute node instead.</p>"},{"location":"how-to/software/scientific-software/#downloading-and-extracting-software","title":"Downloading and Extracting Software","text":"<p>This is best done in your <code>scratch</code> directory as we don't have to keep these files around for long. Note that the files in your <code>scratch</code> directory will automatically be removed after 2 weeks. You can also use your <code>work</code> directory here.</p> <pre><code>hpc-login-1:~$ srun --pty bash -i\n$ mkdir $HOME/scratch/gromacs-install\n$ cd $HOME/scratch/gromacs-install\n$ wget http://ftp.gromacs.org/pub/gromacs/gromacs-2018.3.tar.gz\n$ tar xf gromacs-2018.3.tar.gz\n$ ls gromacs-2018.3\nadmin    cmake           COPYING          CTestConfig.cmake  INSTALL  scripts  src\nAUTHORS  CMakeLists.txt  CPackInit.cmake  docs               README   share    tests\n</code></pre> <p>So far so good!</p>"},{"location":"how-to/software/scientific-software/#perform-the-configure-step","title":"Perform the Configure Step","text":"<p>This is the most critical step. Most scientific C/C++ software has a build step and allows for, e.g., disabling and enabling features or setting installation paths. Here, you can configure the software depending on your needs and environment. Also, it is the easiest step to mess up.</p> <p>Gromac's documentation is actually quite good but the author had problems to follow it to the letter. Gromacs recommends to create an MPI and a non-MPI build but the precise way did not work. This installation creates two flavours for Gromacs 2018.3, but in a different way than the Gromacs documentation proposes.</p> <p>First, here is how to configure the non-MPI flavour Gromacs wants a modern compiler, so we load <code>gcc</code>. We will need to note down the precise version we used so later we can load it for running Gromacs with the appropriate libraries. We will install gromacs into <code>$HOME/work/software</code>, which is appropriate for user-installed software, but it could also go into a group or project directory. Note that we install the software into your work directory as software installations are quite large and might go above your home quota. Also, software installations are usually not precious enough to waste resources on snapshots and backups. Also that we force Gromacs to use <code>AVX_256</code> for SIMD support (Intel sandy bridge architecture) to not get unsupported CPU instruction errors.</p> <pre><code>$ module load gcc/7.2.0-0 cmake/3.11.0-0\n$ module list\nCurrently Loaded Modulefiles:\n  1) gcc/7.2.0-0      2) cmake/3.11.0-0\n$ mkdir gromacs-2018.3-build-nompi\n$ cd gromacs-2018.3-build-nompi\n$ cmake ../gromacs-2018.3 \\\n    -DGMX_BUILD_OWN_FFTW=ON \\\n    -DGMX_MPI=OFF \\\n    -DGMX_SIMD=AVX_256 \\\n    -DCMAKE_INSTALL_PREFIX=$HOME/work/software/gromacs/2018.3\n</code></pre> <p>Second, here is how to configure the MPI flavour. Note that we are also enabling the <code>openmpi</code> module. We will also need the precise version here so we can later load the correct libraries. Note that we install the software into the directory <code>gromacs-mpi</code> but switch off shared library building as recommended by the Gromacs documentation.</p> <pre><code>$ module load openmpi/3.1.0-0\n$ module list\nCurrently Loaded Modulefiles:\n  1) gcc/7.2.0-0       2) cmake/3.11.0-0    3) openmpi/4.0.3-0\n$ mkdir gromacs-2018.3-build-mpi\n$ cd gromacs-2018.3-build-mpi\n$ cmake ../gromacs-2018.3 \\\n    -DGMX_BUILD_OWN_FFTW=ON \\\n    -DGMX_MPI=ON \\\n    -DGMX_SIMD=AVX_256 \\\n    -DCMAKE_INSTALL_PREFIX=$HOME/work/software/gromacs-mpi/2018.3 \\\n    -DCMAKE_C_COMPILER=$(which mpicc) \\\n    -DCMAKE_CXX_COMPILER=$(which mpicxx) \\\n    -DBUILD_SHARED_LIBS=off\n</code></pre>"},{"location":"how-to/software/scientific-software/#perform-the-build-and-install-steps","title":"Perform the Build and Install Steps","text":"<p>This is simple, using <code>-j 32</code> allows us to build with 32 threads. If something goes wrong: meh, the \"joys\" of compilling C software.</p> <p>Getting Support for Building Software</p> <p>BIH HPC IT cannot provide support for compiling scientific software. Please contact the appropriate mailing lists or forums for your scientific software. You should only contact the BIH HPC IT helpdesk only if you are sure that the problem is with the BIH HPC cluster. You should try to resolve the issue on your own and with the developers of the software that you are trying to build/use.</p> <p>For the no-MPI version:</p> <pre><code>$ cd ../cd gromacs-2018.3-build-nompi\n$ make -j 32\n[...]\n$ make install\n</code></pre> <p>For the MPI version:</p> <pre><code>$ cd ../cd gromacs-2018.3-build-mpi\n$ make -j 32\n[...]\n$ make install\n</code></pre>"},{"location":"how-to/software/scientific-software/#create-environment-modules-files","title":"Create Environment Modules Files","text":"<p>For Gromacs 2018.3, the following is appropriate. You should be able to use this as a template for your environment module files:</p> <pre><code>$ mkdir -p $HOME/local/modules/gromacs\n$ cat &gt;$HOME/local/modules/gromacs/2018.3 &lt;&lt;\"EOF\"\n#%Module\nproc ModulesHelp { } {\n    puts stderr {\n      Gromacs molecular simulation toolkit (non-MPI version)\n\n      - http://www.gromacs.org\n    }\n}\n\nmodule-whatis {Gromacs molecular simulation toolkit (non-MPI)}\n\nset root /data/cephfs-1/home/users/YOURUSER/work/software/gromacs-mpi/2018.3\n\nprereq gcc/7.2.0-0\n\nconflict gromacs\nconflict gromacs-mpi\n\nprepend-path    LD_LIBRARY_PATH         $root/lib64\nprepend-path    LIBRARY_PATH            $root/lib64\nprepend-path    MANPATH                 $root/share/man\nprepend-path    PATH                    $root/bin\nsetenv          GMXRC                   $root/bin/GMXRC\nEOF\n</code></pre> <pre><code>$ mkdir -p $HOME/local/modules/gromacs-mpi\n$ cat &gt;$HOME/local/modules/gromacs-mpi/2018.3 &lt;&lt;\"EOF\"\n#%Module\nproc ModulesHelp { } {\n    puts stderr {\n      Gromacs molecular simulation toolkit (MPI version)\n\n      - http://www.gromacs.org\n    }\n}\n\nmodule-whatis {Gromacs molecular simulation toolkit (MPI)}\n\nset root /data/cephfs-1/home/users/YOURUSER/work/software/gromacs-mpi/2018.3\n\nprereq openmpi/4.0.3-0\nprereq gcc/7.2.0-0\n\nconflict gromacs\nconflict gromacs-mpi\n\nprepend-path    LD_LIBRARY_PATH         $root/lib64\nprepend-path    LIBRARY_PATH            $root/lib64\nprepend-path    MANPATH                 $root/share/man\nprepend-path    PATH                    $root/bin\nsetenv          GMXRC                   $root/bin/GMXRC\nEOF\n</code></pre> <p>With the next command, make your local modules files path known to the environemtn modules system.</p> <pre><code>$ module use $HOME/local/modules\n</code></pre> <p>You can verify the result:</p> <pre><code>$ module avail\n\n------------------ /data/cephfs-1/home/users/YOURUSER/local/modules ------------------\ngromacs/2018.3     gromacs-mpi/2018.3\n\n-------------------- /usr/share/Modules/modulefiles --------------------\ndot         module-info null\nmodule-git  modules     use.own\n\n-------------------------- /opt/local/modules --------------------------\ncmake/3.11.0-0  llvm/6.0.0-0    openmpi/3.1.0-0\ngcc/7.2.0-0     matlab/r2016b-0 openmpi/4.0.3-0\n</code></pre>"},{"location":"how-to/software/scientific-software/#interlude-convenient-module-use","title":"Interlude: Convenient <code>module use</code>","text":"<p>You can add this to your <code>~/.bashrc</code> file to always execute the <code>module use</code> after login. Note that <code>module</code> is not available on the login or transfer nodes, the following should work fine:</p> <pre><code>$ cat &gt;&gt;~/.bashrc &lt;&lt;\"EOF\"\ncase \"${HOSTNAME}\" in\n  login-*|transfer-*)\n    ;;\n  *)\n    module use $HOME/local/modules\n    ;;\nesac\nEOF\n</code></pre> <p>Note that the paths chosen above are sensible but arbitrary. You can install any software anywhere you have permission to -- somewhere in your user and group home, maybe a project home makes most sense on the BIH HPC, no root permissions required. You can also place the module files anywhere, as long as the <code>module use</code> line is appropriate.</p> <p>As a best practice, you could use the following location:</p> <ul> <li>User-specific installation:<ul> <li><code>$HOME/work/software</code> as a root to install software to</li> <li><code>$HOME/work/software/$PKG/$VERSION</code> for installing a given software package in a given version</li> <li><code>$HOME/work/software/modules</code> as the root for modules to install</li> <li><code>$HOME/work/software/$PKG/$VERSION</code> for the module file to load the software in a given version</li> <li><code>$HOME/work/software/modules.sh</code> as a Bash script to contain the line <code>module use $HOME/work/software/modules</code></li> </ul> </li> <li>Group/project specific installation for a shared setup.   Don't forget to give the group and yourself read permission only so you don't accidentally damage files after instalation (<code>chmod ug=rX,o= $GROUP/work/software</code>, the upper case <code>X</code> is essential to only set <code>+x</code> on directories and not files):<ul> <li><code>$GROUP/work/software</code> as a root to install software to</li> <li><code>$GROUP/work/software/$PKG/$VERSION</code> for installing a given software package in a given version</li> <li><code>$GROUP/work/software/modules</code> as the root for modules to install</li> <li><code>$GROUP/work/software/$PKG/$VERSION</code> for the module file to load the software in a given version</li> <li><code>$GROUP/work/software/modules.sh</code> as a Bash script to contain the <code>case</code> Bash snippet from above but with <code>module use $GROUP/work/software/modules</code></li> <li>This setup allows multiple users to provide software installations and share it with others.</li> </ul> </li> </ul>"},{"location":"how-to/software/scientific-software/#going-on-with-gromacs","title":"Going on with Gromacs","text":"<p>Every time you want to use Gromacs, you can now do</p> <pre><code>$ module load gcc/7.2.0-0 gromacs/2018.3\n</code></pre> <p>or, if you want to have the MPI version:</p> <pre><code>$ module load gcc/7.2.0-0 openmpi/4.0.3-0 gromacs-mpi/2018.3\n</code></pre>"},{"location":"how-to/software/scientific-software/#launching-gromacs","title":"Launching Gromacs","text":"<p>Something along the lines of the following job script should be appropriate. See How-To: Build Run OpenMPI Programs for more information.</p> <pre><code>#!/bin/bash\n\n# Example job script for (single-threaded) MPI programs.\n\n# Generic arguments\n\n# Job name\n#SBATCH --job-name gromacs\n# Maximal running time of 10 min\n#SBATCH --time 00:10:00\n# Allocate 1GB of memory per CPU\n#SBATCH --mem 1G\n# Write logs to directory \"slurm_log/&lt;name&gt;-&lt;job id&gt;.log\" (dir must exist)\n#SBATCH --output slurm_log/%x-%J.log\n\n# MPI-specific parameters\n\n# Launch on 8 nodes (== 8 tasks)\n#SBATCH --ntasks 8\n# Allocate 4 CPUs per task (== per node)\n#SBATCH --cpus-per-task 4\n\n# Load the OpenMPI and GCC environment module to get the runtime environment.\nmodule load gcc/4.7.0-0\nmodule load openmpi/4.0.3-0\n\n# Make custom environment modules known. Alternative, you can \"module use\"\n# them in the session you use for submitting the job.\nmodule use $HOME/local/modules\nmodule load gromacs-mpi/2018.3\n\n# Launch the program on 8 nodes and tell Gromacs to use 4 threads for each\n# invocation.\nexport OMP_NUM_THREADS=4\nmpirun -n 8 gmx_mpi mdrun -deffnm npt_1000\n</code></pre> <pre><code>$ mkdir slurm_log\n$ sbatch job_script.sh\nSubmitted batch job 3229\n</code></pre>"},{"location":"how-to/software/tensorflow/","title":"How-To: Setup TensorFlow","text":"<p>TensorFlow is a package for deep learning with optional support for GPUs. You can find the original TensorFlow installation instructions here.</p> <p>This article describes how to set up TensorFlow with GPU support using Conda. This how-to assumes that you have just connected to a GPU node via <code>srun --mem=10g --partition=gpu --gres=gpu:tesla:1 --pty bash -i</code> (for Tesla V100 GPUs, for A400 GPUs use <code>--gres=gpu:a40:1</code>). Note that you will need to allocate \"enough\" memory, otherwise your python session will be <code>Killed</code> because of too little memory. You should read the How-To: Connect to GPU Nodes tutorial on an explanation of how to do this.</p> <p>This tutorial assumes, that conda has been set up as described in [Software Management]((../../best-practice/software-installation-with-conda.md).</p>"},{"location":"how-to/software/tensorflow/#create-conda-environment","title":"Create conda environment","text":"<p>We recommend that you install mamba first with <code>conda install -y mamba</code> and use this C++ reimplementation of the <code>conda command</code> as follows.</p> <pre><code>$ conda create -y -n python-tf tensorflow-gpu\n$ conda activate python-tf\n</code></pre> <p>Let us verify that we have Python and TensorFlow installed. You might get different versions you could pin the version on installing with `conda create -y -n python-tf python==3.9.10 tensorflow-gpu==2.6.2</p> <pre><code>$ python --version\nPython 3.9.10\n$ python -c 'import tensorflow; print(tensorflow.__version__)'\n2.6.2\n</code></pre> <p>We thus end up with an installation of Python 3.9.10 with tensorflow 2.6.2.</p>"},{"location":"how-to/software/tensorflow/#run-tensorflow-example","title":"Run TensorFlow Example","text":"<p>Let us now see whether TensorFlow has recognized our GPU correctly.</p> <pre><code>$ python\n&gt;&gt;&gt; import tensorflow as tf\n&gt;&gt;&gt; print(\"TensorFlow version:\", tf.__version__)\nTensorFlow version: 2.6.2\n&gt;&gt;&gt; print(tf.config.list_physical_devices())\n[PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU'), PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n</code></pre> <p>Yay, we can proceed to run the Quickstart Tutorial.</p> <pre><code>&gt;&gt;&gt; mnist = tf.keras.datasets.mnist\n&gt;&gt;&gt; (x_train, y_train), (x_test, y_test) = mnist.load_data()\n&gt;&gt;&gt; x_train, x_test = x_train / 255.0, x_test / 255.0\n&gt;&gt;&gt; model = tf.keras.models.Sequential([\n...   tf.keras.layers.Flatten(input_shape=(28, 28)),\n...   tf.keras.layers.Dense(128, activation='relu'),\n...   tf.keras.layers.Dropout(0.2),\n...   tf.keras.layers.Dense(10)\n... ])\n&gt;&gt;&gt; predictions = model(x_train[:1]).numpy()\n&gt;&gt;&gt; predictions\narray([[-0.50569224,  0.26386747,  0.43226188,  0.61226094,  0.09630793,\n         0.34400576,  0.9819117 , -0.3693726 ,  0.5221357 ,  0.3323232 ]],\n      dtype=float32)\n&gt;&gt;&gt; tf.nn.softmax(predictions).numpy()\narray([[0.04234391, 0.09141268, 0.10817807, 0.12951255, 0.07731011,\n        0.09903987, 0.18743432, 0.04852816, 0.11835073, 0.09788957]],\n      dtype=float32)\n&gt;&gt;&gt; loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n&gt;&gt;&gt; loss_fn(y_train[:1], predictions).numpy()\n2.3122327\n&gt;&gt;&gt; model.compile(optimizer='adam',\n...               loss=loss_fn,\n...               metrics=['accuracy'])\n&gt;&gt;&gt; model.fit(x_train, y_train, epochs=5)\n2022-03-09 17:53:47.237997: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\nEpoch 1/5\n1875/1875 [==============================] - 3s 1ms/step - loss: 0.2918 - accuracy: 0.9151\nEpoch 2/5\n1875/1875 [==============================] - 3s 1ms/step - loss: 0.1444 - accuracy: 0.9561\nEpoch 3/5\n1875/1875 [==============================] - 3s 1ms/step - loss: 0.1082 - accuracy: 0.9674\nEpoch 4/5\n1875/1875 [==============================] - 3s 1ms/step - loss: 0.0898 - accuracy: 0.9720\nEpoch 5/5\n1875/1875 [==============================] - 3s 1ms/step - loss: 0.0773 - accuracy: 0.9756\n&lt;keras.callbacks.History object at 0x154e81360190&gt;\n&gt;&gt;&gt; model.evaluate(x_test,  y_test, verbose=2)\n313/313 - 0s - loss: 0.0713 - accuracy: 0.9785\n[0.0713074803352356, 0.9785000085830688]\n&gt;&gt;&gt; probability_model = tf.keras.Sequential([\n...   model,\n...   tf.keras.layers.Softmax()\n... ])\n&gt;&gt;&gt; probability_model(x_test[:5])\n&lt;tf.Tensor: shape=(5, 10), dtype=float32, numpy=\narray([[1.2339272e-06, 6.5599060e-10, 1.0560590e-06, 5.9356184e-06,\n        5.3691075e-12, 1.4447859e-07, 5.4218874e-13, 9.9996936e-01,\n        1.0347234e-07, 2.2147648e-05],\n       [2.9887938e-06, 6.8461006e-05, 9.9991941e-01, 7.2003731e-06,\n        2.9751782e-13, 8.2818183e-08, 1.4307782e-06, 2.3203837e-13,\n        4.7433215e-07, 2.9504194e-14],\n       [1.8058477e-06, 9.9928612e-01, 7.8716243e-05, 3.9140195e-06,\n        3.0842333e-05, 9.4537208e-06, 2.2774333e-05, 4.5549971e-04,\n        1.1015874e-04, 6.9138093e-07],\n       [9.9978787e-01, 3.0206781e-08, 2.8528208e-05, 8.5581682e-08,\n        1.3851340e-07, 2.3634559e-06, 1.8480707e-05, 1.0153375e-04,\n        1.1583331e-07, 6.0887167e-05],\n       [6.4914235e-07, 2.5808356e-08, 1.8225538e-06, 2.3215563e-09,\n        9.9588013e-01, 4.6049720e-08, 3.8903639e-07, 2.9772724e-05,\n        4.3141077e-07, 4.0867776e-03]], dtype=float32)&gt;\n&gt;&gt;&gt; exit()\n</code></pre>"},{"location":"how-to/software/tensorflow/#writing-tensorflow-slurm-jobs","title":"Writing TensorFlow Slurm Jobs","text":"<p>Writing Slurm jobs using TensorFlow is as easy as creating the following scripts.</p> <p><code>tf_script.py</code></p> <pre><code>#/usr/bin/env python\n\nimport tensorflow as tf\nprint(\"TensorFlow version:\", tf.__version__)\nprint(tf.config.list_physical_devices())\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10)\n])\n\npredictions = model(x_train[:1]).numpy()\nprint(predictions)\n\nprint(tf.nn.softmax(predictions).numpy())\n\n# ... and so on ;-)\n</code></pre> <p><code>tf_job.sh</code></p> <pre><code>#!/usr/bin/bash\n\n#SBATCH --job-name=tf-job\n#SBATCH --mem=10g\n#SBATCH --partition=gpu\n#SBATCH --gres=gpu:tesla:1\n\nsource $HOME/work/miniconda3/bin/activate\nconda activate python-tf\n\npython tf_script.py &amp;&gt;tf-out.txt\n</code></pre> <p>And then calling</p> <pre><code>$ sbatch tf_job.sh\n</code></pre> <p>You can find the reuslts in <code>tf-out.txt</code> after completion.</p> <pre><code>$ cat tf-out.txt \n2022-03-09 18:05:54.628846: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX AVX2 AVX512F FMA\nTo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n2022-03-09 18:05:56.999848: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30988 MB memory:  -&gt; device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:18:00.0, compute capability: 7.0\nTensorFlow version: 2.6.2\n[PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU'), PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n[[-0.07757086  0.04676083  0.9420195  -0.59902835 -0.26286742 -0.392514\n   0.3231195  -0.17169198  0.3480805   0.37013203]]\n[[0.07963609 0.09017922 0.22075593 0.04727634 0.06616627 0.05812084\n  0.11888511 0.07248258 0.12188996 0.12460768]]\n</code></pre>"},{"location":"hpc-tutorial/episode-0/","title":"First Steps: Episode 0","text":"Episode Topic 0 How can I install the tools? 2 How can I distribute my jobs on the cluster (Slurm)?"},{"location":"hpc-tutorial/episode-0/#prerequisites","title":"Prerequisites","text":"<p>This tutorial assumes familiarity with Linux/Unix operating systems. It also assumes that you have already connected to the cluster. We have collected some links to tutorials and manuals on the internet.</p>"},{"location":"hpc-tutorial/episode-0/#legend","title":"Legend","text":"<p>Before we start with our first steps tutorial, we would like to introduce the following convention that we use throughout the series:</p> <pre><code>$ Commands are prefixed with a little dollar sign\n</code></pre> <p>While file paths are highlighted like this: <code>/gpfsnyu/home/users</code>.</p>"},{"location":"hpc-tutorial/episode-0/#instant-gratification","title":"Instant Gratification","text":"<p>After connecting to the cluster, you are located on a login node. To get to your first compute node, type <code>srun --time 1-00 --mem=8G --cpus-per-task=8 --pty bash -i</code> which will launch an interactive Bash session on a free remote node running up to 1 day, enabling you to use 8 cores and 8 Gb memory. Typing <code>exit</code> will you bring back to the login node.</p> <pre><code>$ srun -p long --time 1-00 --mem=8G --cpus-per-task=8 --pty bash -i\n$ exit\n$\n</code></pre> <p>See? That was easy!</p>"},{"location":"hpc-tutorial/episode-0/#preparation","title":"Preparation","text":"<p>In preparation for our first steps tutorial series, we would like you to install the software for this tutorial. In general the users on the cluster will manage their own software with the help of conda. If you haven't done so so far, please follow the instructions in using conda first. The only premise is that you are able to log into the cluster. Make also sure that you are logged in to a computation node using <code>srun -p debug --time 1-00 --mem=4G --cpus-per-task=1 --pty bash -i</code>.</p> <p>Now we will create a new environment, so as to not interfere with your current or planned software stack, and install into it all the software that we need during the tutorial. Run the following commands:</p> <pre><code>$ conda create -n first-steps python=3 snakemake bwa delly samtools gatk4\n$ conda activate first-steps\n(first-steps) $\n</code></pre>"},{"location":"hpc-tutorial/episode-2/","title":"First Steps: Episode 2","text":"Episode Topic 0 How can I install the tools? 2 How can I distribute my jobs on the cluster (Slurm)? <p>Welcome to the second episode of our tutorial series!</p> <p>Once you are logged in to the cluster, you have the possibility to distribute your jobs to all the nodes that are available. But how can you do this easily? The key command to this magic is <code>sbatch</code>. This tutorial will show you how you can use this efficiently.</p>"},{"location":"hpc-tutorial/episode-2/#the-sbatch-command","title":"The <code>sbatch</code> Command","text":"<p>So what is <code>sbatch</code> doing for you?</p> <p>You use the <code>sbatch</code> command in front of the script you actually want to run. <code>sbatch</code> then puts your job into the job queue. The job scheduler looks at the current status of the whole system and will assign the first job in the queue to a node that is free in terms of computational load. If all machines are busy, yours will wait. But your job will sooner or later get assigned to a free node.</p> <p>We strongly recommend using this process for starting your computationally intensive tasks because you will get the best performance for your job and the whole system won't be disturbed by jobs that are locally blocking nodes. Thus, everybody using the cluster benefits.</p> <p>You may have noticed that you run <code>sbatch</code> with a script, not with regular commands. The reason is that <code>sbatch</code> only accepts bash scripts. If you give <code>sbatch</code> a normal shell command or binary, it won't work. This means that we have to put the command(s) we want to use in a bash script.</p> <p>The content of the example file:</p> <pre><code>#!/bin/bash\n\n# Set a name for the job (-J or --job-name).\n#SBATCH --job-name=tutorial\n\n# Set the file to write the stdout and stderr to (if -e is not set; -o or --output).\n#SBATCH --output=logs/%x-%j.log\n\n# Set the number of cores (-c or --cpus-per-task).\n#SBATCH --cpus-per-task=8\n\n# Force allocation of the two cores on ONE node.\n#SBATCH --nodes=1\n\n# Set the total memory. Units can be given in T|G|M|K.\n#SBATCH --mem=8G\n\n# Optionally, set the partition to be used (-p or --partition).\n#SBATCH --partition=medium\n\n# Set the expected running time of your job (-t or --time).\n# Formats are MM:SS, HH:MM:SS, Days-HH, Days-HH:MM, Days-HH:MM:SS\n#SBATCH --time=30:00\n\nexport TMPDIR=/data/cephfs-1/home/users/${USER}/scratch/tmp\nmkdir -p ${TMPDIR}\n</code></pre> <p>The lines starting with <code>#SBATCH</code> are actually setting parameters for a <code>sbatch</code> command, so <code>#SBATCH --job-name=tutorial</code> is equal to <code>sbatch --job-name=tutorial</code>. Slurm will create a log file with a file name composed of the job name (<code>%x</code>) and the job ID (<code>%j</code>), e.g. <code>logs/tutorial-XXXX.log</code>. It will not automatically create the <code>logs</code> directory, we need to do this manually first. Here, we emphasize the importance of the log files! They are the first place to look if anything goes wrong.</p> <p>To start now with our tutorial, create a new tutorial directory with a log directory, e.g.,</p> <pre><code>(first-steps) $ mkdir -p /gpfsnyu/home/users/$USER/work/tutorial/episode2/logs\n</code></pre> <p>and copy the wrapper script to this directory:</p> <pre><code>(first-steps) $ pushd /gpfsnyu/home/users/$USER/work/tutorial/episode2\n(first-steps) $ cp /gpfsnyu/spack/share/submit_job.sh .\n(first-steps) $ chmod u+w submit_job.sh\n</code></pre> <p>Now open this file and copy the same commands we executed in the last tutorial to this file.</p> <p>To keep it simple, we will put everything into one script. This is perfectly fine because the alignment and indexing are sequential. But there are two steps that could be run in parallel, namely the variant calling, because they don't depend on each other. We will learn how to do that in a later tutorial. Your file should look something like this:</p> <pre><code>#!/bin/bash\n\n# Set a name for the job (-J or --job-name).\n#SBATCH --job-name=tutorial\n\n# Set the file to write the stdout and stderr to (if -e is not set; -o or --output).\n#SBATCH --output=logs/%x-%j.log\n\n# Set the number of cores (-c or --cpus-per-task).\n#SBATCH --cpus-per-task=8\n\n# Force allocation of the two cores on ONE node.\n#SBATCH --nodes=1\n\n# Set the total memory. Units can be given in T|G|M|K.\n#SBATCH --mem=8G\n\n# Optionally, set the partition to be used (-p or --partition).\n#SBATCH --partition=medium\n\n# Set the expected running time of your job (-t or --time).\n# Formats are MM:SS, HH:MM:SS, Days-HH, Days-HH:MM, Days-HH:MM:SS\n#SBATCH --time=30:00\n\nexport TMPDIR=/gpfsnyu/home/users/${USER}/scratch/tmp\nmkdir -p ${TMPDIR}\n\nBWAREF=/gpfsnyu/scratch/user/static_data/precomputed/BWA/0.7.17/GRCh37/g1k_phase1/human_g1k_v37.fasta\nREF=/gpfsnyu/scratch/user/static_data/reference/GRCh37/g1k_phase1/human_g1k_v37.fasta\n\nbwa mem -t 8 \\\n    -R \"@RG\\tID:FLOWCELL.LANE\\tPL:ILLUMINA\\tLB:test\\tSM:PA01\" \\\n    $BWAREF \\\n    /gpfsnyu/scratch/user/cubit/tutorial/input/test_R1.fq.gz \\\n    /gpfsnyu/scratch/user/cubit/tutorial/input/test_R2.fq.gz \\\n| samtools view -b \\\n| samtools sort -O BAM -T $TMPDIR -o aln.bam\n\nsamtools index aln.bam\n\ndelly call -g \\\n    $REF \\\n    aln.bam\n\ngatk HaplotypeCaller \\\n    -R $REF \\\n    -I aln.bam \\\n    -ploidy 2 \\\n    -O test.GATK.vcf\n</code></pre> <p>Let's run it (make sure that you are in the <code>tutorial/episode2</code> directory!):</p> <pre><code>(first-steps) $ sbatch submit_job.sh\n</code></pre> <p>And wait for the response which will tell you that your job was submitted and which job id number it was assigned. Note that <code>sbatch</code> only tells you that the job has started, but nothing about finishing. You won't get any response at the terminal when the job finishes. It will take approximately 20 minutes to finish the job.</p>"},{"location":"hpc-tutorial/episode-2/#monitoring-jobs","title":"Monitoring Jobs","text":"<p>You'll probably want to see how your job is doing. You can get a list of your jobs using:</p> <pre><code>(first-steps) $ squeue --me\n</code></pre> <p>Note that logins are also considered as jobs.</p> <p>Identify your job by the <code>&lt;JOBID&gt;</code> (1<sup>st</sup> column) or the name of the script (3<sup>rd</sup> column). The most likely states you will see (5<sup>th</sup> column of the table):</p> <ul> <li><code>PD</code> pending, waiting to be submitted</li> <li><code>R</code> running</li> <li>disappeared, either because of an error or because it finished</li> </ul> <p>In the 8<sup>th</sup> column you can see that your job is very likely running on a different machine than the one you are on!</p> <p>Do not use Slurm and <code>watch</code> or loops</p> <p>The <code>watch</code> command is a useful tool for running commands in a loop every <code>N</code> seconds. For example, on your workstation you could do <code>watch 'ping -c 3 google.com'</code> to execute three network pings to Google every two seconds.</p> <p>\ud83d\udc4e Using <code>watch</code> or manual loops in a cluster environment can have bad effects when querying Slurm or the shared file system. Both are shared resources and \"expensive\" queries should not be run in loops. For Slurm, this includes running <code>squeue</code>. The same would be true for running <code>squeue -i</code> which performs an internal loop.</p> <p>\ud83d\udc4d Use the Slurm query commands only when you actually need the output. If you run them in an (implict or explicit) loop, then do so only for a short time and don't leave this open in a screen.</p> <p>Get more information about your jobs by either passing the job id:</p> <pre><code>(first-steps) $ sstat &lt;JOBID&gt;\n</code></pre> <p>And of course, watch what the logs are telling you:</p> <pre><code>(first-steps) $ tail -f logs/tutorial-&lt;JOBID&gt;.log\n</code></pre> <p>There will be no notification when your job is done, so it is best to watch the <code>squeue --me</code> command. To watch the <code>sbatch</code> command there is a linux command <code>watch</code> that you give a command to execute every few seconds. This is useful for looking for changes in the output of a command. The seconds between two executions can be set with the <code>-n</code> option.  It is best to use <code>-n 60</code> to minimize unnecessary load on the file system:</p> <p><pre><code>(first-steps) $ watch -n 60 squeue --me\n</code></pre> If for some reason your job is hanging, you can delete your job using <code>scancel</code> with your job-ID: <pre><code>(first-steps) $ scancel &lt;job-ID&gt;\n</code></pre></p>"},{"location":"hpc-tutorial/episode-2/#job-queues","title":"Job Queues","text":"<p>The cluster has a special way of organizing itself and by telling the cluster how long and with which priority you want your jobs to run, you can help it in this. There is a system set up on the cluster where you can enqueue your jobs to so-called partitions. partitions have different prioritites and are allowed for different running times. To get to know what partitions are available, and how to use them properly, we highly encourage you to read the cluster queues wiki page.</p>"},{"location":"misc/external-resources/","title":"External Resources","text":""},{"location":"misc/external-resources/#basic-linux","title":"Basic Linux","text":"<p>The NYUSH HPC uses Redhat Linux. A basic understanding of Linux is required. Even better, you should already have intermediate to advanced Linux/Unix skills.</p> <p>That said, here are some resources that we find useful:</p>"},{"location":"misc/external-resources/#internet-tutorials","title":"Internet Tutorials","text":"<p>There is a large number of Linux tutorials online including:</p> <ul> <li>Ryans Linux Tutorial</li> <li>Digital Ocean Tutorials<ul> <li>Linux Basics</li> <li>Environment Variables</li> </ul> </li> <li>Using Jupyter Notebooks to manage SLURM jobs</li> </ul>"},{"location":"misc/external-resources/#internet-forums","title":"Internet Forums","text":"<ul> <li>Unix &amp; Linux Stack Exchange</li> </ul>"},{"location":"misc/external-resources/#global-organisation-for-bioinformatics-learning-education-and-training","title":"Global Organisation for Bioinformatics Learning, Education, and Training","text":"<p>GOBLET has a number of Bioinformatics-focused tutorials. This includes</p> <ul> <li>\"A Critical Guide to Unix\"</li> </ul>"},{"location":"misc/provided-software/","title":"Administration-Provided Software","text":"<p>Some software is provided by HPC Administration based on the criteria that it is:</p> <ul> <li>system-near or system-level,</li> <li>very commonly used.</li> </ul> <p>Currently, this includes:</p> <ul> <li>GCC v7.2.0</li> <li>CMake v3.11.0</li> <li>LLVM v6.0.0</li> <li>OpenMPI v4.0.3</li> </ul> <p>On the GPU node, this also includes a recent NVIDIA CUDA version.</p> <p>To see which software is available, use <code>module avail</code> on a compute node (this will not work on login nodes):</p> <pre><code>$ module avail\n--------------------- /opt/local/modules ---------------------\ncmake/3.11.0-0  llvm/6.0.0-0\ngcc/7.2.0-0     openmpi/4.0.3-0\n</code></pre> <p>To load software, use <code>module load</code>. This will adjust the environment variables accordingly, in particular update <code>PATH</code> such that the executable are available.</p> <pre><code>$ which gcc\n/bin/gcc\n$ module load gcc/7.2.0-0\n$ which gcc\n/opt/local/gcc-7.2.0-0/bin/gcc\n</code></pre> <p>Problems with executing <code>module</code>?</p> <p>See the corresponding FAQ entry in the case that you get a <code>-bash: module: command not found</code> when calling <code>module</code>.</p>"},{"location":"misc/publication-list/","title":"Publication List","text":"<p>The BIH Cluster is a valuable resource. It has been used to support the publications listed below.</p> <ul> <li>Please add your publications here.</li> <li>Acknowledge usage of the cluster in your manuscript as \"Computation has been performed on the HPC for Research cluster of the Berlin Institute of Health\".</li> </ul>"},{"location":"misc/publication-list/#articles-preprints","title":"Articles &amp; Preprints","text":""},{"location":"misc/publication-list/#2024","title":"2024","text":"<p>Hollunder, B., Ostrem, J.L., Sahin, I.A., Rajamani, N., Oxenford, S., Butenko, K., Neudorfer, C., Reinhardt, P., Zvarova, P., Polosan, M., Akram, H., Vissani, M., Zhang, C., Sun, B., Navratil, P., Reich, M.M., Volkmann, J., Yeh, F.-C., Baldermann, J.C., Dembek, T.A., Visser-Vandewalle, V., Alho, E.J.L., Franceschini, P.R., Nanda, P., Finke, C., K\u00fchn, A.A., Dougherty, D.D., Richardson, R.M., Bergman, H., DeLong, M.R., Mazzoni, A., Romito, L.M., Tyagi, H., Zrinzo, L., Joyce, E.M., Chabardes, S., Starr, P.A., Li, N., Horn, A., 2024. Mapping dysfunctional circuits in the frontal cortex using deep brain stimulation. Nat. Neurosci. 1\u201314. doi: 10.1038/s41593-024-01570-1</p>"},{"location":"misc/publication-list/#2022","title":"2022","text":"<p>Kossen T, Hirzel MA, Madai VI, Boenisch F, Hennemuth A, Hildebrand K, Pokutta S, Sharma K, Hilbert A, Sobesky J, Galinovic I, Khalil AA, Fiebach JB and Frey D. Toward Sharing Brain Images: Differentially Private TOF-MRA Images With Segmentation Labels Using Generative Adversarial Networks. Frontiers in Artificial Intelligence. 5 (2022). issn: 2624-8212. doi: 10.3389/frai.2022.813842</p>"},{"location":"ondemand/interactive/","title":"OnDemand: Interactive Sessions","text":"<p>Interactive sessions allow you to start and manage selected apps. Depending on the app they run as servers or GUIs. Selecting <code>My Interactive Sessions</code> in the top menu will direct you to the overview of currently running sessions. The left-hand panel provides a short cut to start a new session of one of the provided apps.</p> <p></p> <p>Each running interactive session is listed. Each card corresponds to one session. The title of each card provides the name, allocated resources and the current status. Furthermore, detailed information and links are available:</p> <ul> <li>Host: Provides the name of the node the session is running on. Click on the host name to open a shell to the given cluster node.</li> <li>Time remaining: Time until session till terminate.</li> <li>Session ID: Click to open the session directory in the interactive file browser (see below).</li> <li>Connect to: This will open the app in your browser (opens a new tab).</li> <li>Delete: Terminate the session.</li> </ul> <p>Don't hit reload in your apps</p> <p>Please note that the portal will use the authentication mechanisms of the apps to ensure that nobody except for you can connect to the session. This means that hitting the browsers \"reload\" button in your app will most likely not work.</p> <p>Just go back to the interactive session list and click on the \"connect\" button.</p>"},{"location":"ondemand/interactive/#session-directories","title":"Session Directories","text":"<p>The portal software will create a folder <code>ondemand</code> in your home directory. Inside, it will create session directories for each started interactive job. For technical reasons, these folders have very long names, for example:</p> <ul> <li><code>$HOME/ondemand/data/sys/dashboard/batch_connect/sys/ood-bih-rstudio-server/output/e40e03b3-11ca-458a-855b-98e6f148c99a/</code></li> </ul> <p>This follows the pattern:</p> <ul> <li><code>$HOME/${application name}/output/${job UUID}</code></li> </ul> <p>The job identifier used is not the Slurm job ID but an identifier internal to OnDemand. Inside this directory you will find log files and a number of scripts that are used to start your job.</p> <p>If you need to debug any interactive job, start here. Also, the helpdesk will need the path to this folder to help you with interactive jobs.</p> <p>You can find the name of the latest output folder with the following command:</p> <pre><code>$ ls -lhtr $HOME/${application name}/output | tail -n 1\n</code></pre> <p>For example, for RStudio Server:</p> <pre><code>$ ls -lhtr $HOME/ondemand/data/sys/dashboard/batch_connect/sys/ood-bih-rstudio-server/output | tail -n 1\n</code></pre> <p>Prevent Home From Filling Up</p> <p>You should probably move <code>~/ondemand</code> to your work volume with the following:</p> <pre><code>$ mv ~/ondemand ~/work/ondemand\n$ ln -sr ~/work/ondemand ~/ondemand\n</code></pre> <p>Make sure to delete potential interactive sessions and to logout from the Ondemand Portal first. Otherwise, the <code>~/ondemand</code> folder is constantly recreated and the symlink will be just created within this folder as <code>~/ondemand/ondemand</code> and thus not be used as intended.</p> <p>Also, clear out <code>~/work/ondemand/*</code> from time to time but take care that you don't remove the directory of any running job.</p>"},{"location":"ondemand/interactive/#example-1-default-rstudio-session","title":"Example 1: Default RStudio Session","text":"<p>This description of starting an RStudio session is a showcase for starting other interactive apps as well.</p> <p>To start the session, please go to <code>Interactive Apps</code> in the top menu bar and select <code>RStudio Server</code> or click <code>RStudio Server</code> in the left-hand panel.</p> <p></p> <p>Allocate appropriate resources and click <code>Launch</code>.</p> <p>An info card for the RStudio Server will be added to <code>My Interactive Sessions</code>, and during start, it will change its state from <code>Queued</code> to <code>Starting</code> to <code>Running</code>. Depending on the app, resources allocated and current cluster usage, this will take a couple of seconds.</p> <p></p> <p></p> <p></p> <p>When in the final state (<code>Running</code>), one can directly connect to the RStudio Server to get an interactive session by clicking <code>Connect to RStudio Server</code>:</p> <p></p>"},{"location":"ondemand/interactive/#example-2-rstudio-session-with-custom-r-installation-from-conda","title":"Example 2: RStudio Session with custom R-installation from conda","text":"<p>To use the OnDemand portal with a specific R installation including a stable set of custom packages you can use a conda enviroment from the cluster as a R source.  </p> <p>For this you may first need to create this conda environment including your R version of choice and all necessary packages. Specific installations of i.e. python from conda can be used similarly in other interactive apps.</p> <ul> <li>For reproducibility this environment should clearly define all package versions and include dependencies. This is easiest to achieve by first collecting all packages you need into a primary collection (i.e. a yaml file, potentially including a specific R version for r-base if needed) and creating an environment from there. Exporting this environment will generate a file with all used packages and their version numbers, that can be used to recreate the same environment.</li> <li>Example code:</li> </ul> Click to expand  * Commands:   + `conda env create -n R-example -f R-example.yaml`   + `conda activate R-example`   + `conda env export -f R-fixed-versions.yaml`   + `conda env create -n R-fixed-versions -f R-fixed-versions.yaml` * R-example.yaml  <pre><code>channels:\n  - conda-forge\n  - bioconda\n  - defaults\ndependencies:\n  - r-base\n  - r-essentials\n  - r-devtools\n  - bioconductor-deseq2\n  - r-tidyverse\n  - r-rmarkdown\n  - r-knitr\n  - r-dt\n</code></pre> <ul> <li>R packages only available from github</li> </ul> <p>Some packages (i.e. several single-cell-RNAseq analysis tools) are only available from github and not on Cran/Bioconductor. There are two ways to install such packages into a conda enviroment.</p> Click to expand  1) Install from inside R \\[easier option, but not pure conda\\]  * First setup the conda env, ideally including all dependencies for the desired package from github (and do include r-devtools) * Then within R run `devtools::install_github('owner/repo', dependencies=F, upgrade=F, lib='/path/to/conda/env-name/lib/R/library')` * if you don't have all dependencies already installed you will have to omit dependencies=F and risk a mix of conda &amp; native R installed packages (or just have to redo the conda env). * github_install involves a build process and still needs a bit of memory, so this might crash on the default `srun --pty bash -i` shell  2) Build packages into a local conda channel \\[takes longer, but pure conda\\]\\    This approach is mostly taken from the answers given [here](https://stackoverflow.com/questions/52061664/install-r-package-from-github-using-conda). These steps must be taken _before_ building the final env used with Rstudio  * use `conda skeleton cran https://github.com/owner/repo [--git-tag vX.Y]` to generate build files   * conda skeleton only works for repositories with a release/version tag. If the package you want to install does not have that, you either need to create a fork and add a such a tag, or find a fork that already did that. Downloading the code directly from github and building the package from that is also possible, but you will the need to manually set up the `meta.yaml` and `build.sh` files that conda skeleton would create.   * If there is more than one release tag, do specify which one you want, it may not automatically take the most recent one.   * If any r-packages from bioconductor are dependencies, conda will not find them during the build process. You will need to change the respective entries in the `meta.yaml` file created by conda skeleton. I.e. change `r-deseq2` to `bioconductor-deseq2` * Build the package with `conda build --R= [--use-local] r-`   * You need to specifying the same R-version used in the final conda env   * If the github package has additional dependencies from github, build those first and then add `--use-local` so the build process can find them.   * The build process definitely needs more memory than the default `srun --pty bash -i` shell. It also takes quite a bit of time (much longer than installing through devtools::install_github) * Finally add the packages (+versions) you built to the environment definition (i.e. yaml file) and create the (final) conda environment. Don't forget to tell conda to use locally build packages (either supply `--use-local` or add `- local` to the channel list in the yaml file)   <p>Starting the Rstudio session via the OnDemand portal works almost as described above (see Example 1). However, you do have to select `miniconda` as R source and provide the path to your miniconda installation and (separated by a colon) the name of the (newly created) conda enviroment you want to use.</p> <p></p> <p>Additional notes:</p> <ul> <li>Updating the conda env, that an already running rstudio instance is using, does work but does requires a restart of the R session to take effect</li> <li>If you are starting a new interactive Rstudio session but with a different conda environment than before, Rstudio will still start from the same project as before. In this case the 'old' project likely still contains the previous <code>.libPaths()</code> entries and therefore a link to your previous conda installation. Creating a new project cleans <code>.libPaths()</code> to only the env specified in setting up the Rstudio session.</li> </ul>"},{"location":"ondemand/overview/","title":"The Open OnDemand Portal","text":"<p>Status / Stability</p> <p>OnDemand Support is currently in beta phase on the NYUSH HPC. In case of any issues, please send an email to shanghai.it.help@nyu.edu.</p> <p>To allow for better interactive works, NYUSH HPC administration has setup an  Open OnDemand (OOD) portal web server.</p>"},{"location":"ondemand/overview/#background","title":"Background","text":"<p>OOD allows you to access cluster resources using a web-based graphical interface in addition to traditional SSH connections. You can then connect to jobs running graphical applications either to virtual desktops (such as Matlab) or to web apps (such as Jupyter and RStudio Server).</p> <p>The following figure illustrates this.</p> <p></p> <p>The primary way to the cluster continues to be SSH which has several advantages. By the nature of the cluster being based on Linux servers, it will offer more features through the \"native\" access and through its lower complexity, it will offer higher stability. However, we all like to have the option of a graphical interface, at least from time to time .</p> <p>The main features are:</p> <ul> <li>Easy web-based access to Jupyter and RStudio Server on the cluster.</li> <li>Generally lower the entry barrier of using the HPC system.</li> </ul>"},{"location":"ondemand/overview/#logging-into-the-portal","title":"Logging into the Portal","text":"<p>The first prerequisite is to have a cluster account already (see Getting Access). Once you have done your first SSH connection to the cluster successfully you can start using the portal. For this you perform the following steps:</p> <ol> <li>Go to https://hpc-portal.cubi.bihealth.org - you will be redirected to the login page shown below.     If you have an account with Charite (ends in <code>_c</code>) then please use the \"Charit\u00e9 - Universit\u00e4tmedizin Berlin\" button, for MDC Accounts please use the \"Max Delbr\u00fcck Center Berlin\" button.     </li> <li>Login with your home organization's SSO system.     Please note that depending on whether you are accessing the system via the wired network in your home organization or via VPN the SSO might look differently.</li> </ol> <p>Clicked the Wrong Login Button?</p> <p>If you clicked the wrong button then please clear your cookies to force a logout of the system.</p>"},{"location":"ondemand/overview/#prepare-ondemand-folder","title":"Prepare OnDemand Folder","text":"<p>The <code>ondemand</code> folder is automatically created in your home directory, and the OnDemand service searches for this folder in your home directory, i.e. it has to stay there. But as the quota in the home directory is very limited, you can easily hit the hard quota which might prevent you from working on the cluster.</p> <p>To prevent this, move the <code>~/ondemand</code> folder to the <code>~/work</code> folder and create a symlink for the now dislocated <code>~/ondemand</code> folder:</p> <pre><code> $ mv ~/ondemand ~/work/ondemand\n $ ln -sr ~/work/ondemand ~/ondemand\n</code></pre> <p>Important</p> <p>Make sure to delete potential interactive sessions and to logout from the Ondemand Portal first. Otherwise, the <code>~/ondemand</code> folder is constantly recreated and the symlink will be just created within this folder as <code>~/ondemand/ondemand</code> and thus not be used as intended.</p>"},{"location":"ondemand/overview/#portal-dashboard","title":"Portal Dashboard","text":"<p>Problems with Open OnDemand?</p> <p>First try to log out and login again. Next, try to clear all cookies for the domain <code>hpc-portal.cubi.bihealth.org</code>. Finally, try the <code>Help &gt; Restart Web Server</code> link to restart the per-user nginx (PUN) server.</p> <p>You will then be redirected to the dashboard screen.</p> <p></p> <p>Here you have access to the following actions. We will not go into detail of all of them and expect them to be self-explanatory.</p> <p>Important</p> <p>Please note that when using the portal then you are acting as your HPC user. Use standard best practice. Consider carefully what you do as you would from the command line (e.g., don't use the portal to browse the web from the cluster).</p> <ul> <li>Files<ul> <li>Home Directory - Access a file browser.</li> <li>Quotas - Display quota information (only available on HPC 4 Research).</li> </ul> </li> <li>Jobs<ul> <li>Active Jobs - List your jobs.</li> <li>Job Composer - Start a new job.</li> </ul> </li> <li>Clusters<ul> <li>Shell Access - Shell access in your browser.</li> </ul> </li> <li>Interactive Apps<ul> <li>Mate and Xfce Desktops - Start virtual desktops on the HPC.</li> <li>Matlab - Run a virtual desktop that has Matlab installed.</li> <li>MaxQuant - Run a virtual desktop that has MaxQuant installed.</li> <li>Jupyter - Run Jupyter on the HPC and easily connect to it from your browser without setting up any SSH tunnels.</li> <li>RStudio Server - Run RStudio Server on the HPC and easily connect to it from your browser without setting up any SSH tunnels.</li> </ul> </li> <li>My Interactive Sessions - See details of your currently running interactive sessions.</li> <li>Help<ul> <li>Contact Support - Links ot the \"Getting Help\" page in this documentation.</li> <li>Online Documentation - Links to this documentation.</li> <li>Restart Web Server - Try this if the portal acts weird before contacting the helpdesk. OnDemand runs a web server per user, so this does not affect any other user.</li> </ul> </li> <li>Log Out - Log out of the system.</li> </ul>"},{"location":"ondemand/quotas/","title":"OnDemand: Quota Inspection","text":"<p>Outdated</p> <p>This document is only valid for the old, third-generation file system and will be removed soon. Quotas of our new CephFS storage are communicated via the HPC Access web portal.</p> <p>Accessing the quota report by selecting <code>Files</code> and then <code>Quotas</code> in the top menu will provide you with a detailed list of all quotas for directories that you are assigned to.</p> <p></p> <p>There are two types of quotas: for (a) size of and (b) number of files in a directory.</p> <p>Every row in the table corresponds to a directory that you have access to. This implies your home directory (<code>fast/users</code>) as well as the group directory of your lab (<code>fast/groups</code>) and possible projects (<code>fast/projects</code>) (if any). Quotas are not directly implied on these directories but on the <code>home</code>, <code>scratch</code> and <code>work</code> subdirectories that each of subdirectory of the beforementioned directories has (for a detailed explanation see Storage and Volumes).</p> <p>The following list explains the columns of the table:</p> <ul> <li>path resembles the path to the directory the quota is displayed for. Please note that this is not actually a path but the fileset name the cluster uses internally to handle the associated directory/path. The \"real\" path can be derived by preceding the name with a slash (<code>/</code>) and substituting the underscores with a slash in the <code>(users|groups|projects)_</code> and <code>_(home|scratch|work)</code> substring. The corresponding path for name <code>fast/users_stolpeo_c_home</code> would be <code>/fast/users/stolpeo_c/home</code>.</li> <li>block usage gives the current size of the directory/fileset. The unit is variable and directly attached to the number.</li> <li>block soft limit gives the soft quota for the directory/fileset. Exceeding the soft quota (and staying below the hard quota) will trigger the grace period. The unit is variable and directly attached to the number.</li> <li>block hard limit gives the hard quota for the directory/fileset. Exceeding the hard quota is not possible and will prevent you from writing any data to the directory. That might cause trouble even deleting files as logging in and browsing the file system may create data. The unit is variable and directly attached to the number.</li> <li>block grace gives the grace period in days when exceeding the soft quota.</li> <li>files usage gives the number of files in the directory tree.</li> <li>files soft limit gives the soft quota for the allowed number of files in the directory/fileset. Exceeding the soft quota (and staying below the hard quota) will trigger the grace period.</li> <li>files hard limit gives the hard quota for the allowed number of files. Exceeding the hard quota is not possible and will prevent you from writing any data to the directory. That might cause trouble even deleting files as logging in and browsing the file system may create data.</li> <li>files grace gives the grace period in days when exceeding the soft quota for files.</li> </ul>"},{"location":"overview/architecture/","title":"Cluster Architecture","text":"<p>BIH HPC IT provides acess to high-performance compute (HPC) cluster systems. A cluster system bundles a high number of nodes and in the case of HPC, the focus is on performance (with contrast to high availability clusters).</p>"},{"location":"overview/architecture/#hpc-4-research","title":"HPC 4 Research","text":""},{"location":"overview/architecture/#cluster-hardware","title":"Cluster Hardware","text":"<ul> <li>approx. 256 nodes (from three generations),</li> <li>4 high-memory nodes (2 nodes with 512 GB RAM, 2 nodes with 1 TB RAM),</li> <li>7 GPU nodes with 4 Tesla GPUs each, 1 GPU node with 10 A40 GPUs, and</li> <li>a high-performance Tier 1 parallel CephFS file system with a larger but slower Tier 2 CephFS file system, and</li> <li>a legacy parallel GPFS files system.</li> </ul>"},{"location":"overview/architecture/#network-interconnect","title":"Network Interconnect","text":"<ul> <li>Older nodes are interconnected with 2x10GbE/2x40GbE</li> <li>Recent nodes are interconnected with 2x25GbE/2x100GbE</li> </ul>"},{"location":"overview/architecture/#cluster-management","title":"Cluster Management","text":"<p>Users don't connect to nodes directly but rather create interactive or batch jobs to be executed by the cluster job scheduler Slurm.</p> <ul> <li>Interactive jobs open interactive sessions on compute nodes (e.g., R or iPython sessions).   These jobs are run directly in the user's terminal.</li> <li>Batch jobs consist a job script with execution instructions (a name, resource requirements etc.)   These are submitted to the cluster and then assigned to compute hosts by the job scheduler.   Users can configure the scheduler to send them an email upon completion.   Users can submit many batch jobs at the same time and the scheduler will execute them once the cluster offers sufficient resources.</li> <li>Web-based access can be achieved using the OnDemand Portal</li> </ul>"},{"location":"overview/architecture/#head-vs-compute-nodes","title":"Head vs. Compute Nodes","text":"<p>As common with HPC systems, users cannot directly access the compute nodes but rather connect to so-called head nodes. The BIH HPC system provides the following head nodes:</p> <ul> <li><code>login-1</code> and <code>login-2</code> that accept SSH connections and are meant for low intensity, interactive work such as editing files, running screen/tmux sessions, and logging into the compute nodes.   Users should run no computational tasks and no large-scale data transfer on these nodes.</li> <li><code>transfer-1</code> and <code>transfer-2</code> also accept SSH connections.   Users should run all large-scale data transfer through these nodes.</li> </ul>"},{"location":"overview/architecture/#common-use-case","title":"Common Use Case","text":"<p>After registration and client configurations, users with typically connect to the HPC system through the login nodes:</p> <pre><code>local:~$ ssh -l jdoe_c hpc-login-1.cubi.bihealth.org\nhpc-login-1:~$\n</code></pre> <p>Subsequently, they might submit batch jobs to the cluster for execution through the Slurm scheduling system or open interactive sessions:</p> <pre><code>hpc-login-1:~$ sbatch job_script.sh\nhpc-login-1:~$ srun --pty bash -i\nmed0104:~$\n</code></pre>"},{"location":"overview/for-the-impatient/","title":"Overview","text":""},{"location":"overview/for-the-impatient/#bih-hpc-4-research","title":"BIH HPC 4 Research","text":"<p>BIH HPC 4 Research is located in the BIH data center in Buch and connected via the BIH research network. Connections can be made from Charite, MDC, and BIH networks. The cluster is open for users with either Charite or MDC accounts after getting access through the gatekeeper proces. The system has been designed to be suitable for the processing of human genetics data from research contexts (and of course data without data privacy concerns such as public and mouse data).</p>"},{"location":"overview/for-the-impatient/#cluster-hardware-and-scheduling","title":"Cluster Hardware and Scheduling","text":"<p>The cluster consists of the following major components:</p> <ul> <li>2 login nodes for users <code>hpc-login-1</code> and <code>hpc-login-2</code> (for interactive sessions only),</li> <li>2 nodes for file transfers <code>hpc-transfer-1</code> and <code>hpc-transfer-2</code>,</li> <li>a scheduling system using Slurm,</li> <li>228 general purpose compute nodes <code>hpc-cpu-{1..228}</code></li> <li>a few high memory nodes <code>hpc-mem-{1..5}</code>,</li> <li>7 nodes with 4 Tesla V100 GPUs each (!) <code>hpc-gpu-{1..7}</code> and 1 node with 10x A40 GPUs (!) <code>hpc-gpu-8</code>,</li> <li>a legacy parallel GPFS file system with 2.1 PB, by DDN mounted at <code>/fast</code>,</li> <li>a next generation high-performance storage system based on Ceph/CephFS</li> <li>a tier 2 (slower) storage system based on Ceph/CephFS</li> </ul> <p>This is shown by the following picture:</p> <p></p>"},{"location":"overview/for-the-impatient/#differences-between-workstations-and-clusters","title":"Differences Between Workstations and Clusters","text":"<p>The differences include:</p> <ul> <li>The directly reachable login nodes are not meant for computation!   Use <code>srun</code> to go to a compute node.</li> <li>Every time you type <code>srun</code> to go to a compute node you might end up on a different host.</li> <li>Most directories on the nodes are not shared, including <code>/tmp</code>.</li> <li>The <code>/fast</code> directory is shared throughout the cluster which contains your home, group home, and project directories.</li> <li>You will not get <code>root</code> or <code>sudo</code> permissions on the cluster.</li> <li>You should prefer batch jobs (<code>sbatch</code>) over calling programs interactively.</li> </ul>"},{"location":"overview/for-the-impatient/#what-the-cluster-is-and-is-not","title":"What the Cluster Is and Is NOT","text":"<p>NB: the following might sound a bit harsh but is written with everyone's best intentions in mind (we actually like you, our user!) This addresses a lot of suboptimal (yet not dangerous, of course) points we observed in our users.</p> <p>IT IS</p> <ul> <li>It is scientific infrastructure just like a lab workbench or miscroscope.   It is there to be used for you and your science.   We trust you to behave in a collaboratively.   We will monitor usage, though, and call out offenders.</li> <li>With its ~200 nodes, ~6400 threads and fast parallel I/O, it is a powerful resource for life science high performance computation, originally optimized at bioinformatics sequence processing.</li> <li>A place for data move data at the beginning of your project.   By definition, every project has an end.   Your project data needs to leave the cluster at the end of the project.</li> <li>A collaborative resource with central administration managed by BIH HPC IT and supported via hpc-helpdesk@bih-charite.de</li> </ul> <p>IT IS NOT</p> <ul> <li>A self-administrated workstation or servers.<ul> <li>You will not get <code>sudo</code>.</li> <li>We will not install software beyond those in broad use and available in CentOS Core or EPEL repositories.</li> <li>You can install software in your user/group/project directories, for example using Conda.</li> </ul> </li> <li>A place to store primary copies of your data.   You only get 1 GB of storage in your home for scripts, configuration, and documents.</li> <li>A safe place to store data.   Only your 1 GB of home is in snapshots and backup.   While data is stored on redundant disks, technical or administrative failure might eventually lead to data loss.   We do everything humanly possible to prevent this.   Despite this, it is your responsibility to keep important files in the snapshot/backup protected home, ideally even in copy (e.g., a git repository) elsewhere.   Also, keeping safe copies of primary data files, your published results, and the steps in between reproducible is your responsibility.</li> <li>A place to store data indefinitely.   The fast CephFS Tier 1 storage is expensive and \"rare\".   CephFS Tier 2 is bigger in volume, but still not unlimited.   The general workflow is: (1) copy data to cluster, (2) process it, creating intermediate and final results, (3) copy data elsewhere and remove it from the cluster</li> <li>Generally suitable for primary software development.   The I/O system might get overloaded and saving scripts might take some time.   We know of people who do this and it works for them.   Your mileage might vary.</li> </ul>"},{"location":"overview/job-scheduler/","title":"Job Scheduler","text":"<p>Once logged into the cluster through the login nodes, the Slurm scheduler needs to be used to submit computing jobs. In Slurm nomenclature, cluster compute nodes are assigned to one or more partitions. Submitted jobs are assigned to nodes according to the partition's configuration.</p>"},{"location":"overview/job-scheduler/#partitions","title":"Partitions","text":"<p>The BIH HPC has the partitions described below. The cluster focuses on life science applications and not \"classic HPC\" with numerical computations using MPI. Thus, all partitions except for <code>mpi</code> only allow to reserve resources on one node. This makes the cluster easier to use as users don't have to explicitely specify this limit when submitting their jobs.</p>"},{"location":"overview/job-scheduler/#standard","title":"<code>standard</code>","text":"<p>Jobs are submitted to the <code>standard</code> partition by default. From the, the scheduler will route the jobs to their actual partition using the routing rule set described below. You can override this routing by explicitely assigning a partition (but this is discouraged).</p> <ol> <li>Jobs requesting a GPU resources are routed to the <code>gpu</code> queue.</li> <li>Else, jobs requesting more than 200 GB of RAM are routed to the <code>highmem</code> queue.</li> <li>Else, jobs are assigned to the partitions <code>debug</code>, <code>short</code>, <code>medium</code>, and <code>long</code> long depending on their configured maximal running time.    The partitions are evaluated in the order given above and the first fitting partition will be used.</li> </ol>"},{"location":"overview/job-scheduler/#debug","title":"<code>debug</code>","text":"<p>This partition is for very short jobs that should be executed quickly, e.g., for tests. The job running time is limited to one hour and at most 128 cores can be used per user but the jobs are submitted with highest priority.</p> <ul> <li>maximum run time: 1 hour</li> <li>maximum cores: 128 cores per user</li> <li>partition name: <code>debug</code></li> <li>argument string: maximum run time: <code>--time 01:00:00</code></li> </ul>"},{"location":"overview/job-scheduler/#short","title":"<code>short</code>","text":"<p>This partition is for jobs running only few hours. The priority of short jobs is high and many cores can be used at once to reward users for splitting their jobs into smaller parts.</p> <ul> <li>maximum run time: 4 hours</li> <li>maximum cores: 2000 cores</li> <li>partition name: <code>short</code></li> <li>argument string: maximum run time: <code>--time 04:00:00</code></li> </ul>"},{"location":"overview/job-scheduler/#medium","title":"<code>medium</code>","text":"<p>This partition is for jobs running for multiple days. Users can only allocate the equivalent of 4 nodes.</p> <ul> <li>maximum run time: 7 days</li> <li>maximum cores: 128 cores/slots (4 nodes)</li> <li>partition name: <code>medium</code></li> <li>argument string: maximum run time: <code>--time 7-00:00:00</code></li> </ul>"},{"location":"overview/job-scheduler/#long","title":"<code>long</code>","text":"<p>This partition is for long-running tasks. Only one node can be reserved for so long to discourage really long-running jobs and encourage users for splitting their jobs into smaller parts.</p> <ul> <li>maximum run time: 14 days</li> <li>maximum cores: 32 cores/slots (1 node)</li> <li>partition name: <code>long</code></li> <li>argument string: maximum run time: <code>--time 14-00:00:00</code></li> </ul>"},{"location":"overview/job-scheduler/#gpu","title":"<code>gpu</code>","text":"<p>Jobs requesting GPU resources are automatically assigned to the <code>gpu</code> partition.</p> <p>The GPU nodes are only part of the <code>gpu</code> partition so they are not blocked by normal compute jobs. Maximum run time is relatively high (14 days) to allow for longer training jobs. Contact hpc-helpdesk@bih-charite.de if you have longer running jobs that you really cannot make run any shorter for assistance.</p> <p>Info</p> <p>Fair use rules apply. As GPU nodes are a limited resource, excessive use by single users is prohibited and can lead to mitigating actions. Be nice and cooperative with other users. Tip: <code>getent passwd USER_NAME</code> will give you a user's contact details.</p> <ul> <li>maximum run time: 14 days</li> <li>partition name: <code>gpu</code></li> <li>argument string: select <code>$count</code> GPUs: <code>-p gpu --gres=gpu:$card:$count</code> (<code>card=tesla</code> or <code>card=a40</code>), maximum run time: <code>--time 14-00:00:00</code></li> </ul>"},{"location":"overview/job-scheduler/#highmem","title":"<code>highmem</code>","text":"<p>Jobs requesting more than 200 GB of RAM are automatically routed to the <code>highmem</code> partition.</p> <p>The high memory nodes are only part of the <code>highmem</code> partition so they are not blocked by normal compute jobs. Maximum run time is relatively high (14 days) to allow for longer jobs. Contact hpc-helpdesk@bih-charite.de for assistance if you have longer running jobs that you really cannot make run any shorter.</p> <p>Info</p> <p>Fair use rules apply. As high-memory nodes are a limited resource, excessive use by single users is prohibited and can lead to mitigating actions. Be nice and cooperative with other users. Tip: <code>getent passwd USER_NAME</code> will give you a user's contact details.</p> <ul> <li>maximum run time: 14 days</li> <li>partition name: <code>highmem</code></li> <li>argument string: <code>-p highmem</code>, maximum run time: <code>--time 14-00:00:00</code></li> </ul>"},{"location":"overview/job-scheduler/#mpi","title":"<code>mpi</code>","text":"<p>Jobs are not routed automatically to the <code>mpi</code> partition but you have to explitely request the partition. This is the only partition in which more than one node can be allocated to a job.</p> <p>You can submit multi-node jobs into the <code>mpi</code> partition. Maximum run time is relatively high (14 days) to allow for longer jobs. Don't abuse this. Contact hpc-helpdesk@bih-charite.de for assistance if you have longer running jobs that you really cannot make run any shorter.</p> <ul> <li>maximum run time: 14 days</li> <li>partition name: <code>highmem</code></li> <li>argument string: <code>-p mpi</code>, maximum run time: <code>--time 14-00:00:00</code></li> </ul>"},{"location":"overview/job-scheduler/#critical","title":"<code>critical</code>","text":"<p>Jobs are not routed into <code>critial</code> automatically and the partition has to be selected manually.</p> <p>This partition is for time-critical jobs with deadlines. As long as the cluster is not very busy, requests for critical jobs will be granted most of the time. However, do not use this partition without arranging with hpc-helpdesk as killing jobs will be used as the ultima ratio in case of such policy violations.</p> <ul> <li>maximum run time: 7 days</li> <li>maximum cores: 2000 cores/slots (48 nodes)</li> <li>partition name: <code>critical</code></li> <li>argument string: maximum run time: <code>--time 7-00:00:00</code></li> </ul>"},{"location":"overview/monitoring/","title":"Monitoring","text":"<p>We currently provide you only with Ganglia for monitoring the cluster status.</p>"},{"location":"overview/monitoring/#using-ganglia","title":"Using Ganglia","text":"<p>Go to the following address and login with your home organization (Charite or MDC):</p> <ul> <li>https://hpc-ganglia.cubi.bihealth.org</li> </ul> <p>Ganglia does not know about Slurm</p> <p>Ganglia will not show you anything about the Slurm job schedulign system. If a job uses a whole node but uses no CPUs then this will be displayed as unused in Ganglia. However, Slurm would not schedule another job on this node.</p> <p>You will be show a screen as shown below. This allows you to get a good idea of what is going on on the HPC.</p> <p></p> <p>By default you will be shown the cluster usage of the last day. You can quickly switch to report for two or four hours as well, etc.</p> <p>In the first row of pictures you see the number of total CPUs (actually hardware threads), number of hosts seen as up and down by Ganglia, and cluster load/utilization. You will then see the overall cluster load, memory usage, CPU usage, and network utilization across the selected time period.</p> <p>Linux load is not intuitive</p> <p>Note that the technical details behind Linux load is not very interactive. It is incorporating much more than just the CPU usage. You can find a quite comprehensive treatement of Linux Load here.</p> <p>We are using a fast shared storage system and almost no local storage (except in <code>/tmp</code>). Also, almost no jobs use MPI or other heavy network communication. Thus, the network utilization is a good measure of the I/O on the cluster.</p> <p>Below, you can drill down into various metrics and visualize them historically. Just try it out and find your way around, you cannot break anything. Sadly, there is no good documentation of Ganglia online.</p>"},{"location":"overview/monitoring/#aggregate-gpu-utilization-visualization","title":"Aggregate GPU Utilization Visualization","text":"<p>Ganglia allows you to obtain metrics in several interesting and useful ways. If you click on \"Aggregate Graphs\" then you could enter the following values to get an overview of the live GPU utilization.</p> <ul> <li>Title: <code>Aggreate GPU Utilization</code></li> <li>Host Regular expression: <code>hpc-gpu-.*</code></li> <li>Metric Regular Expressions: <code>gpu._util</code></li> <li>Graph Type: <code>Stacked</code></li> <li>Legend Options: <code>Hide legend</code></li> </ul> <p>Then click <code>Create Graph</code>.</p> <p></p> <p>If a GPU is fully used, it will contribute 100 points on the vertical axis. See above for an example, and here is a direct link:</p> <ul> <li>Aggregate GPU Utilization</li> </ul>"},{"location":"overview/storage/","title":"Nodes and Storage Volumes","text":"<p>No mounting on the cluster itself.</p> <p>For various technical and security-related reasons it is not possible to mount anything on the cluster nodes by users. For mounting the cluster storage on your computer, please read Connecting: SSHFS Mounts.</p> <p>This document gives an overview of the nodes and volumes on the cluster.</p>"},{"location":"overview/storage/#cluster-layout","title":"Cluster Layout","text":""},{"location":"overview/storage/#cluster-nodes","title":"Cluster Nodes","text":"<p>The following groups of nodes are available to cluster users. There are a number of nodes that are invisible to non-admin staff, hosting the queue master and monitoring tools and providing backup storage for key critical data, but these are not shown here.</p> <ul> <li><code>hpc-login-{1,2}</code><ul> <li>available as <code>hpc-login-{1,2}.cubi.bihealth.org</code></li> <li>do not perform any computation on these nodes!</li> <li>each process may at most use 1 GB of RAM</li> </ul> </li> <li><code>med0101..0124,0127</code><ul> <li>25 standard nodes</li> <li>Intel Xeon E5-2650 v2 @2.60Ghz, 16 cores x2 threading</li> <li>128 GB RAM</li> </ul> </li> <li><code>med0133..0164</code><ul> <li>32 standard nodes</li> <li>Intel Xeon E5-2667 v4 @3.20GHz, 16 cores x 2 threading</li> <li>192 GB RAM</li> </ul> </li> <li><code>med0201..0264</code><ul> <li>64 nodes with Infiniband interconnect</li> <li>Intel Xeon E5-2650 v2 @2.60Ghz, 16 cores x2 threading</li> <li>128 GB RAM</li> </ul> </li> <li><code>med0301..0304</code></li> <li>4 nodes with 4 Tesla V100 GPUs each</li> <li><code>med0401..0405</code> special purpose/high-memory machines<ul> <li>Intel Xeon E5-4650 v2 @2.40GHz, 40 cores x2 threading</li> <li><code>med0401</code> and <code>med0402</code><ul> <li>1 TB RAM</li> </ul> </li> <li><code>med0403</code> and <code>med0404</code><ul> <li>500 GB RAM</li> </ul> </li> <li><code>med0405</code><ul> <li>2x \"Tesla K20Xm\" GPU accelleration cards (cluster resource <code>gpu</code>)</li> <li>access limited to explicit GPU users</li> </ul> </li> </ul> </li> <li><code>med0601..0616</code><ul> <li>16 nodes owned by CUBI</li> <li>Intel Xeon E5-2640 v3 @2.60Ghz</li> <li>192 GB RAM</li> </ul> </li> <li><code>med0618..0633</code><ul> <li>16 nodes owned by CUBI</li> <li>Intel Xeon E5-2667 v4 @3.20GHz, 16 cores x 2 threading</li> <li>192 GB RAM</li> </ul> </li> <li><code>med0701..0764</code><ul> <li>64 standard nodes</li> <li>Intel Xeon E5-2667 v4 @3.20GHz, 16 cores x 2 threading</li> <li>192 GB RAM</li> </ul> </li> </ul>"},{"location":"overview/storage/#cluster-volumes-and-locations","title":"Cluster Volumes and Locations","text":"<p>The cluster has 2.1 PB of legacy fast storage, currently available at <code>/fast</code>, as well as 1.6 PB of next-generation fast storage, available at <code>/data/cephfs-1</code>. Additionally 7.4 PB of slower \"Tier 2\" storage is available at <code>/data/cephfs-2</code>. Storage is provided by a Ceph storage cluster and designed for massively parallel access from an HPC system. In contrast to \"single server\" NFS systems, the system can provide large bandwidth to all cluster nodes in parallel as long as large data means relatively \"few\" files are read and written.</p> <p>Storage is split into three sections:</p> <ul> <li><code>home</code> -- small, persistent, and safe storage, e.g., for documents and configuration files (default quota of 1 GB).</li> <li><code>work</code> -- larger and persistent storage, e.g., for your large data files (default quota of 1 TB).</li> <li><code>scratch</code> -- large and non-persistent storage, e.g., for temporary files, files are automatically deleted after 2 weeks (default quota of 10 TB; deletion not implemented yet).)</li> </ul> <p>Each user, group, and project has one or more of these sections each, e. g. for users:</p> <ul> <li><code>/data/cephfs-1/home/users/$NAME</code></li> <li><code>/data/cephfs-1/home/users/$NAME/work</code></li> <li><code>/data/cephfs-1/home/users/$USER/scratch</code></li> </ul> <p>See Storage and Volumes: Locations for more informatin.</p>"},{"location":"slurm/background/","title":"Introduction to Scheduling","text":"<p>As explained elsewhere in more detail, an HPC cluster consists of multiple computers connected via a network and working together. Multiple users can use the system simultaneously to do their work. This means that the system needs to join multiple computers (nodes) to provide a coherent view of them and the same time partition the system to allow multiple users to work concurrently.</p> <pre><code>    user 1         user 2          ...\n\n  .---. .---.    .---. .---.\n  | J | | J |    | J | | J |\n  | o | | o |    | o | | o |       ...\n  | b | | b |    | b | | b |\n  | 1 | | 2 |    | 3 | | 4 |\n  '---' '---'    '---' '---'\n\n.------------------------------------------.\n|            Cluster Scheduler             |\n'------------------------------------------'\n\n.----------.  .------------.  .------------.\n| multiple |  |  separate  |  | computers  |\n'----------'  '------------'  '------------'\n</code></pre>"},{"location":"slurm/background/#interlude-partitioning-single-computers","title":"Interlude: Partitioning Single Computers","text":"<p>Overall, this partitioning is not so different from how your workstation or laptop works. Most likely, your computer (or even your smartphone) has multiple processors (or cores). You can run multiple programs on the same computer and the fact that (a) there is more than one core and (b) there is more than one program running is not known to the running programs (unless they explicitly communicate with each other). Different programs can explicitly take advantage of the multiple processor cores. The main difference is that you normally use your computer in an interactive fashion (you perform an action and expect an immediate reaction).</p> <p>Even with a single processor (and core), your computer manages to run more than one program at the same time. This is done with the so-called time-slicing approach where the operating system lets each programs run in turn for a short time (a few milliseconds). A program with a higher priority will get more time slices than one with a lower (e.g., your audio player has real-time requirements and you will hear artifacts if it is starved for compute resources). Your operating system protects programs from each other by creating an address space for each. When two programs are running, the value of the memory at any given position in one program is independent from the value in the other program. Your operating system offers explicit functionality for sharing certain memory areas that two programs can use to exchange data efficiently.</p> <p>Similarly, file permissions with Unix users/groups or Unix/Windows ACLs (access control lists) are used to isolate users from each other. Programs can share data by accessing the same file if they can both access it. There are special files called sockets that allow for network-like inter-process communication but of course two programs on the same computer can also connect (virtually) via the computer network (no data will actually go through a cable).</p>"},{"location":"slurm/background/#interlude-resource-types","title":"Interlude: Resource Types","text":"<p>As another diversion, let us consider how Unix manages its resources. This is important to understand when requesting resources from the scheduler later on.</p> <p>First of all, a computer might offer a certain feature such as a specific hardware platform or special network connection. Examples for this on the NYU Shanghai HPC are specific Intel processor generations such as <code>haswell</code> or the availability of RoCE networking. You can request these with so-called constraints; they are not allocated to specific jobs.</p> <p>Second, there are resources that are allocated to specific jobs. The most important resources here are:</p> <ul> <li>computing resources (processors/CPUs (central progressing units) and cores, details are explained below),</li> <li>main memory / RAM,</li> <li>special hardware such as GPUs, and</li> <li>(wall-clock) time that a job wants to run as an upper bound.</li> </ul> <p>Generally, once a resource has been allocated to one job, it is not available to another. This means if you allocating more resources to your job that you actually need (overallocation) then those resources are not available to other jobs (whether they are your jobs or those of other users). This will be explained further below.</p>"},{"location":"slurm/background/#nodes-sockets-processors-cores","title":"Nodes, Sockets, Processors, Cores","text":"<p>Regarding compute resources, Slurm differentiates between:</p> <ul> <li>nodes: a compute server,</li> <li>sockets: a socket in the compute server that hosts one physical processor,</li> <li>processor: a CPU or a CPU core in a multi-core computer (all CPUs in the NYU Shanghai HPC are multi-core).</li> </ul> <p>In most cases, you will use one compute node only. When using more than one node, you will need to use some form of message passing, e.g., MPI, so processes on different nodes can communicate. On a single node you would mostly use single- or multi-threaded processes, or multiple processes.</p> <p></p> <p>Above: Slurm's nomenclature for sockets, processors, cores, and threads (from Slurm Documentation).</p> <p>Co-locating processes/threads on the same socket has certain implications that are mostly useful for numerical applications. We will not further go into detail here. Slurm provides many different features of ways to specify allocation of \"pinning\" to specific process locations. If you need this feature, we trust that you find sufficient explanation in the Slurm documentation.</p> <p>Usually, you would allocate multiple cores (a term Slurm uses synonymously with processors) on a single node (allocation on a single node is the default).</p>"},{"location":"slurm/background/#how-scheduling-works","title":"How Scheduling Works","text":"<p>Slurm is an acronym for \"Simple Linux Unix Resource Manager\" (note that the word \"scheduler\" does not occur here). Actually, one classically differentiates between the managing of resources and the scheduling of jobs that use them. The resource manager allocates resources according to a user's request for a job and ensures that there are no conflicts. If the required resources are not available, the scheduler puts the user's job into a queue. Later, when then requested resources become available the scheduler assigns them to the job and runs it. In the following, both resource allocation and the running of the job are described as being done by the scheduler.</p> <p>The interesting case occurs when there are not enough resources available for at least two jobs submitted to the scheduler. The scheduler has to decide how to proceed. Consider the simplified case of only scheduling cores. Each job will request a number of cores. The scheduler will then generate a scheduling plan that might look as follows.</p> <pre><code>core\n  ^\n4 |   |---job2---|\n3 |   |---job2---|\n2 |   |---job2---|\n1 | |--job1--|\n  +--------------------------&gt; t time\n       5    1    1    2\n            0    5    0\n</code></pre> <p><code>job1</code> has been allocated one core and <code>job2</code> has been allocated two cores. When <code>job3</code>, requesting one core is submitted at t = 5, it has to wait at least as long until <code>job1</code> is finished. If <code>job3</code> requested two or more cores, it would have to wait at least until <code>job2</code> also finished.</p> <p>We can now ask several questions, including the following:</p> <ol> <li>What if a job runs for less than the allocated time?     -- In this case, resources become free and the scheduler will attempt to select the next job(s) to run.</li> <li>What if a job runs longer than the allocated time?     -- In this case, the scheduler will send an informative Unix signal to the process first.     The job will be given a bit more time and if it does not exit it will be forcibly terminated.     You will find a note about this at the end of your job log file.</li> <li>What if multiple jobs compete for resources?     -- The scheduler will prefer certain jobs over others using the Slurm Multifactor Priority Plugin.     In practice, small jobs will be preferred over large, users with few used resources in the last month will be favored over heavy consumers, long-waiting jobs will be favored over recently submitted jobs, and many other factors.     You can use the sprio utility to inspect these factors in real-time.</li> <li>How does the scheduler handle new requests?     -- Generally, the scheduler will add new jobs to the waiting queue.     The scheduler regularly adjusts its planning by recalculating job priorities.     Slurm is configured to perform computationally simple schedule recalculations quite often and larger recalculations more infrequently.</li> </ol> <p>Also see the Slurm Frequently Asked Questions.</p> <p>Please note that even if all jobs were known at the start of time, scheduling is still a so-called NP-complete problem. Entire computer science journals and books are dedicated only to scheduling. Things get more complex in the case of online scheduling, in which new jobs can appear at any time. In practice, Slurm does a fantastic job with its heuristics but it heavily relies on parameter tuning. HPC administration is constantly working on optimizing the scheduler settings. Note that you can use the <code>--format</code> option to the <code>squeue</code> command to request that it shows you information about job scheduling (in particular, see the <code>%S</code> field, which will show you the expected start time for a job, assuming Slurm has calculated it). See <code>man squeue</code> for details. If you observe inexplicable behavior, please notify us at <code>shanghai.it.help@nyu.edu</code>.</p>"},{"location":"slurm/background/#slurm-partitions","title":"Slurm Partitions","text":"<p>In Slurm, the nodes of a cluster are split into partitions. Nodes are assigned to one or more partition (see the Job Scheduler section for details). Jobs can also be assigned to one or more partitions and are executed on nodes of the given partition.</p> <p>In the NYUSH HPC, partitions are used to stratify jobs of certain running times and to provide different quality of service (e.g., maximal number of CPU cores available to a user for jobs of a certain running time and size). The Job Scheduler provides further details.</p>"},{"location":"slurm/cheat-sheet/","title":"Slurm Cheat Sheet","text":"<p>This page contains assorted Slurm commands and Bash snippets that should be helpful.</p> <p><code>man</code> pages!</p> <pre><code>$ man sinfo\n$ man scontrol\n$ man squeue\n# etc...\n</code></pre> <p>interactive sessions</p> <pre><code>[hpc@hpclogin ~]$ srun --pty bash\n[hpc@compute132 ~]$ echo \"hello world\"\nhello world\n[hpc@compute132 ~]$ exit\nexit\n[hpc@hpclogin ~]$ \n</code></pre> <p>batch submission</p> <pre><code>[hpc@hpclogin ~]$ sbatch job_script.slurm \nSubmitted batch job 483131\n[hpc@hpclogin ~]$ squeue -u hpc\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n            483131  parallel     test      hpc  R       0:06      1 compute141\n</code></pre> <p>listing nodes</p> <pre><code>$ sinfo -N\n[hpc@hpclogin ~]$ sinfo -N\nNODELIST    NODES PARTITION STATE \ncompute118      1    debug* mix   \ncompute119      1    debug* alloc \ncompute120      1    debug* idle  \ncompute121      1    debug* mix   \ncompute122      1    debug* idle  \ncompute134      1  parallel alloc \ncompute135      1  parallel alloc \ncompute136      1  parallel alloc \ncompute137      1  parallel alloc \ncompute138      1  parallel alloc \ncompute139      1  parallel alloc \ngpu145          1   rooster idle  \ngpu146          1   rooster idle  \ngpu147          1   rooster idle  \ngpu180          1      hebb idle  \ngpu181          1      chem idle  \ngpu182          1        li idle  \ngpu185          1      chem idle  \ngpu186          1    netsys idle  \ngpu187          1    sfscai mix   \ngpu190          1    sfscai mix\n[....]\n\n[hpc@hpclogin ~]$ scontrol show nodes\n[hpc@hpclogin ~]$ scontrol show node compute118\nNodeName=compute118 Arch=x86_64 CoresPerSocket=32 \n   CPUAlloc=32 CPUEfctv=64 CPUTot=64 CPULoad=33.19\n   AvailableFeatures=cpu,g6338\n   ActiveFeatures=cpu,g6338\n[...]\n\n[hpc@hpclogin ~]$ scontrol show node gpu187\nNodeName=gpu187 Arch=x86_64 CoresPerSocket=32 \n   CPUAlloc=13 CPUEfctv=64 CPUTot=64 CPULoad=6.22\n   AvailableFeatures=cpu,g6338,a800\n   ActiveFeatures=cpu,g6338,a800\n   Gres=gpu:a800:8(S:0-1)\n   NodeAddr=10.214.97.187 NodeHostName=gpu187 Version=22.05.6\n   OS=Linux 4.18.0-372.9.1.el8.x86_64 #1 SMP Fri Apr 15 22:12:19 EDT 2022 \n   RealMemory=515372 AllocMem=299008 FreeMem=112490 Sockets=2 Boards=1\n   State=MIXED ThreadsPerCore=1 TmpDisk=0 Weight=400 Owner=N/A MCS_label=N/A\n   Partitions=sfscai \n   BootTime=2023-11-01T11:38:40 SlurmdStartTime=2024-08-06T09:17:19\n   LastBusyTime=2024-09-10T06:36:37\n   CfgTRES=cpu=64,mem=515372M,billing=64,gres/gpu=8\n   AllocTRES=cpu=13,mem=292G,gres/gpu=5\n   CapWatts=n/a\n   CurrentWatts=0 AveWatts=0\n   ExtSensorsJoules=n/s ExtSensorsWatts=0 ExtSensorsTemp=n/s\n</code></pre> <p>queue states</p> <pre><code>[hpc@hpclogin ~]$ squeue -u hpc\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n[....]\n\n[hpc@hpclogin ~]$ squeue -u hpc\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n            483131  parallel     test      hpc  R       4:10      1 compute141\n</code></pre> <p>node resources</p> <pre><code>$ sinfo -o \"%20N  %10c  %10m  %25f  %10G \"\n</code></pre> <p>additional resources such as GPUs</p> <pre><code>$ sinfo -o \"%N %G\"\n</code></pre> <p>listing job details</p> <pre><code>[hpc@hpclogin ~]$ scontrol show job 483133\nJobId=483133 JobName=test\n   UserId=hpc(111222117) GroupId=hpc(111222117) MCS_label=N/A\n   Priority=5248 Nice=0 Account=hpc QOS=normal\n   JobState=RUNNING Reason=None Dependency=(null)\n   Requeue=1 Restarts=0 BatchFlag=1 Reboot=0 ExitCode=0:0\n   RunTime=00:00:08 TimeLimit=00:30:00 TimeMin=N/A\n   SubmitTime=2024-09-11T10:15:15 EligibleTime=2024-09-11T10:15:15\n   AccrueTime=2024-09-11T10:15:15\n   StartTime=2024-09-11T10:15:15 EndTime=2024-09-11T10:45:15 Deadline=N/A\n   SuspendTime=None SecsPreSuspend=0 LastSchedEval=2024-09-11T10:15:15 Scheduler=Main\n   Partition=parallel AllocNode:Sid=hpclogin:2249687\n   ReqNodeList=(null) ExcNodeList=(null)\n   NodeList=compute141\n   BatchHost=compute141\n   NumNodes=1 NumCPUs=1 NumTasks=1 CPUs/Task=1 ReqB:S:C:T=0:0:*:*\n   TRES=cpu=1,mem=2G,node=1,billing=1\n   Socks/Node=* NtasksPerN:B:S:C=1:0:*:* CoreSpec=*\n   MinCPUsNode=1 MinMemoryCPU=2G MinTmpDiskNode=0\n   Features=(null) DelayBoot=00:00:00\n   OverSubscribe=OK Contiguous=0 Licenses=(null) Network=(null)\n   Command=/gpfsnyu/home/hpc/run.slurm\n   WorkDir=/gpfsnyu/home/hpc\n   StdErr=/gpfsnyu/home/hpc/483133.err\n   StdIn=/dev/null\n   StdOut=/gpfsnyu/home/hpc/483133.out\n   Power=\n</code></pre> <pre><code>[hpc@hpclogin ~]$ squeue \n             JOBID PARTITION     NAME   USER ST       TIME  NODES NODELIST(REASON)\n            482984       aml       PT   jh99  R   17:30:02      1 compute183\n            483130     debug session_   dw90  R       8:35      1 compute131\n            483024     debug     bbaa   zg70  R   13:39:44      1 compute130\n            483021     debug     baab   zg70  R   13:52:27      1 compute118\n            482998     debug     abba   zg70  R   16:42:43      1 compute121\n            482997     debug     aabb   zg70  R   16:45:55      1 compute119\n            482996     debug   f2baba   zg70  R   16:51:22      1 compute119\n            482955     debug   n2bbaa   zg70  R   18:29:09      1 compute132\n            482954     debug   n2abba   zg70  R   18:32:13      1 compute130\n            483133  parallel     test   gh40  R       1:27      1 compute141\n            483135  parallel NdU6b100   jm05  R       0:13      1 compute141\n            480230  parallel Moababsc   wr72  R 12-18:36:08      1 compute140\n            480229  parallel Moaabbsc   wr72  R 12-18:38:11      1 compute139\n            480228  parallel Wbbaasca   wr72  R 12-18:41:24      1 compute138\n            480227  parallel Wbabasca   wr72  R 12-18:42:47      1 compute137\n            480226  parallel Wbaabsca   wr72  R 12-18:44:45      1 compute136\n            480225  parallel Wababsca   wr72  R 12-18:46:28      1 compute135\n            480224  parallel Waabbsca   wr72  R 12-18:48:31      1 compute134\n            480231  parallel Moababsc   wr72  R 12-18:30:26      1 compute141\n            483027    sfscai prodigy-  js156  R   13:23:38      1 gpu190\n            483124    sfscai      rec  yl179  R      25:46      1 gpu187\n            483123    sfscai       rd  yl179  R      26:52      1 gpu190\n            483119    sfscai     cold  yl179  R      46:58      1 gpu190\n            483117    sfscai     cold  yl179  R    1:18:48      1 gpu187\n            482628    sfscai  GT-S.sh   ys10  R 1-22:50:19      1 gpu188\n            482907    sfscai      mag   qz86  R   23:21:23      1 gpu190\n            483111    sfscai   POP909  jl187  R    2:05:18      1 gpu190\n            482894    sfscai     bash   bc88  R 1-02:21:24      2 gpu[187-188]\n            483134    sfscai     bash   yg09  R       0:48      1 gpu187\n            483049    sfscai     bash   zz17  R   11:34:46      1 gpu190\n            483057    sfscai ctpph_ad   zz17  R   10:32:32      1 gpu187\n            482970    sfscai ctp_ph_a   zz17  R   17:45:53      1 gpu188\n</code></pre> <pre><code>[hpc@hpclogin ~]$ squeue -o \"%.10i %9P %20j %10u %.2t %.10M %.6D %10R %b\"\n     JOBID PARTITION NAME               USER       ST       TIME  NODES NODELIST(R TRES_PER_NODE\n    482984 aml       PT                   jh99      R   17:31:36      1 compute183 N/A\n    483130 debug     session_desktop_6o   dw90      R      10:09      1 compute131 N/A\n    483024 debug     bbaa                 zg70      R   13:41:18      1 compute130 N/A\n    483021 debug     baab                 zg70      R   13:54:01      1 compute118 N/A\n    482998 debug     abba                 zg70      R   16:44:17      1 compute121 N/A\n    482997 debug     aabb                 zg70      R   16:47:29      1 compute119 N/A\n    482996 debug     f2baba               zg70      R   16:52:56      1 compute119 N/A\n    482955 debug     n2bbaa               zg70      R   18:30:43      1 compute132 N/A\n    482954 debug     n2abba               zg70      R   18:33:47      1 compute130 N/A\n    483133 parallel  test                 gh40      R       3:01      1 compute141 N/A\n    483135 parallel  NdU6b100             jm05      R       1:47      1 compute141 N/A\n    480230 parallel  Moababscan           wr72      R 12-18:37:42      1 compute140 N/A\n    480229 parallel  Moaabbscan           wr72      R 12-18:39:45      1 compute139 N/A\n    480228 parallel  Wbbaascan            wr72      R 12-18:42:58      1 compute138 N/A\n    480227 parallel  Wbabascan            wr72      R 12-18:44:21      1 compute137 N/A\n    480226 parallel  Wbaabscan            wr72      R 12-18:46:19      1 compute136 N/A\n    480225 parallel  Wababscan            wr72      R 12-18:48:02      1 compute135 N/A\n    480224 parallel  Waabbscan            wr72      R 12-18:50:05      1 compute134 N/A\n    480231 parallel  Moababscan           wr72      R 12-18:32:00      1 compute141 N/A\n    483027 sfscai    prodigy-evaluation-1 js556     R   13:25:12      1 gpu190     gres:gpu:1\n    483124 sfscai    rec                  yl379     R      27:20      1 gpu187     gres:gpu:1\n    483123 sfscai    rd                   yl379     R      28:26      1 gpu190     gres:gpu:1\n    483119 sfscai    cold                 yl379     R      48:32      1 gpu190     gres:gpu:1\n    483117 sfscai    cold                 yl379     R    1:20:22      1 gpu187     gres:gpu:1\n    482628 sfscai    GT-S.sh              ys10      R 1-22:51:53      1 gpu188     gres:gpu:1\n    482907 sfscai    mag                  qz86      R   23:22:57      1 gpu190     gres:gpu:2\n    483111 sfscai    POP909               jl087     R    2:06:52      1 gpu190     gres:gpu:1\n    482894 sfscai    bash                 bc88      R 1-02:22:58      2 gpu[187-18 gres:gpu:2\n    483134 sfscai    bash                 yg09      R       2:22      1 gpu187     gres:gpu:1\n    483049 sfscai    bash                 zz17      R   11:36:20      1 gpu190     gres:gpu:1\n    483057 sfscai    ctpph_adp            zz17      R   10:34:06      1 gpu187     gres:gpu:1\n    482970 sfscai    ctp_ph_adp           zz17      R   17:47:27      1 gpu188     gres:gpu:1\n</code></pre> <pre><code>[hpc@hpclogin ~]$ sinfo \nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST\nparallel     up 20-00:00:0      1    mix compute141\nparallel     up 20-00:00:0      7  alloc compute[134-140]\nparallel     up 20-00:00:0      3   idle compute[142-144]\nrooster      up   infinite      4   idle gpu[145-148]\nhebb         up   infinite      1   idle gpu180\ndebug*       up 7-00:00:00      1   resv compute133\ndebug*       up 7-00:00:00      3    mix compute[118,121,132]\ndebug*       up 7-00:00:00      3  alloc compute[119,130-131]\ndebug*       up 7-00:00:00      9   idle compute[120,122-129]\nchem         up   infinite      2   idle gpu[181,185]\nli           up   infinite      1   idle gpu182\naml          up   infinite      1    mix compute183\naml          up   infinite      2   idle compute[184,189]\nnetsys       up   infinite      1   idle gpu186\nsfscai       up 2-00:00:00      3    mix gpu[187-188,190]\n</code></pre>"},{"location":"slurm/commands-sacct/","title":"Slurm Command: <code>sacct</code>","text":"<p>Perform queries to the Slurm accounting information.</p> <p>Representative Example</p> <pre><code>[gh2440@hpclogin ~]$ sacct -j 483188\nJobID           JobName  Partition    Account  AllocCPUS      State ExitCode \n------------ ---------- ---------- ---------- ---------- ---------- -------- \n483188               PT        aml     jh3899          9    RUNNING      0:0 \n483188.batch      batch                jh3899          9    RUNNING      0:0 \n483188.exte+     extern                jh3899          9    RUNNING      0:0 \n483188.0         matlab                jh3899          9    RUNNING      0:0\n</code></pre> <p>The <code>sacct</code> command displays information from the Slurm accounting service. The Slurm scheduler only knows about active or completing (very recently active) jobs. The accouting system also knows about currently running jobs so it is the more robust way to query information about jobs. However, not all information is available to the accouting system, so <code>scontrol show job</code> and <code>squeue</code> provide more information about current and pending jbos.</p> <p>Slurm Documentation: sacct</p> <p>Please also see the official Slurm documentation on sacct.</p>"},{"location":"slurm/commands-sacct/#important-arguments","title":"Important Arguments","text":"<p>Also see all important arguments of the <code>sbatch</code> command.</p> <ul> <li><code>--jobs</code>   -- The job(s) to query for.</li> <li><code>--format</code>   -- Define attributes to retrieve.</li> <li><code>--long</code>   -- Get a lot of information from the database, consider to pipe into <code>| less -S</code>.</li> </ul>"},{"location":"slurm/commands-sacct/#notes","title":"Notes","text":"<ul> <li>If you need to get information about a job regardless of it being in the past, present, or future execution, use <code>sacct</code> over <code>scontrol</code> and <code>squeue</code>.</li> </ul>"},{"location":"slurm/commands-sattach/","title":"Slurm Command: <code>sattach</code>","text":"<p>The <code>sattach</code> command allows you to connect the standard input, output, and error streams to your current terminals ession.</p> <p>Representative Example</p> <pre><code>hpc-login-1:~$ sattach 12345.0\n[...output of your job...]\nmed0211:~$ [Ctrl-C]\nhpc-login-1:~$\n</code></pre> <p>Press <code>Ctrl-C</code> to detach from the current session. Please note that you will have to give the job ID as well as step step ID. For most cases, simply append <code>\".0\"</code> to your job ID.</p> <p>Slurm Documentation: sattach</p> <p>Please also see the official Slurm documentation on srun.</p>"},{"location":"slurm/commands-sattach/#important-arguments","title":"Important Arguments","text":"<ul> <li><code>--pty</code>     -- Execute task zero in pseudo terminal.</li> <li><code>--verbose</code>     -- Increase verbosity of <code>sattach</code>.</li> </ul>"},{"location":"slurm/commands-sbatch/","title":"Slurm Command: <code>sbatch</code>","text":"<p>The <code>sbatch</code> command allows you to put a job into the scheduler's queue to be executed at a later time.</p> <p>Representative Example</p> <pre><code># Execute job.sh in partition medium with 4 threads and 4GB of RAM total for a\n# running time of up to one day.\n[hpc@hpclogin ~]$ sbatch --partition=debug --mem=4G --ntasks 4 --time=1-00 job.sh \nSubmitted batch job JOB_ID\n</code></pre> <p>The command will create a batch job and add it to the queue to be executed at a later point in time.</p> <p>Slurm Documentation: sbatch</p> <p>Please also see the official Slurm documentation on sbatch.</p>"},{"location":"slurm/commands-sbatch/#important-arguments","title":"Important Arguments","text":"<ul> <li><code>--array</code>     -- Submit jobs as array jobs.     Also see the section [#array-jobs] below.</li> <li><code>--nodes</code>     -- The number of nodes to allocate.     This is only given here as an important argument as the maximum number of nodes allocatable to any partition but <code>debug</code> is set to one (1).     This is done as there are few users on the NYUSH HPC that actually use multi-node paralleilsm.     Rather, most users will use multi-core parallelism and might forget to limit the number of nodes which causes inefficient allocation of resources.</li> <li><code>--cpus-per-task</code>     -- This corresponds to the number of CPU cores allocated to each task.</li> <li><code>--mem</code>     -- The memory to allocate for the job.     As you can define minimal and maximal number of tasks/CPUs/cores, you could also specify <code>--mem-per-cpu</code> and get more flexible scheduling of your job.</li> <li><code>--gres</code>     -- Generic resource allocation.     On the NYUSH HPC, this is only used for allocating GPUS, e.g., with <code>--gres=gpu:2</code>, a user could allocate two NVIDIA GPUs on the same host.</li> <li><code>--partition</code>     -- The partition to run in.     Also see the Job Scheduler section.</li> <li><code>--time</code>     -- Specify the running time, see <code>man sbatch</code> or the official Slurm documentation on srun for supported formats.     **Please note that the DRMA API only accepts the <code>hours:minutes</code> format.</li> <li><code>--dependency</code>     -- Specify dependencies on other jobs, e.g., using <code>--dependency afterok:JOBID</code> to only execute if the job with ID <code>JOBID</code> finished successfully or <code>--dependency after:JOBID</code> to wait for a job to finish regardless of its termination status.</li> <li><code>--constraint</code>     -- Require one or more features from your node.     On the NYUSH HPC, the processor generation is defined as a feature on the nodes, e.g., <code>haswell</code>, or special networking such as <code>RoCe</code>.     You can have a look at <code>/etc/slurm/slurm.conf</code> on all configured features.</li> <li><code>--output</code>     -- The path to the output log file (by default joining stdout and stderr, see the man page on <code>--error</code> on how to redirect stderr separately).     A various number of placeholders is available, see the \"filename pattern\" section of <code>man sbatch</code> or the official Slurm documentation on srun.</li> <li><code>--mail-type=&lt;type&gt;</code>   -- Send out notifications by email when an event occurs.   Use <code>FAIL</code> to get emails when your job fails.   Also see the documentation of sbatch in the Slurm manual.</li> <li><code>--mail-user=&lt;email&gt;</code>   -- The email address to send to.   Must end in <code>@nyu.edu</code>.</li> </ul> <p>Ensure your <code>--output</code> directory exists!</p> <p>In the case that the path to the log/output file does not exist, the job will just fail. <code>scontrol show job ID</code> will report <code>JobState=FAILED Reason=NonZeroExitCode</code>. Regrettably, no further information is displayed to you as the user. Always check that the path to the directories in <code>StdErr</code> and <code>StdOut</code> exists when checking <code>scontrol show job ID</code>.</p>"},{"location":"slurm/commands-sbatch/#other-arguments","title":"Other Arguments","text":"<ul> <li><code>--job-name</code></li> </ul>"},{"location":"slurm/commands-sbatch/#job-scripts","title":"Job Scripts","text":"<p>Also see the section Slurm Job Scripts on how to embed the <code>sbatch</code> parameters in <code>#SBATCH</code> lines.</p>"},{"location":"slurm/commands-sbatch/#array-jobs","title":"Array Jobs","text":"<p>If you have many (say, more than 10) similar jobs (e.g., when performing a grid search), you can also use array jobs. However, you should also consider whether it would make sense to increase the time of your jobs, e.g, to be at least ~10min.</p> <p>You can submit array jobs by specifying <code>-a EXPR</code> or <code>--array EXPR</code> where <code>EXPR</code> is a range or a list (of course, you can also add this as an <code>#SBATCH</code> header in your job script). For example:</p> <pre><code>[hpc@hpclogin ~]$ sbatch -a 1-3 job.sh \n[hpc@hpclogin ~]$ sbatch -a 1,2,5-10 job.sh\n</code></pre> <p>This will submit <code>job.sh</code> with certain variables set:</p> <ul> <li><code>SLURM_ARRAY_JOB_ID</code> -- the ID of the first job</li> <li><code>SLURM_ARRAY_TASK_ID</code> -- the index of the job in the array</li> <li><code>SLURM_ARRAY_TASK_COUNT</code> -- number of submitted jobs in array</li> <li><code>SLURM_ARRAY_TASK_MAX</code> -- higehst job array index value</li> <li><code>SLURM_ARRAY_TASK_MIN</code> -- lowest job array index value</li> </ul> <p>Using array jobs has several advantages:</p> <ul> <li>It greatly reduces the load on the Slurm scheduler.</li> <li>You do not need to submit in a loop, but rather</li> <li>You can use a single command line.</li> </ul> <p>Also see Slurm documentation on job arrays.</p> <p>For example, if you submit <code>sbatch --array=1-3 grid_search.sh</code> and slurm responsds with <code>Submitted batch job 36</code> then the script will be run three times with the following prameters set:</p> <pre><code>SLURM_JOB_ID=36\nSLURM_ARRAY_JOB_ID=36\nSLURM_ARRAY_TASK_ID=1\nSLURM_ARRAY_TASK_COUNT=3\nSLURM_ARRAY_TASK_MAX=3\nSLURM_ARRAY_TASK_MIN=1\n\nSLURM_JOB_ID=37\nSLURM_ARRAY_JOB_ID=36\nSLURM_ARRAY_TASK_ID=2\nSLURM_ARRAY_TASK_COUNT=3\nSLURM_ARRAY_TASK_MAX=3\nSLURM_ARRAY_TASK_MIN=1\n\nSLURM_JOB_ID=38\nSLURM_ARRAY_JOB_ID=36\nSLURM_ARRAY_TASK_ID=3\nSLURM_ARRAY_TASK_COUNT=3\nSLURM_ARRAY_TASK_MAX=3\nSLURM_ARRAY_TASK_MIN=1\n</code></pre>"},{"location":"slurm/commands-sbatch/#notes","title":"Notes","text":"<ul> <li>This is the primary entry point for creating batch jobs to be executed at a later point in time.</li> <li>As with all jobs allocated by Slurm, interactive sessions executed with <code>sbatch</code> are governed by resource allocations, in particular:<ul> <li><code>sbatch</code> jobs have a maximal running time set,</li> <li><code>sbatch</code> jobs have a maximal memory and number of cores set, and</li> <li>also see <code>scontrol show job JOBID</code>.</li> </ul> </li> </ul>"},{"location":"slurm/commands-scancel/","title":"Slurm Command: <code>scancel</code>","text":"<p>Terminate a running Slurm job.</p> <p>Representative Example</p> <pre><code>[hpc@hpclogin ~]$ scancel 1703828\n[hpc@hpclogin ~]$\n</code></pre> <p>This command allows to terminate one or more running jobs (of course, non-superusers can only terminate their own jobs).</p> <p>Slurm Documentation: scancel</p> <p>Please also see the official Slurm documentation on srun.</p>"},{"location":"slurm/commands-scontrol/","title":"Slurm Command: <code>scontrol</code>","text":"<p>The <code>scontrol</code> allows to query detailed information from the scheduler and perform manipulation. Object manipulation is less important for normal users.</p> <p>Representative Example</p> <p>```bash</p> <p>[hpc@hpclogin ~]$ scontrol show job 482955     JobId=482955 JobName=n2bbaa        UserId=userid(userid) GroupId=groupId(groupId) MCS_label=N/A        Priority=1052 Nice=0 Account=jz2 QOS=normal        [...] </p> <pre><code>[hpc@hpclogin ~]$ scontrol show node compute[118-122]\nNodeName=compute118 Arch=x86_64 CoresPerSocket=32 \n   CPUAlloc=0 CPUEfctv=64 CPUTot=64 CPULoad=0.00\n   AvailableFeatures=cpu,g6338\n   ActiveFeatures=cpu,g6338\n   [...]\n\n[hpc@hpclogin ~]$ scontrol show partition debug\nPartitionName=debug\n   AllowGroups=ALL AllowAccounts=ALL AllowQos=normal\n   AllocNodes=ALL Default=YES QoS=N/A\n   DefaultTime=00:30:00 DisableRootJobs=NO ExclusiveUser=NO GraceTime=0 Hidden=NO\n   [...]\n</code></pre> <p>```</p> <p>This command allows to query all information for an object from Slurm, e.g., jobs, nodes, or partitions. The command also accepts ranges of jobs and hosts. It is most useful to get the information of one or a few objects from the scheduler.</p> <p>Slurm Documentation: scontrol</p> <p>Please also see the official Slurm documentation on scontrol.</p>"},{"location":"slurm/commands-scontrol/#important-sub-commands","title":"Important Sub commands","text":"<ul> <li><code>scontrol show job</code>     -- Show details on jobs.</li> <li><code>scontrol show partition</code>     -- Show details on partitions.</li> <li><code>scontrol show node</code>     -- Show details on nodes.</li> <li><code>scontrol help</code>     -- Show help.</li> <li><code>scontrol</code>     -- Start an interactive scontrol shell / REPL (read-eval-print loop).</li> </ul>"},{"location":"slurm/commands-scontrol/#notes","title":"Notes","text":"<ul> <li><code>scontrol</code> can only work on jobs that are pending (in the queue), running, or in \"completing' state.</li> <li>For jobs that have finished, you have to use Slurm's accounting features, e.g., with the <code>sacct</code> command.</li> </ul>"},{"location":"slurm/commands-sinfo/","title":"Slurm Command: <code>sinfo</code>","text":"<p>The <code>sinfo</code> command allows you to query the current cluster status.</p> <p>Representative Example</p> <pre><code>[gh2440@hpclogin ~]$ sinfo \nPARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST\nparallel     up 20-00:00:0      1    mix compute141\nparallel     up 20-00:00:0      7  alloc compute[134-140]\nparallel     up 20-00:00:0      3   idle compute[142-144]\nrooster      up   infinite      4   idle gpu[145-148]\nhebb         up   infinite      1   idle gpu180\ndebug*       up 7-00:00:00      1   resv compute133\ndebug*       up 7-00:00:00      4    mix compute[119,121,130,132]\ndebug*       up 7-00:00:00      2  alloc compute[120,131]\ndebug*       up 7-00:00:00      9   idle compute[118,122-129]\nchem         up   infinite      2   idle gpu[181,185]\nli           up   infinite      1   idle gpu182\naml          up   infinite      1    mix compute183\naml          up   infinite      2   idle compute[184,189]\nnetsys       up   infinite      1   idle gpu186\nsfscai       up 2-00:00:00      2    mix gpu[188,190]\nsfscai       up 2-00:00:00      1   idle gpu187\n[gh2440@hpclogin ~]$ sinfo --summarize\nPARTITION AVAIL  TIMELIMIT   NODES(A/I/O/T) NODELIST\nparallel     up 20-00:00:0         8/3/0/11 compute[134-144]\nrooster      up   infinite          0/4/0/4 gpu[145-148]\nhebb         up   infinite          0/1/0/1 gpu180\ndebug*       up 7-00:00:00        6/10/0/16 compute[118-133]\nchem         up   infinite          0/2/0/2 gpu[181,185]\nli           up   infinite          0/1/0/1 gpu182\naml          up   infinite          1/2/0/3 compute[183-184,189]\nnetsys       up   infinite          0/1/0/1 gpu186\nsfscai       up 2-00:00:00          2/1/0/3 gpu[187-188,190]\n</code></pre> <p>This command will summaries the state of nodes by different criteria (e.g., by partition or globally).</p> <p>Slurm Documentation: sinfo</p> <p>Please also see the official Slurm documentation on srun.</p>"},{"location":"slurm/commands-sinfo/#important-arguments","title":"Important Arguments","text":"<p>Also see all important arguments of the <code>sinfo</code> command.</p> <ul> <li><code>--summarize</code>     -- Summarize the node state by partition.</li> <li><code>--nodes</code>     -- Select the nodes to show the status for, e.g., display the status of all GPU nodes with <code>sinfo -n med030[1-4]</code>.</li> </ul>"},{"location":"slurm/commands-sinfo/#node-states","title":"Node States","text":"<p>The most important node states are:</p> <ul> <li><code>down</code> -- node is marked as offline</li> <li><code>draining</code> -- node will not accept any more jobs but has jobs running on it</li> <li><code>drained</code> -- node will not accept any more jobs and has no jobs running on it, but is not offline yet</li> <li><code>idle</code> -- node is ready to run jobs</li> <li><code>allocated</code> -- node is fully allocated (e.g., CPU, RAM, or GPU limit has been reached)</li> <li><code>mixed</code> -- node is running jobs but there is space for more</li> </ul>"},{"location":"slurm/commands-sinfo/#notes","title":"Notes","text":"<ul> <li>Also see the Slurm Format Strings section.</li> </ul>"},{"location":"slurm/commands-squeue/","title":"Slurm Command: <code>squeue</code>","text":"<p>The <code>squeue</code> command allows you to view currently running and pending jobs.</p> <p>Representative Example</p> <pre><code>[hpc@hpclogin ~]$ squeue\n         JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n       1583165   highmem 20200702 usr      PD       0:00      1 (DependencyNeverSatisfied)\n       1605901  critical variant_ holtgrem PD       0:00      1 (DependencyNeverSatisfied)\n       1605902  critical variant_ holtgrem PD       0:00      1 (Dependency)\n       1605905  critical variant_ holtgrem PD       0:00      1 (DependencyNeverSatisfied)\n       1605916  critical wgs_sv_c holtgrem PD       0:00      1 (Dependency)\n       1607103    medium wgs_sv_a holtgrem PD       0:00      1 (DependencyNeverSatisfied)\n[...]\n</code></pre> <p>Slurm Documentation: squeue</p> <p>Please also see the official Slurm documentation on squeue.</p>"},{"location":"slurm/commands-squeue/#important-arguments","title":"Important Arguments","text":"<ul> <li><code>--nodelist</code>     -- Only display jobs running on certain nodes (e.g., GPU nodes).</li> <li><code>--format</code>     -- Define the format to print, see <code>man squeue</code> for details.     See below for a format string that includes the jobid, partition, job name, user name, job status, running time, number of nodes, number of CPU cores, and allocated GPUs.</li> </ul>"},{"location":"slurm/commands-squeue/#notes","title":"Notes","text":"<p>The following aliases in <code>~/.bashrc</code> will allow you to print a long and informative <code>squeue</code> output with <code>sq</code>, pipe it into less with <code>sql</code>, get only your jobs (adjust the <code>alias</code> to your account) using <code>sqme</code> and pipe that into less with <code>sqmel</code>.</p> <pre><code>alias sq='squeue -o \"%.10i %9P %60j %10u %.2t %.10M %.6D %.4C %10R %b\" \"$@\"'\nalias sql='sq \"$@\" | less -S'\nalias sqme='sq -u YOURUSER_c_or_m \"$@\"'\nalias sqmel='sqme \"$@\" | less -S'\n</code></pre>"},{"location":"slurm/commands-srun/","title":"Slurm Command: <code>srun</code>","text":"<p>The <code>srun</code> command allows you to run a command now.</p> <p>Representative Example</p> <pre><code>[hpc@hpclogin ~]$ srun --pty bash -i\n[hpc@compute130 ~]$ \n</code></pre> <p>The command will perform a resource allocation with the scheduler (and wait until it has allocated the requested resources) first. Most importantly, you can specify the <code>--pty</code> argument which will connect the current terminal's standard output, error, and input to your current one. This allows you to run interactive jobs such as shells with <code>srun --pty bash -i</code>.</p> <p>Slurm Documentation: srun</p> <p>Please also see the official Slurm documentation on srun.</p>"},{"location":"slurm/commands-srun/#important-arguments","title":"Important Arguments","text":"<p>Also see all important arguments of the <code>sbatch</code> command.</p> <ul> <li><code>--pty</code>   -- Connect current terminal to the job's stdoud/stderr/stdin.</li> <li><code>--x11</code>   -- Setup X11 forwarding.</li> <li><code>--immediate</code>   -- Immediately terminate if the resources to run the job are not available, do not wait.</li> <li><code>--test-only</code>   -- Don't run anything, but only estimate when the job would be scheduled.</li> </ul>"},{"location":"slurm/commands-srun/#notes","title":"Notes","text":"<ul> <li>This is the primary entry point for creating interactive shell sessions on the cluster.</li> <li>As with all jobs allocated by Slurm, interactive sessions executed with <code>srun</code> are governed by resource allocations, in particular:<ul> <li><code>srun</code> jobs have a maximal running time set,</li> <li><code>srun</code> jobs have a maximal memory and number of cores set, and</li> <li>also see <code>scontrol show job JOBID</code>.</li> </ul> </li> </ul>"},{"location":"slurm/format-strings/","title":"Slurm Command Format Strings","text":"<p>In the sections Slurm Quickstart and Slurm Cheat Sheet, we have seen that <code>sinfo</code> and <code>squeue</code> allow for the compact display partitions/nodes and node information. In contrast, <code>scontrol show job &lt;id&gt;</code> and <code>scontrol show partition &lt;id&gt;</code> and <code>scontrol show node &lt;id&gt;</code> show comprehensive information that quickly gets hard to comprehend for multiple entries.</p> <p>Now you might ask: is there anything in between? And: yes, there is.</p> <p>You can tune the output of <code>sinfo</code> and <code>squeue</code> using parameters, in particular by providing format strings. All of this is described in the man pages of the commands that you can display with <code>man sinfo</code> and <code>man squeue</code> on the cluster.</p>"},{"location":"slurm/format-strings/#tuning-sinfo-output","title":"Tuning <code>sinfo</code> Output","text":"<p>Notable arguments of <code>sinfo</code> are:</p> <ul> <li><code>-N, --Node</code> -- uncompress the usual lines and display one line per node and partition.</li> <li><code>-s, --summarize</code> -- compress the node state, more compact display.</li> <li><code>-R, --list-reasons</code> -- for nodes that are not up, display reason string provided by admin.</li> <li><code>-o &lt;fmt&gt;, --format=&lt;fmt&gt;</code> -- use format string for display.</li> </ul> <p>The most interesting argument is <code>-o/--format</code>. The man page lists the following values that are used when using other arguments. In other words, many of the display modifications could also be applied with <code>-o/--format</code>.</p> <pre><code>default        \"%#P %.5a %.10l %.6D %.6t %N\"\n--summarize    \"%#P %.5a %.10l %.16F  %N\"\n--long         \"%#P %.5a %.10l %.10s %.4r %.8h %.10g %.6D %.11T %N\"\n--Node         \"%#N %.6D %#P %6t\"\n--long --Node  \"%#N %.6D %#P %.11T %.4c %.8z %.6m %.8d %.6w %.8f %20E\"\n--list-reasons \"%20E %9u %19H %N\"\n--long --list-reasons\n                \"%20E %12U %19H %6t %N\"\n</code></pre> <p>The best way to learn more about this is to play around with <code>sinfo -o</code>, starting out with one of the format strings above. Details about the format strings are described in <code>man sinfo</code>. Some remarks here:</p> <ul> <li><code>%&lt;num&gt;&lt;char&gt;</code> displays the value represented by <code>&lt;char&gt;</code> padded with spaces to the right such that a width of <code>&lt;num&gt;</code> is reached,</li> <li><code>%.&lt;num&gt;&lt;char&gt;</code> displays the value represented by <code>&lt;char&gt;</code> padded with spaces to the left such that a width of <code>&lt;num&gt;</code> is reached, and</li> <li><code>%#&lt;char&gt;</code> displays the value represented by <code>&lt;char&gt;</code> padded with spaces to the max length of the value represented by <code>&lt;char&gt;</code> (this is a \"virtual\" value, used internally only, you cannot use this and you will have to place an integer here).</li> </ul> <p>For example, to create a grouped display with reasons for being down use:</p> <pre><code> $ sinfo -o \"%10P %.5a %.10l %.16F  %40N %E\"\nPARTITION  AVAIL  TIMELIMIT   NODES(A/I/O/T)  NODELIST                                 REASON\ndebug*        up    8:00:00        0/0/16/16  med[0703-0710,0740-0742,0744-0745,0749,0 bogus node\ndebug*        up    8:00:00      18/98/0/116  med[0104-0124,0127,0133-0148,0151-0164,0 none\nmedium        up 7-00:00:00        0/0/16/16  med[0703-0710,0740-0742,0744-0745,0749,0 bogus node\nmedium        up 7-00:00:00      18/98/0/116  med[0104-0124,0127,0133-0148,0151-0164,0 none\nlong          up 28-00:00:0        0/0/16/16  med[0703-0710,0740-0742,0744-0745,0749,0 bogus node\nlong          up 28-00:00:0      18/98/0/116  med[0104-0124,0127,0133-0148,0151-0164,0 none\ncritical      up 7-00:00:00        0/0/16/16  med[0703-0710,0740-0742,0744-0745,0749,0 bogus node\ncritical      up 7-00:00:00      18/98/0/116  med[0104-0124,0127,0133-0148,0151-0164,0 none\nhighmem       up 14-00:00:0          0/4/0/4  med[0401-0404]                           none\ngpu           up 14-00:00:0          3/1/0/4  med[0301-0304]                           none\n</code></pre>"},{"location":"slurm/format-strings/#tuning-squeue-output","title":"Tuning <code>squeue</code> Output","text":"<p>The standard squeue output might yield the following</p> <pre><code> $ squeue | head\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n              3149    medium variant_ holtgrem PD       0:00      1 (Dependency)\n              1177    medium     bash jweiner_  R 6-03:32:41      1 med0127\n              1192    medium     bash jweiner_  R 5-12:48:57      1 med0127\n              1210       gpu     bash hilberta  R 2-16:10:51      1 med0304\n              1213      long     bash schubacm  R 2-15:22:44      1 med0127\n              2401       gpu     bash ramkem_c  R 2-10:55:10      1 med0303\n              3063      long     bash schubacm  R 1-09:52:54      1 med0127\n              3066      long     bash schubacm  R 1-09:52:04      1 med0127\n              3147    medium ngs_mapp holtgrem  R 1-03:13:42      1 med0148\n</code></pre> <p>Looking at <code>man squeue</code>, we learn that the default format strings are:</p> <pre><code>default        \"%.18i %.9P %.8j %.8u %.2t %.10M %.6D %R\"\n-l, --long     \"%.18i %.9P %.8j %.8u %.8T %.10M %.9l %.6D %R\"\n-s, --steps    \"%.15i %.8j %.9P %.8u %.9M %N\"\n</code></pre> <p>This looks a bit wasteful. Let's cut down on the padding of the job ID and expand on the job name and remove some right paddings.</p> <pre><code> $ squeue -o \"%.6i %9P %30j %.10u %.2t %.10M %.6D %R %b\" | head\n JOBID PARTITION NAME                                 USER ST       TIME  NODES NODELIST(REASON)\n  3149 medium    variant_calling                holtgrem_c PD       0:00      1 (Dependency)\n  1177 medium    bash                            jweiner_m  R 6-03:35:55      1 med0127\n  1192 medium    bash                            jweiner_m  R 5-12:52:11      1 med0127\n  1210 gpu       bash                           hilberta_c  R 2-16:14:05      1 med0304\n  1213 long      bash                           schubacm_c  R 2-15:25:58      1 med0127\n  2401 gpu       bash                             ramkem_c  R 2-10:58:24      1 med0303\n  3063 long      bash                           schubacm_c  R 1-09:56:08      1 med0127\n  3066 long      bash                           schubacm_c  R 1-09:55:18      1 med0127\n  3147 medium    ngs_mapping                    holtgrem_c  R 1-03:16:56      1 med0148\n</code></pre>"},{"location":"slurm/format-strings/#displaying-resources","title":"Displaying Resources","text":"<p>Now display how many of our internal projects still exist.</p> <pre><code> $ squeue -o \"%.6i %9P %30j %.10u %.2t %.10M %.6D %10R %s\" | head\n</code></pre> <p>The next steps are (TODO):</p> <ul> <li>setup of certificate for containers</li> <li>opening firewall apropriately</li> <li>integrate with openmpi documentation</li> </ul>"},{"location":"slurm/job-scripts/","title":"Slurm Job Scripts","text":"<p>This page describes how to create SLURM job scripts.</p> <p>SLURM job scripts look as follows. On the top you have lines starting with <code>#SBATCH</code>. These appear as comments to bash scripts. These lines are interpreted by <code>sbatch</code> in the same way as command line arguments. That is, when later submitting the script with <code>sbatch my-job.sh</code> you can either have the parameter to the <code>sbatch</code> call or in the file.</p> <p>Multi-Node Allocation in Slurm</p> <p>Classically, jobs on HPC systems are written in a way that they can run on multiple nodes at once, using the network to communicate. Slurm comes from this world and when allocating more than one CPU/core, it might allocate them on different nodes. Please use <code>--nodes=1</code> to force Slurm to allocate them on a single node.</p> <p>Creating the Script</p> <pre><code>[hpc@hpclogin ~]$ cat &gt;script.sh &lt;&lt;\"EOF\"\n#!/bin/bash\n#\n#SBATCH --job-name=this-is-my-job\n#SBATCH --output=output.txt\n#\n#SBATCH --ntasks=1\n#SBATCH --nodes=1\n#SBATCH --time=10:00\n#SBATCH --mem-per-cpu=100M\n\ndate\n\nhostname\n&gt;&amp;2 echo \"Hello World\"\n\nsleep 1m\n\ndate\nEOF\n</code></pre> <p>Also see the SLURM Rosetta Stone for more options.</p> <p>Submit, Look at Queue &amp; Result</p> <pre><code>[hpc@hpclogin ~]$ sbatch script.sh \nSubmitted batch job 315\n[hpc@hpclogin ~]$ squeue  -u holtgrem_c\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON) \n               315     debug this-is-      hpc  R       0:40      1 compute118 \n[hpc@hpclogin ~]$ sleep 2m\n[hpc@hpclogin ~]$ squeue  -u hpc\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON) \n[hpc@hpclogin ~]$ cat output.txt \nWed Sep 11 10:24:07 CST 2024\ncompute132\nHello World\n</code></pre>"},{"location":"slurm/memory-allocation/","title":"Memory Allocation","text":"<p>Memory allocation is one of the topics that users find confusing most often. This section first gives some technical background and then explains how to implement this properly with Slurm on the NYUSH HPC.</p>"},{"location":"slurm/memory-allocation/#technical-background","title":"Technical Background","text":"<p>Technical Background Summary</p> <ul> <li>virtual memory is what your programs tells the operating system it wants to use</li> <li>resident set size is the amount of memory that your program actually uses</li> <li>most memory will be allocated on the heap</li> </ul> <p>Main memory used to be one of the most important topics when programming, as computers had so little. There is the infamous quote \"640KB ought ot be enough for anybody\" wrongly attribute to Bill Gates which refers to the fact that early computers could only address that amount of memory. In MS DOS, one had to use special libraries for a program to use more memory. Today, computers are very fast and memory is plentiful and people can (rightfully) forget about memory allocation ... as long as they don't use \"much\" memory by today's standards.</p> <p>The Linux operating system differentiates between the following types of memory:</p> <ul> <li>virtual memory size (vsize), the amount of memory that a process (virtually) allocates,</li> <li>resident set size (rss), the amount of memory actually used and currently in the computer's main memory,</li> <li>the swap memory usage, the amount of active memory that is not present in main memory but on the computer's disk,</li> <li>sometimes, the shared memory is also interesting, and</li> <li>it might be interesting to know about heap and stack size.</li> </ul> <p>Note that above we are talking about processes, not Slurm jobs yet. Let us look at this in detail:</p> <p>Each program uses some kind of memory management. For example, in C the <code>malloc</code> and <code>free</code> functions manually allocate and free memory while in Java, R, and Python, memory allocation and release is done automatically using a concept called garbage collection. Each program starts with a certain virtual memory size, that is the amount of memory it can address, say 128MB. When the program allocates memory, the memory allocation mechanism will check whether it has sufficient space left. If not, it will request an increase in virtual memory from the operating system, e.g., to 256MB. If this fails then the program can try to handle the error, e.g., terminate gracefully, but many programs will just panic and stop. Otherwise, the program will get access to more memory and happily continue to run.</p> <p>However, programs can allocate humonguous amounts of virtual memory and only use a little. Memory is organized in \"pages\" (classically these are 4096 bytes each, but can be larger using so-called \"huge page\" features). The operating system tracks which memory pages are actually used by a process. The total size of these pages is called the resident set size: the amount of memory that is actually currently used by a program. Programs can also mark pages as unused again, thus freeing resident memory and can also decrease their virtual memory.</p> <p>In some cases it is still interesting to use swap memory. Here, the contents of resident memory are copied to disk by the operating system. This process is completely transparent to the program; the data remains available at the original positions in the virtual memory! However, accessing it will take some time as it must be read back into main memory from the disk. In this way, it was possible for a computer with 4MB of RAM and a disk of 100MB to run programs that used 8MB. Of course, this was only really useable for programs that ran in the background. One could really feel the latency if a graphical program was using swapped memory (you could actually hear the hard drive working). Today, swap storage is normally only relevant when put your computer into hibernation. Given the large main memory on the cluster nodes, their small local hard drives (just used for loading the operating system), and the extreme slowness involved in using swapped memory, the NYUSH HPC nodes have no swap memory allocated.</p> <p>Most HPC users will also use shared memory, at least implicitly. Whenever a program uses <code>fork</code> to create a subprocess (BTW, this is not a thread), the program can chose to \"copy\" its current address space. The second process then has access to the same memory than the parent process in a copy-on-write fashion. This allows, for example, pre-loading a database, and also allows the use of already loaded library code by the child process as well. If the child process writes to the copy-on-write memory of the parent, the relevant memory page will be copied and attributed to the child.</p> <p>Two or more processes can share the same memory explicitly. This is usually used for inter-process communication but the Bowtie program uses it for sharing the memory of indices. For example, the Python <code>multiprocessing</code> module will use this, including if you have two MPI processes running on the same host.</p> <p>Memory is also separated into segments, the most interesting ones are heap and stack memory. For compiled languages, memory can be allocated on either. For C, an <code>int</code> variable will be allocated on the stack. Every time you call a function, a stack frame is created in memory to hold the local variables and other information for the duration of the function execution. The stack thus grows through function calls made by your program and shrinks when the functions return. The stack size for a process is limited (by <code>ulimit -s</code>) and a program that goes too deep (e.g., via infinite recursion) will be terminated by the operating system if it exceeds this limit. Again in C, <code>int * ptr = (int *)malloc(10 * sizeof(int));</code> will allocate memory for one variable (an integer pointer) on the stack and memory for 10 integers on the heap. When the function returns, the <code>ptr</code> variable on the stack will be freed but to free the array of integers, you'd have to call <code>free(ptr)</code>. If the memory is not freed then this constitutes a memory leak, but that is another topic.</p> <p>Other relevant segments are code, where the compiled code lives, and data, where static data such as strings displayed to the user are stored. As a side node, in interpreted languages such as R or Python, the code and data segments will refer to the code and data of Python while the actual program text will be on the heap.</p>"},{"location":"slurm/memory-allocation/#memory-allocation-in-slurm","title":"Memory Allocation in Slurm","text":"<p>Memory Allocation in Slurm Summary</p> <ul> <li>most user will simply use <code>--mem=&lt;size&gt;</code> (e.g., <code>&lt;size&gt;=3G</code>) to allocate memory per node</li> <li>both interactive <code>srun</code> and batch <code>sbatch</code> jobs are governed by Slurm memory allocation</li> <li>the sum of all memory of all processes started by your job may not exceed the job reservation.</li> <li>please don't over-allocate memory, see \"Memory Accounting in Slurm\" below for details</li> </ul> <p>Our Slurm configuration uses Linux cgroups to enforce a maximum amount of resident memory. You simply specify it using <code>--mem=&lt;size&gt;</code> in your <code>srun</code> and <code>sbatch</code> command.</p> <p>In the (rare) case that you provide more flexible number of threads (Slurm tasks) or GPUs, you could also look into <code>--mem-per-cpu</code> and <code>--mem-per-gpu</code>. The official Slurm sbatch manual is quite helpful, as is <code>man sbatch</code> on the cluster command line.</p> <p>Slurm (or rather Linux via cgroups) will track all memory started by all jobs by your process. If each process works independently (e.g., you put the output through a pipe <code>prog1 | prog2</code>) then the amount of memory consumed will at any given time be the sum of the RSS of both processes at that time. If your program uses <code>fork</code>, which uses memory in a copy-on-write fashion, the shared memory is of course only counted once. Note that Python's multiprocessing does not use copy on write: its data will be explicitly copied and consume additional memory. Refer to the Scipy/Numpy/Pandas etc. documentation on how to achieve parallelism without copying too much data.</p> <p>The amount of virtual memory that your program can reserve is only \"virtually\" unlimited (pun not intended). However, in practice, the operating system will not like you allocating more than physically available. If your program attempts to allocate more memory than requested via Slurm, your program will be killed.</p> <p>This is reported to you in the Slurm job output log as something like:</p> <pre><code>slurmstepd: error: Detected 1 oom-kill event(s) in step &lt;JOB ID&gt;.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.\n</code></pre> <p>You can inspect the amount of memory available on each node in total with <code>sinfo --format \"%.10P %.10l %.6D %.6m %N\"</code>, as shown below.</p> <pre><code>[hpc@hpclogin ~]$ sinfo --format \"%.10P %.10l %.6D %.6m %N\"\n PARTITION  TIMELIMIT  NODES MEMORY NODELIST\n  parallel 20-00:00:0     11 515306 compute[134-144]\n   rooster   infinite      4 515370 gpu[145-148]\n      hebb   infinite      1 515628 gpu180\n    debug* 7-00:00:00     16 515175 compute[118-133]\n      chem   infinite      2 257289 gpu[181,185]\n        li   infinite      1 257328 gpu182\n       aml   infinite      3 515207 compute[183-184,189]\n    netsys   infinite      1 515347 gpu186\n    sfscai 2-00:00:00      3 515371 gpu[187-188,190]\n</code></pre>"},{"location":"slurm/memory-allocation/#memorycpu-accounting-in-slurm","title":"Memory/CPU Accounting in Slurm","text":"<p>Memory Accounting in Slurm Summary</p> <ul> <li>you can use Slurm accounting to see memory and CPU usage of your program</li> <li>use <code>sacct -j JOBID --format=JobID,MaxRSS</code> to display the RSS usage of your program</li> <li>use <code>sacct -j JOBID --format=Elapsed,AllocCPUs,TotalCPU</code> to display information about CPU usage</li> <li>consider using the helpful script below to compute overallocated memory</li> </ul> <p>While Slurm runs your job, it collects information about the job such as the running time, exit status, and memory usage. This information is available through the scheduling system via the <code>squeue</code> and <code>scontrol</code> commands, but only while the job is pending execution, executing, or currently completing. After job completion, the information is only available through the Slurm accounting system.</p> <p>You can query information about jobs, e.g., using <code>sacct</code>:</p> <pre><code>$ sacct -j 1607166\n       JobID    JobName  Partition    Account  AllocCPUS      State ExitCode\n------------ ---------- ---------- ---------- ---------- ---------- --------\n1607166      snakejob.+      debug                    16  COMPLETED      0:0\n1607166.bat+      batch                               16  COMPLETED      0:0\n1607166.ext+     extern                               16  COMPLETED      0:0\n</code></pre> <p>This shows that the job with ID <code>1607166</code> with a job ID starting with <code>snakejob.</code> has been run in the <code>debug</code> partition, been allocated 16 cores and had an exit code of <code>0:0</code>. For technical reasons, there is a <code>batch</code> and an <code>extern</code> sub step. Actually, Slurm makes it possible to run various steps in one batch as documented in the Slurm documentation.</p> <p>The <code>sacct</code> command has various command-line options that you can read about via <code>man sacct</code> or in the Slurm documentation. We can use <code>--brief</code>/<code>-b</code> to show only a brief summary.</p> <pre><code>$ sacct -j 1607166 --brief\n       JobID      State ExitCode\n------------ ---------- --------\n1607166       COMPLETED      0:0\n1607166.bat+  COMPLETED      0:0\n1607166.ext+  COMPLETED      0:0\n</code></pre> <p>Similarly, you can use <code>--long</code> to display extended information (see the manual for the displayed columns). Very long report lines can be piped into <code>less -S</code> for easier display. You can fine-tune the information to display with a format string to <code>--format</code>:</p> <pre><code>$ sacct -j 1607166 --format=JobID,ReqMem,MaxRSS,Elapsed,TotalCPU,AllocCPUS\n       JobID   ReqMem     MaxRSS    Elapsed   TotalCPU  AllocCPUS\n------------ --------- ---------- ---------- ---------- ----------\n1607166          60Gn              13:07:31 7-16:21:29         16\n1607166.bat+     60Gn   4314560K   13:07:31 7-16:21:29         16\n1607166.ext+     60Gn          0   13:07:31  00:00.001         16\n</code></pre> <p>From this command, we can read that we allocate 60GB memory of memory per node (suffix <code>n</code>, here <code>Gn</code> for gigabytes per node) and the maximum RSS is reported as 4.3GB. You can use this information to fine-tune your memory allocations. As a side-remark, a suffic <code>c</code> indicates the memory per core (e.g., that could be<code>60Gc</code>)</p> <p>Further, the program ran for 13 hours and 7 minutes with allocated 16 CPU cores and consumed a total of 7 days, 16 hours, and 21 minutes of CPU time. Thus, a total of 10,061 CPU minutes were spent in 787 minutes wall-clock time. This yields an overall empirical degree of parallelism of about 10061 / 787 = 14, and a parallel efficiency of 14 / 16 = 88%. The discussion of parallel efficiency is a topic not covered here.</p> <p>However, you can use the <code>awk</code> script below to compute the empirical parallelism (<code>EmpPar</code>) and the parallel efficiency (<code>ParEff</code>). The script also displays the difference I requested, and used RSS (<code>DiffRSS</code>). The script can be found here.</p> <pre><code>$ sacct -j 1607166 --format=JobID,ReqMem,MaxRSS,Elapsed,TotalCPU,AllocCPUS \\\n                | awk -f quick-sacct.awk\n       JobID     ReqMem     MaxRSS    Elapsed   TotalCPU  AllocCPUS     EmpPar   ParEff  DiffMEM\n------------ ---------- ---------- ---------- ---------- ----------  --------- -------- --------\n1607166            60Gn              13:07:31 7-16:21:29         16      0.00     0.00        -\n1607166.bat+       60Gn   4314560K   13:07:31 7-16:21:29         16     14.05     0.88    55.89\n1607166.ext+       60Gn          0   13:07:31  00:00.001         16      0.00     0.00        -\n</code></pre>"},{"location":"slurm/overview/","title":"Scheduling Overview","text":"<p>The NYUSh HPC uses the Slurm scheduling system for resource allocation. This section of the manual attempts to give an overview of what scheduling is and how to use the Slurm scheduler. For more detailed information, you will have to refer to the Slurm website and the Slurm man pages (e.g., by entering <code>man sbatch</code> or <code>man srun</code> on the HPC terminal's command line).</p> <p>For a quick introduction and hands-on examples, please see the manual sections</p> <ul> <li>Overview, starting with Slurm Quickstart, and</li> <li>HPC Tutorial, starting with Episode 0.</li> </ul> <p>Also, make sure that you are aware of our How-To: Debug Software and How-To: Debug Software on HPC Systems guides in the case that something goes wrong.</p>"},{"location":"slurm/overview/#annotated-contents","title":"Annotated Contents","text":"<ul> <li>Background on Scheduling -- some background on scheduling and the terminology used</li> <li>Quickstart -- explains the most important Slurm commands, with examples</li> <li>Cheat Sheet -- for quick reference</li> <li>Job Scripts -- how to setup job scripts with Slurm</li> <li>Memory Allocation -- memory allocation ( one of the most important concepts that is most often found confusing)</li> <li>Introduction to Slurm Commands<ul> <li><code>srun</code> -- running parallel jobs now</li> <li><code>sbatch</code> -- submission of batch jobs</li> <li><code>scancel</code> -- stop/kill jobs</li> <li><code>sinfo</code> -- display information about the Slurm cluster</li> <li><code>squeue</code> -- information about pending and running jbos</li> <li><code>scontrol</code> -- detailed information (and control)</li> <li><code>sacct</code> -- access Slurm accounting information (pending, running, and past jobs)</li> <li>Format Strings in Slurm -- format strings allow to display extended information about Slurm scheduler objects</li> </ul> </li> <li>Slurm and Snakemake -- how to use Snakemake with Slurm</li> <li>X11 Forwarding -- X11 forwarding in Slurm (simple; short)</li> <li>Rosetta Stone -- lookup table for SGE &lt;-&gt; Slurm</li> </ul>"},{"location":"slurm/overview/#a-word-on-elsewhere","title":"A Word on \"Elsewhere\"","text":"<p>Many other facilities run Slurm clusters and make their documentation available on the internet. We list some that we found useful below. However, be aware that Slurm is a highly configurable and extensible system. Other sites may have different configurations and plugins enabled than we have (or might even have written custom plugins that are not available at NYUSH).</p> <ul> <li>Quick Start User Guide - the official guide from the Slurm creators.</li> <li>Slurm <code>man</code> Pages - web versions of Unix manual (<code>man</code>) pages.</li> <li>TU Dresden Slurm Compendium - nice documentation from the installation in Dresden.   Note that their installation is highly customized, in particular, their partition selection is automated (but is not for us).</li> <li>Slurm at CECI - CECI is a HPC consortium from Belgium.</li> <li>Slurm at the Arctic University of Norway</li> <li>Slurm at Technical University of Denmark - if you want to get an insight in how this looks to administrator.</li> </ul>"},{"location":"slurm/quickstart/","title":"Slurm Quickstart","text":"<p>Create an interactive bash session (<code>srun</code> will run bash in real-time, <code>--pty</code> connects its <code>stdout</code> and <code>stderr</code> to your current session).</p> <pre><code>[hpc@hpclogin ~]$ srun --pty bash -i\n[hpc@compute132 ~]$ echo \"hello world\"\nhello world\n[hpc@compute132 ~]$ exit\nexit\n[hpc@hpclogin ~]$\n</code></pre> <p>Note you probably want to longer running time for your interactive jobs. This way, your jobs can run for up to 20 days. This will make your job be routed automatically into the <code>parallel</code> partition as it is the only one that can fit your job.</p> <pre><code>[hpc@hpclogin ~]$ srun --pty --time 20-00 -p parallel  bash -i\n[hpc@compute141 ~]$\n</code></pre> <p>Allocate 4 cores (default is 1 core), and a total of 4GB of RAM on one node (alternatively use <code>--mem-per-cpu</code> to set RAM per CPU); <code>sbatch</code> accepts the same argument.</p> <pre><code>[hpc@hpclogin ~]$ srun --cpus-per-task=4 --nodes=1 --mem=4G --pty bash\n[hpc@hpclogin ~]$ export | grep SLURM_CPUS_ON_NODE\n4\n[hpc@hpclogin ~]$ your-parallel-script --threads 4\n</code></pre> <p>Create an interactive R session on the cluster. </p> <pre><code>[hpc@hpclogin ~]$ module load r\n[hpc@hpclogin ~]$ srun --pty R\n\nR version 4.2.2 (2022-10-31) -- \"Innocent and Trusting\"\n[...]\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n[Previously saved workspace restored]\n\n&gt; Sys.info()[\"nodename\"]\n    nodename \n\"compute132\" \n&gt; q()\nSave workspace image? [y/n/c]: y\n[hpc@hpclogin ~]$ \n</code></pre>"},{"location":"slurm/reservations/","title":"Reservations / Maintenances","text":"<p>Hint</p> <p>Read this in particular if you want to know why your job does not get scheduled and you see <code>Reason=ReqNodeNotAvail,_Reserved_for_maintenance</code> in <code>scontrol show job</code> .</p> <p>Administration registers maintenances with the Slurm scheduler as so-called reservations. You can see the current reservations with <code>scontrol show reservation</code>. The following is a scheduled reservation affecting ALL nodes of the cluster.</p> <pre><code>[hpc@hpclogin ~]$ scontrol show reservation\nReservationName=manager StartTime=2024-08-16T09:55:00 EndTime=2025-08-16T09:55:00 Duration=365-00:00:00\n   Nodes=compute133 NodeCnt=1 CoreCnt=64 Features=(null) PartitionName=(null) Flags=SPEC_NODES\n   TRES=cpu=64\n   Users=gh2440 Groups=(null) Accounts=(null) Licenses=(null) State=ACTIVE BurstBuffer=(null) Watts=n/a\n   MaxStartDelay=(null)\n</code></pre>"},{"location":"slurm/reservations/#what-is-the-effect-of-a-reservation","title":"What is the Effect of a Reservation?","text":"<p>Maintenance reservations will block the affected nodes (or even the whole cluster) for jobs. If there is a maintenance in one week then your job must have an end time before the reservation starts. By this, the job gives a guarantee to the scheduler that it will not interfer with the maintenance reservation.</p> <p>For example, <code>scontrol show job JOBID</code> might report the following</p> <pre><code>JobId=4011580 JobName=snakejob\n   UserId=USER(UID) GroupId=GROUP(GID) MCS_label=N/A\n   Priority=1722 Nice=0 Account=GROUP QOS=normal\n   JobState=PENDING Reason=ReqNodeNotAvail,_Reserved_for_maintenance Dependency=(null)\n   Requeue=1 Restarts=0 BatchFlag=1 Reboot=0 ExitCode=0:0\n   RunTime=00:00:00 TimeLimit=28-00:00:00 TimeMin=N/A\n   SubmitTime=2024-08-30T09:01:01 EligibleTime=2024-08-30T09:01:01\n   AccrueTime=2024-08-30T09:01:01\n   StartTime=2024-09-09T00:00:00 EndTime=2024-10-07T00:00:00 Deadline=N/A\n   SuspendTime=None SecsPreSuspend=0 LastSchedEval=2024-08-30T10:20:40\n   Partition=long AllocNode:Sid=172.16.35.153:5453\n   ReqNodeList=(null) ExcNodeList=(null)\n   NodeList=(null)\n   NumNodes=1-1 NumCPUs=8 NumTasks=8 CPUs/Task=1 ReqB:S:C:T=0:0:*:*\n   TRES=cpu=8,mem=4G,node=1,billing=8\n   Socks/Node=* NtasksPerN:B:S:C=0:0:*:* CoreSpec=*\n   MinCPUsNode=1 MinMemoryNode=4G MinTmpDiskNode=0\n   Features=(null) DelayBoot=00:00:00\n   OverSubscribe=OK Contiguous=0 Licenses=(null) Network=(null)\n   Power=\n   NtasksPerTRES:0\n</code></pre> <p>Look out for the <code>Reason</code> line:</p> <pre><code>Reason=ReqNodeNotAvail,_Reserved_for_maintenance\n</code></pre> <p>This job is scheduled to run up to 4 weeks and has been submitted on 2024-08-30.</p> <p>Right now the following reservation is active</p> <pre><code># scontrol show reservation\nReservationName=manage StartTime=2024-09-07T00:00:00 EndTime=2024-09-09T00:00:00 Duration=2-00:00:00\n   Nodes=compute[118-144]\n   NodeCnt=236 CoreCnt=5344 Features=(null) PartitionName=(null)\n   Flags=MAINT,IGNORE_JOBS,SPEC_NODES,ALL_NODES TRES=cpu=10176\n   Users=root Groups=(null) Accounts=(null) Licenses=(null) State=INACTIVE BurstBuffer=(null) Watts=n/a\n   MaxStartDelay=(null)\n</code></pre> <p>Thus, the scheduler decided to set a <code>StartTime</code> of the job to <code>2024-09-09T00:00:00</code>, which is the end time of the reservation. Effectively, the job is forced to run outside the maintenance reservation.</p> <p>You can resolve this by using a <code>--time=</code> parameter to <code>srun</code> or <code>sbatch</code> such that the job ends before the maintenance reservation starts.</p>"},{"location":"slurm/rosetta-stone/","title":"Slurm Rosetta Stone","text":"<p>Rosetta Stone?</p> <p>The Rosetta Stone is a stone slab that carries the same text in Egyptian hieroglyphs and ancient Greek. This was key for decyphering Egyptian hieroglyphs in the 18<sup>th</sup> century. Nowadays, the term is often used to label translation tables such as the one below.</p> <p>The table below shows some SGE commands and their Slurm equivalents.</p> User Command SGE Slurm remote login <code>qrsh/qlogin</code> <code>srun --pty bash</code> run interactively N/A <code>srun --pty program</code> submit job <code>qsub script.sh</code> <code>sbatch script.sh</code> delete job <code>qdel job-id</code> <code>scancel job-id</code> job status by job id N/A <code>squeue --job job-id</code> detailed job status <code>qstat -u '*' -j job-id</code> <code>sstat job-id</code> job status of your jobs <code>qstat</code> <code>squeue --me</code> job status by user <code>qstat -u user</code> <code>squeue -u user</code> hold job <code>qhold job-id</code> <code>scontrol hold job-id</code> release job <code>qrls job-id</code> <code>scontrol release job-id</code> queue list <code>qconf -sql</code> <code>scontrol show partitions</code> node list <code>qhost</code> <code>sinfo -N</code> OR <code>scontrol show nodes</code> cluster status <code>qhost -q</code> <code>sinfo</code> show node resources N/A <code>sinfo \"%n %G\"</code> Job Specification SGE Slurm script directive marker <code>#$</code> <code>#SBATCH</code> (run in queue) <code>-q queue</code> <code>-p queue</code> allocated nodes N/A <code>-N min[-max]</code> allocate cores <code>-pe smp count</code> <code>-n count</code> limit running time <code>-l h_rt=time</code> <code>-t days-hh:mm:s</code> redirectd stdout <code>-o file</code> <code>-o file</code> redirect stderr <code>-e file</code> <code>-e file</code> combine stdout/stderr <code>-j yes</code> <code>-o without -e</code> copy environment <code>-V</code> <code>--export=ALL\\|NONE\\|variables</code> email notification <code>-m abe</code> <code>--mail-type=events</code> send email to <code>-M email</code> <code>--mail-user=email</code> job name <code>-N name</code> <code>--job-name=name</code> restart job <code>-r yes|no</code> <code>--requeue|--no-requeue</code> working directory <code>-wd path</code> <code>--workdir</code> run exclusively <code>-l exclusive</code> <code>--exclusive</code> OR <code>--shared</code> allocate memory <code>-l h_vmem=size</code> <code>--mem=mem</code> OR <code>--mem-per-cpu=mem</code> wait for job <code>-hold_jid jid</code> <code>--depend state:job</code> select target host <code>-l hostname=host1\\|host1</code> <code>--nodelist=nodes</code> AND/OR <code>--exclude</code> allocate GPU <code>-l gpu=1</code> <code>--gres=gpu:tesla:count</code> or <code>--gres=gpu:a40:count</code>"},{"location":"slurm/snakemake/","title":"Snakemake with Slurm","text":"<p>This page describes how to use Snakemake with Slurm.</p>"},{"location":"slurm/snakemake/#prerequisites","title":"Prerequisites","text":"<ul> <li>This assumes that you have Miniconda properly setup with Bioconda.</li> <li>Also it assumes that you have already activated the Miniconda base environment with <code>source miniconda/bin/activate</code>.</li> </ul>"},{"location":"slurm/snakemake/#environment-setup","title":"Environment Setup","text":"<p>We first create a new environment <code>snakemake-slurm</code> and activate it. We need the <code>snakemake</code> package for this.</p> <pre><code>host:~$ conda create -y -n snakemake-slurm snakemake\n[...]\n#\n# To activate this environment, use\n#\n#     $ conda activate snakemake-slurm\n#\n# To deactivate an active environment, use\n#\n#     $ conda deactivate\nhost:~$ conda activate snakemake-slurm\n(snakemake-slurm) host:~$\n</code></pre>"},{"location":"slurm/snakemake/#snakemake-workflow-setup","title":"Snakemake Workflow Setup","text":"<p>We create a workflow and ensure that it works properly with multi-threaded Snakemake (no cluster submission here!)</p> <pre><code>host:~$ mkdir -p snake-slurm\nhost:~$ cd snake-slurm\nhost:snake-slurm$ cat &gt;Snakefile &lt;&lt;\"EOF\"\nrule default:\n    input: \"the-result.txt\"\n\nrule mkresult:\n    output: \"the-result.txt\"\n    shell: r\"sleep 1m; touch the-result.txt\"\nEOF\nhost:snake-slurm$ snakemake --cores=1\n[...]\nhost:snake-slurm$ ls\nSnakefile  the-result.txt\nhost:snake-slurm$ rm the-result.txt\n</code></pre>"},{"location":"slurm/snakemake/#snakemake-and-slurm","title":"Snakemake and  Slurm","text":"<p>You have two options:</p> <ol> <li>Simply use <code>snakemake --profile=cubi-v1</code> and the Snakemake resource configuration as shown below. STRONGLY PREFERRED</li> <li>Use the <code>snakemake --cluster='sbatch ...'</code> command.</li> </ol> <p>Note that we sneaked in a <code>sleep 1m</code>? In a second terminal session, we can see that the job has been submitted to SLURM indeed.</p> <pre><code>host:~$ squeue  -u holtgrem_c\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n               325     debug snakejob holtgrem  R       0:47      1 med0127\n</code></pre>"},{"location":"slurm/snakemake/#threads-resources","title":"Threads &amp; Resources","text":"<p>The <code>cubi-v1</code> profile (stored in <code>/etc/xdg/snakemake/cubi-v1</code> on all cluster nodes) supports the following specification in your Snakemake rule:</p> <ul> <li><code>threads</code>: the number of threads to execute the job on</li> <li>memory in a syntax understood by Slurm, EITHER<ul> <li><code>resources.mem</code>/<code>resources.mem_mb</code>: the memory to allocate for the whole job, OR </li> <li><code>resources.mem_per_thread</code>: the memory to allocate for each thread.</li> </ul> </li> <li><code>resources.time</code>: the running time of the rule, in a syntax supported by Slurm, e.g. <code>HH:MM:SS</code> or <code>D-HH:MM:SS</code></li> <li><code>resources.partition</code>: the partition to submit your job into (Slurm will pick a fitting partition for you by default)</li> <li><code>resources.nodes</code>: the number of nodes to schedule your job on (defaults to <code>1</code> and you will want to keep that value unless you want to use MPI)</li> </ul> <p>You will need Snakemake &gt;=7.0.2 for this.</p> <p>Here is how to call Snakemake:</p> <pre><code># snakemake --profile=cubi-v1 -j1\n</code></pre> <p>To set rule-specific resources:</p> <pre><code>rule myrule:\n    threads: 1\n    resources:\n        mem='8G',\n        time='04:00:00',\n    input: # ...\n    output: # ...\n    shell: # ...\n</code></pre> <p>You can combine this with Snakemake resource callables, of course:</p> <pre><code>def myrule_mem(wildcards, attempt):\n    mem = 2 * attempt\n    return '%dG' % mem\n\nrule snps:\n    threads: 1\n    resources:\n        mem=myrule_mem,\n        time='04:00:00',\n    input: # ...\n    output: # ...\n    shell: # ...\n</code></pre>"},{"location":"slurm/snakemake/#custom-logging-directory","title":"Custom logging directory","text":"<p>By default, slurm will write log files into the working directory of snakemake, which will look like <code>slurm-$jobid.out</code>.</p> <p>To change this behaviour, the environment variable <code>SBATCH_DEFAULTS</code> can be set to re-route the <code>--output</code> parameter. If you want to write your files into <code>slurm_logs</code> with a filename pattern of <code>$name-$jobid</code> for instance, consider the following snippet for your submission script:</p> <pre><code>#!/bin/bash\n#\n#SBATCH --job-name=snakemake_main_job\n#SBATCH --ntasks=1\n#SBATCH --nodes=1\n#SBATCH --time=48:10:00\n#SBATCH --mem-per-cpu=300M\n#SBATCH --output=slurm_logs/%x-%j.log\n\nmkdir -p slurm_logs\nexport SBATCH_DEFAULTS=\" --output=slurm_logs/%x-%j.log\"\n\ndate\nsrun snakemake --use-conda -j1 --profile=cubi-v1\ndate\n</code></pre> <p>The name of the snakemake slurm job will be <code>snakemake_main_job</code>, the name of the jobs spawned from it will be called after the rule name in the Snakefile.</p>"},{"location":"slurm/temporary-files/","title":"Slurm and Temporary Files","text":"<p>This section describes how Slurm handles temporary files on the local disk.</p> <p>Temporary Files Best Practices</p> <p>See Best Practices: Temporary Files for information how to use temporary files effectively.</p>"},{"location":"slurm/temporary-files/#slurm-behaviour","title":"Slurm Behaviour","text":"<p>Our Slurm configuration has the following behaviour.</p>"},{"location":"slurm/temporary-files/#environment-variable-tmpdir","title":"Environment Variable TMPDIR","text":"<p>Slurm itself will by default not change the <code>TMPDIR</code> environment variable but retain the variable's value from the <code>srun</code> or <code>sbatch</code> call.</p>"},{"location":"slurm/temporary-files/#private-local-tmp-directories","title":"Private Local <code>/tmp</code> Directories","text":"<p>The only place where users can write data to on local storage of the compute nodes is <code>/tmp</code>.</p> <p>Storage is a consumable shared resource as the storage used by one job cannot use another job. It is thus critical that Slurm cleans up after each job such that all space on the local node is available to the next job. This is done using the job_container/tmpfs Slurm plugin.</p> <p>This plugin creates a so-called Linux namespace for each job and creates a bind mount of <code>/tmp</code> to a location on the local storage. This mount is only visible to the currently running job and each job, even of the same user, get their own <code>/tmp</code>. After a job terminates, Slurm will remove the directory and all of its content.</p> <p>There is a notable exception. If you use <code>ssh</code> to connect to a node rather than using <code>srun</code> or <code>sbatch</code>, you will see the system <code>/tmp</code> directory and can also write to it. This usage of storage is not tracked and consequently you can circumvent the Slurm quota management. Using <code>/tmp</code> in this fashion (i.e., outside of Slurm-controlled jobs) is prohibited. If it cannot be helped (e.g., if you need to run some debugging application that needs to create FIFO or socket files) then keep usage of <code>/tmp</code> outside of Slurm job below 100MB.</p>"},{"location":"slurm/temporary-files/#tracking-local-storage-localtmp","title":"Tracking Local Storage <code>localtmp</code>","text":"<p>Enforcing <code>localtmp</code> Gres</p> <p>From January 31, we will enforce the allocated storage in <code>/tmp</code> on the local disk with quotas. Jobs writing to <code>/tmp</code> beyond the quota in the job allocation will not function properly and probably crash with \"out of disk quota\" messages.</p>"},{"location":"slurm/x11/","title":"Slurm and X11","text":"<p>Make sure to connect to the login node with X11 forwarding.</p> <pre><code>host:~$ ssh -X -l user_c hpc-login-1.cubi.bihealth.org\n</code></pre> <p>Once connected to the login node, pass the <code>--x11</code> flag.</p> <pre><code>hpc-login-1:~$ srun --pty --x11 xterm\n</code></pre>"},{"location":"storage/home-quota/","title":"Keeping your home folder clean","text":"<p>We set quite restrictive quotas for user homes, but in exchange you get file system snapshots and mirroring. Your home folder should therefore only be used for scripts, your user config, and other small files. Everything else should be stored in the <code>work</code> or <code>scratch</code> subdirectories, which effectively link to your group's shared storage space. This document describes some common pitfalls and how to circumvent them.</p> <p>Hint</p> <p>The tilde character (<code>~</code>) is shorthand for your home directory.</p>"},{"location":"storage/home-quota/#code-libraries-and-other-big-folders","title":"Code libraries and other big folders","text":"<p>Various programs are used to depositing large folders in a user's home and can quickly use up your allotted storage quota. These include:</p> <ul> <li>Python: <code>~/.local/lib/python*</code></li> <li>*conda: Location chosen by the user.</li> <li>R: <code>~/R/x86_64-pc-linux-gnu-library</code></li> <li>HPC portal: <code>~/ondemand</code></li> </ul> <p>Please note that directories whose name is starting with a dot are not shown by the normal <code>ls</code> command, but require the <code>ls -a</code> flag. You can search your home folder for large directories like so: <pre><code>$ du -shc ~/.* ~/* --exclude=.. --exclude=.\n</code></pre></p> <p>You should move these locations to your <code>work</code> folder and create symbolic links in their place. Conda installations should be installed in <code>work</code> from the very beginning as they do not react well to being moved around.</p> <p>Here is an example for the <code>.local</code> folder.</p> <pre><code>$ mv ~/.local ~/work/.local\n$ ln -s ~/work/.local ~/.local\n</code></pre>"},{"location":"storage/home-quota/#temporary-files","title":"Temporary Files","text":"<p>Another usual culprit is the hidden <code>.cache</code> directory which contains temporary files. This folder can be moved to the <code>scratch</code> volume in a similar manner as described above.</p> <pre><code>$ mv ~/.cache ~/scratch/.cache\n$ ln -s ~/scratch/.cache ~/.cache\n</code></pre> <p>Important</p> <p>Files placed in your <code>scratch</code> directory will be automatically removed after 2 weeks. Do not place any valuable files in there.</p>"},{"location":"storage/migration-faq/","title":"Data Migration Tips and tricks","text":"<p>Please use <code>hpc-transfer-1</code> and <code>hpc-transfer-2</code> for moving large amounts of files. This not only leaves the compute notes available for actual computation, but also has no risk of your jobs being killed by Slurm. You should also use <code>tmux</code> to not risk connection loss during long running transfers.</p>"},{"location":"storage/migration-faq/#moving-a-project-folder","title":"Moving a project folder","text":"<ol> <li> <p>Define source and target location and copy contents.    Please replace the parts in curly brackets with your actual folder names.    It is important to end paths with a trailing slash (<code>/</code>) as this is interpreted by <code>sync</code> as \u201call files in this folder\u201d. <pre><code>$ SOURCE=/data/gpfs-1/work/projects/{my_project}/\n$ TARGET=/data/cephfs-2/unmirrored/projects/{my-project}/\n$ rsync -ahP --stats --dry-run $SOURCE $TARGET\n</code></pre></p> </li> <li> <p>Remove the <code>--dry-run</code> flag to start the actual copying process.</p> <p>Important</p> <p>File ownership information will be lost during this process. This is due to non-root users not being allowed to change ownership of arbitrary files. If this is a problem for you, please contact our admins again after completing this step.</p> </li> <li> <p>Perform a second <code>rsync</code> to check if all files were successfully transferred.    Paranoid users might want to add the <code>--checksum</code> flag to <code>rsync</code> or use <code>hashdeep</code>.    Please note the flag <code>--remove-source-files</code> which will do exactly as the name suggests,    but leaves empty directories behind. <pre><code>$ rsync -ahX --stats --remove-source-files --dry-run $SOURCE $TARGET\n</code></pre></p> </li> <li>Again, remove the <code>--dry-run</code> flag to start the actual deletion.</li> <li>Check if all files are gone from the SOURCE folder and remove the empty directories: <pre><code>$ find $SOURCE -type f | wc -l\n0\n$ rm -r $SOURCE\n</code></pre></li> </ol> <p>Warning</p> <p>When defining your SOURCE location, do not use the <code>*</code> wildcard character. It will not match hidden (dot) files and leave them behind. Its better to use a trailing slash which matches \u201cAll files in this folder\u201d.</p>"},{"location":"storage/migration-faq/#moving-user-work-folders","title":"Moving user work folders","text":""},{"location":"storage/migration-faq/#work-data","title":"Work data","text":"<ol> <li> <p>All files within your own work directory can be transferred as follows.    Please replace parts in curly braces with your cluster user name. <pre><code>$ SOURCE=/data/gpfs-1/work/users/{username}/\n$ TARGET=/data/cephfs-1/home/users/{username}/work/\n$ rsync -ahP --stats --dry-run $SOURCE $TARGET\n</code></pre></p> <p>Note</p> <p>The <code>--dry-run</code> flag lets you check that rsync is working as expected without copying any files. Remove it to start the actual transfer.</p> </li> <li> <p>Perform a second <code>rsync</code> to check if all files were successfully transferred.    Paranoid users might want to add the <code>--checksums</code> flag or use <code>hashdeep</code>.    Please note the flag <code>--remove-source-files</code> which will do exactly as the name suggests,    but leaves empty directories behind. <pre><code>$ rsync -ahP --stats --remove-source-files --dry-run $SOURCE $TARGET\n</code></pre></p> </li> <li>Check if all files are gone from the SOURCE folder: <pre><code>$ find $SOURCE -type f | wc -l\n0\n</code></pre></li> </ol>"},{"location":"storage/migration-faq/#conda-environments","title":"Conda environments","text":"<p>Conda installations tend not to react well to moving their main folder from its original location. There are numerous ways around this problem which are described here.</p> <p>A simple solution we can recommend is this:</p> <ol> <li> <p>Install a fresh version of conda or mamba in your new work folder.    Don't forget to first remove the conda init block in <code>~/.bashrc</code>. <pre><code>$ nano ~/.bashrc\n$ conda init\n$ conda config --set auto_activate_base false\n</code></pre></p> </li> <li> <p>You can then use your new conda to export your old environments by specifying a full path like so: <pre><code>$ conda env export -p /fast/work/user/$USER/miniconda/envs/&lt;env_name&gt; -f &lt;env_name&gt;.yaml\n</code></pre> If you run into errors it might be better to also use the <code>--no-builds</code> flag.</p> </li> <li> <p>Finally re-create your old environments from the yaml files: <pre><code>$ conda env create -f {environment.yml}\n</code></pre></p> </li> </ol>"},{"location":"storage/querying-storage/","title":"Querying Storage Quotas","text":"<p>Outdated</p> <p>This document is only valid for the old, third-generation file system and will be removed soon.</p> <p>As described elsewhere, all data in your user and group volumes is subject to quotas. This page quickly shows how to query for the current usage of data volume and file counts for your user, group, and projects.</p>"},{"location":"storage/querying-storage/#query-for-user-data-and-file-usage","title":"Query for User Data and File Usage","text":"<p>The file <code>/etc/bashrc.gpfs-quota</code> contains some Bash functions that you can use for querying the quota usage. This file is automatically sourced in all of your Bash sessions.</p> <p>For querying your user's data and file usage, enter the following command:</p> <pre><code># myquota\n</code></pre> <p>You will get a report as follows.</p> <pre><code>                         Block Limits                                               |     File Limits\nFilesystem Fileset    type         blocks      quota      limit   in_doubt    grace |    files   quota    limit in_doubt    grace  Remarks\ngpfs       home       USR          1.713G        50G        60G          0     none |    16999       0        0        0     none \ngpfs       scratch    USR          1.247T         5T         6T          0     none |     2977       0        0        0     none\n</code></pre>"},{"location":"storage/scratch-cleanup/","title":"Automated Cleanup of Scratch","text":"<p>The <code>scratch</code> space is automatically cleaned up nightly with the following mechanism.</p> <ol> <li>Files which were not modified for the last 14 days are removed.</li> <li>Erroneously deleted files can be manually retrieved from the snapshots.</li> </ol> <p>Warning</p> <p>We specifically use the <code>mtime</code> attribute to determine if files in scratch  should be cleaned up. Copying or downloading files to scratch while preserving  the original <code>mtime</code> might lead to unexpected results.</p>"},{"location":"storage/storage-locations/","title":"Storage and Volumes: Locations","text":"<p>This document describes the forth iteration of the file system structure on the NYUSH HPC cluster.</p> <p>Important</p> <p>For now, the old, third-generation file system is still mounted at <code>/gpfsnyu</code>. It will be decommissioned soon, please consult this document describing the migration process!</p>"},{"location":"storage/storage-locations/#organizational-entities","title":"Organizational Entities","text":"<p>There are the following two entities on the cluster:</p> <ol> <li>Users (real people)</li> <li>Groups (Arbeitsgruppen) with one leader and an optional delegate</li> </ol> <p>Each user and group can have storage folders in different locations.</p>"},{"location":"storage/storage-locations/#data-types-and-storage-tiers","title":"Data Types and Storage Tiers","text":"<p>Files stored on the HPC fall into one of three categories:</p> <ol> <li> <p>Home folders store programs, scripts, and user config i.\u00a0e. long-lived and very important files.  Loss of this data requires to redo manual work (like programming).</p> </li> <li> <p>Scratch folders store data of potentially large size which has a medium life time and is important. Examples are raw sequencing data and intermediate results that are to be kept (e.\u00a0g. sorted and indexed BAM files).</p> </li> </ol> <p>Storage comes in two types which differ in their I/O speed, total capacity, and cost. They are called Tier 1 and Tier 2 and sometimes hot storage and warm storage. In the HPC filesystem they are mounted in /gpfsnyu/home and /gpfsnyu/scratch.</p> <ul> <li>Tier 1 storage is fast, relatively small, expensive, and optimized for performance.</li> <li>Tier 2 storage is slow, big, cheap, and built for keeping large files for longer times.</li> </ul> <p>Storage quotas are imposed in these locations to restrict the maximum size of folders. Amount and utilization of quotas is communicated via the HPC Access web portal.</p>"},{"location":"storage/storage-locations/#home-directories","title":"Home Directories","text":"<p>Location: <code>/gpfsnyu/home/</code></p> <p>Only users have home directories on Tier 1 storage. This is the starting point when starting a new shell or SSH session. Important config files are stored here as well as analysis scripts and small user files. Home folders have a strict storage quota of 50\u00a0GB.</p>"},{"location":"storage/storage-locations/#tier-2-storage","title":"Tier 2 Storage","text":"<p>Location: <code>/gpfsnyu/scratch</code></p> <p>This is where big files go when they are not in active use. Users are allocated 10 TB of Tier 2 storage by default. File quotas here can be significantly larger as space is much cheaper and more abundant than on Tier 1.</p>"},{"location":"storage/storage-locations/#overview","title":"Overview","text":"Tier Function Path Default Quota 1 User home <code>/gpfsnyu/home/users/&lt;user&gt;</code> 50 GB 2 Group <code>/gpfsnyu/scratch/users/&lt;user&gt;</code> 10 TB"},{"location":"storage/storage-locations/#snapshots-and-mirroring","title":"Snapshots and Mirroring","text":"<p>Snapshots are incremental copies of the state of the data at a particular point in time.  They provide safety against various \"Ops, did I just delete that?\" scenarios, meaning they can be used to recover lost or damaged files. Depending on the location and Tier, GPFS creates snapshots in different frequencies and retention plans.</p> Location Path Retention policy Mirrored User homes <code>/gpfsnyu/home/users/</code> Hourly for 48 h, daily for 14 d yes"}]}